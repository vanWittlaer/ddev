{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started with DDEV","text":"<p>DDEV is an open source tool for launching local web development environments in minutes. It supports PHP, Node.js, and Python (experimental).</p> <p>These environments can be extended, version controlled, and shared, so you can take advantage of a Docker workflow without Docker experience or bespoke configuration. Projects can be changed, powered down, or removed as easily as they\u2019re started.</p>"},{"location":"#system-requirements","title":"System Requirements","text":"macOSWindows WSL2Traditional WindowsLinuxGitpod &amp; Codespaces"},{"location":"#macos","title":"macOS","text":"<p>Runs natively on ARM64 (Apple Silicon) and AMD64 machines.</p> <ul> <li>macOS Big Sur (11) or higher, mostly</li> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>Colima or Docker Desktop</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Colima or Docker Desktop with recommended settings.</li> <li>Install DDEV for macOS.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#windows-wsl2","title":"Windows WSL2","text":"<ul> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>Docker Desktop on the Windows side or Docker CE inside WSL2</li> <li>Ubuntu or an Ubuntu-derived distro is recommended, though others may work fine</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for Windows.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#traditional-windows","title":"Traditional Windows","text":"<ul> <li>Any recent edition of Windows Home or Windows Pro.</li> <li>RAM: 8GB</li> <li>Storage: 256GB</li> <li>Docker Desktop using the WSL2 backend</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for Windows.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#linux","title":"Linux","text":"<p>Most distros and most versions work fine, on both AMD64 and ARM64 architectures.</p> <ul> <li>RAM: 8GB</li> <li>Storage: 256GB</li> </ul> <p>Next steps:</p> <p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> <ol> <li>Install Docker with recommended settings.</li> <li>Install DDEV for Linux.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"#gitpod-and-github-codespaces","title":"Gitpod and GitHub Codespaces","text":"<p>With Gitpod and GitHub Codespaces you don\u2019t install anything; you only need a browser and an internet connection.</p> <p>Next steps:</p> <ol> <li>Install DDEV within Gitpod or GitHub Codespaces.</li> <li>Launch your first project and start developing. \ud83d\ude80</li> </ol>"},{"location":"developers/","title":"Developing and Improving DDEV","text":"<p>This section is for folks making contributions to DDEV. It covers how to build and release Docker images, and contribute documentation.</p>","boost":0.5},{"location":"developers/brand-guide/","title":"Brand Guide","text":"","boost":0.5},{"location":"developers/brand-guide/#logos","title":"Logos","text":"Figurative Mark Word/Figurative Mark <p>You can find a set of DDEV logos here.</p> <p>If possible, use the SVG version of the logo, as a vector graphic is independent of the resolution and gives the best results regardless of the pixel density of the display.</p> <p>If the SVG format is not supported, you can use the exported PNG versions of the logo. Use @2x, @3x, and @4x for high pixel density displays. Many applications support @2x annotations in the image path and automatically choose the correct image for the display in use.</p> <p>Currently there is no prepared version for dark backgrounds of the word/figurative mark.</p>","boost":0.5},{"location":"developers/brand-guide/#color-plate","title":"Color Plate","text":"DDEV Blue DDEV Black <code>#02a8e2</code> <code>#1e2127</code>","boost":0.5},{"location":"developers/brand-guide/#use-of-the-word-mark-ddev","title":"Use of the Word Mark DDEV","text":"<p>The product DDEV is always referenced in capital letters.</p> <p>When referring to the binary <code>ddev</code>, lowercase letters are preferred.</p>","boost":0.5},{"location":"developers/building-contributing/","title":"Building, Testing, and Contributing","text":"","boost":0.5},{"location":"developers/building-contributing/#testing-latest-commits-on-head","title":"Testing Latest Commits on HEAD","text":"<p>There are several ways to use DDEV\u2019s latest-committed HEAD version:</p> <ul> <li>Download the latest master branch artifacts from nightly.link. Each of these is built by the CI system, signed, and notarized. Get the one you need and place it in your <code>$PATH</code>.</li> <li>Homebrew install HEAD: On macOS and Linux, run <code>brew unlink ddev &amp;&amp; brew install ddev/ddev/ddev --HEAD --fetch-HEAD</code> to get the latest DDEV commit, even if it\u2019s unreleased. Since you\u2019re building this on your own computer, it\u2019s not signed or notarized, and you\u2019ll get a notification that instrumentation doesn\u2019t work, which is fine. If you\u2019re using Linux/WSL2, you\u2019ll likely need to install build-essential by running the following command: <code>sudo apt install -y build-essential</code>.</li> <li>Build manually: If you have normal build tools like <code>make</code> and <code>go</code> installed, you can check out the code and run <code>make</code>.</li> <li>Gitpod You can use the latest build by visiting DDEV on Gitpod.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#testing-a-pr","title":"Testing a PR","text":"<p>Each PR build creates GitHub artifacts you can use for testing, so you can download the one you need from the PR page, install it locally, and test using that build.</p> <p>Download and unzip the appropriate binary and place it in your <code>$PATH</code>.</p>","boost":0.5},{"location":"developers/building-contributing/#homebrew-with-macos-or-linux","title":"Homebrew with macOS or Linux","text":"<p>If you\u2019re using Homebrew, start by unlinking your current binary:</p> <pre><code>brew unlink ddev\n</code></pre> <p>Next, unzip the binary you downloaded, make it executable, and move it to your bin folder:</p> <pre><code>unzip ddev.zip\nchmod +x ddev &amp;&amp; sudo mv ddev /usr/local/bin/ddev\n</code></pre> <p>Verify the replacement worked by running <code>ddev -v</code>. The output should be something like <code>ddev version v1.22.5-alpha1-70-g0852fc2df</code>, instead of the regular <code>ddev version v1.22.5</code>.</p> <p>macOS and Unsigned Binaries</p> <p>macOS doesn\u2019t like these downloaded binaries, so you\u2019ll need to bypass the automatic quarantine to use them:</p> <pre><code>xattr -r -d com.apple.quarantine /usr/local/bin/ddev\n</code></pre> <p>(The binaries on the master branch and the final release binaries are signed.)</p> <p>You do not typically have to install anything else other than the downloaded binary; when you run it it will access any Docker images that it needs.</p> <p>After you\u2019re done, you can delete your downloaded binary and re-link the original Homebrew one:</p> <pre><code>sudo rm /usr/local/bin/ddev\nbrew link --force ddev\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#installing-a-downloaded-binary-in-the-path","title":"Installing a Downloaded Binary in the <code>$PATH</code>","text":"<p>Normally, you can put any executable in your path, and it takes precedence, so you don\u2019t need to remove or disable an already installed DDEV instance, which we will use here. This example uses <code>~/bin</code>. <code>echo $PATH</code> and <code>which ddev</code> are valuable commands for debugging. Since not every distro has <code>~/bin</code> in <code>$PATH</code>, you can create the folder and add it to your path in <code>~/.bashrc</code> with these commands:</p> <pre><code>mkdir -p ~/bin\nexport PATH=\"~/bin:$PATH\"\n</code></pre> <p>Next, unzip the ZIP file you downloaded, make it executable, and move it to a folder in your path. Check with <code>echo $PATH</code>:</p> <pre><code>unzip ddev.zip\nchmod +x ddev &amp;&amp; mv ddev ~/bin\n</code></pre> <p>Now, close and reopen your terminal, and verify the replacement worked by running <code>ddev version</code>. The output should be something like <code>DDEV version v1.22.3-39-gfbb878843</code>, instead of the regular <code>DDEV version v1.22.3</code>.</p> <p>You need to run <code>ddev poweroff</code> and <code>ddev start</code> to download the Docker images that it needs.</p> <p>After you\u2019re done testing, you can delete your downloaded executable, restart your terminal, and again use the standard DDEV:</p> <pre><code>rm ~/bin/ddev\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#open-in-gitpod","title":"Open in Gitpod","text":"<p>Gitpod provides a quick, preconfigured DDEV experience in the browser for testing a PR easily without the need to set up an environment. In any PR you can use the URL <code>https://gitpod.io/#https://github.com/ddev/ddev/pulls/&lt;YOUR-PR&gt;</code> to open that PR and build it in Gitpod.</p> <p>To open and work on DDEV you can use the button below. </p> <p>If you want to run a web project, you can check it out into <code>/workspace/&lt;yourproject&gt;</code> and use it as usual. The things you\u2019re familiar with work normally, except that <code>ddev-router</code> does not run.</p> <p>A Gitpod dummy project for is provided by default in <code>/workspace/d9simple</code>. If you\u2019re testing your own project, you will need to delete it to free up reserved host ports by running <code>ddev delete -Oy d9simple</code>. Then you can run <code>ddev start</code> to work with your own.</p>","boost":0.5},{"location":"developers/building-contributing/#making-changes-to-ddev-images","title":"Making Changes to DDEV Images","text":"<p>If you need to make a change to one of the DDEV images, it will need to be built with a specific tag that\u2019s updated in <code>pkg/versionconstants/versionconstants.go</code>.</p> <p>For example, make a change to <code>containers/ddev-webserver/Dockerfile</code>, then build it:</p> <pre><code>cd containers/ddev-webserver\nmake VERSION=20210424_fix_dockerfile\n</code></pre> <p>Then edit <code>pkg/versionconstants/versionconstants.go</code> to set <code>var WebTag = \"20210424_fix_dockerfile\"</code> and</p> <pre><code>cd /workspace/ddev\nmake\n</code></pre> <p><code>ddev version</code> should show you that you are using the correct webtag, and <code>ddev start</code> will show it.</p> <p>It\u2019s easiest to do this using Gitpod (see above) because Gitpod already has <code>docker buildx</code> all set up for you and the built DDEV binary is in the <code>$PATH</code>.</p>","boost":0.5},{"location":"developers/building-contributing/#pull-requests-and-pr-preparation","title":"Pull Requests and PR Preparation","text":"<p>When preparing your pull request, please use a branch name like <code>YYYYMMDD_&lt;your_username&gt;_short_description</code> (like <code>20230901_rfay_short_description</code>) so it\u2019s easy to identify you as the author.</p>","boost":0.5},{"location":"developers/building-contributing/#docker-image-changes","title":"Docker Image Changes","text":"<p>If you make changes to a Docker image (like <code>ddev-webserver</code>), it won\u2019t have any effect unless you:</p> <ul> <li>Push an image with a specific tag by navigating to the image directory (like <code>containers/ddev-webserver</code>), and running <code>make push DOCKER_REPO=youruser/yourimage VERSION=&lt;branchname&gt;</code>.</li> <li>Multi-arch images require you to have a Buildx builder, so <code>docker buildx create --name ddev-builder-multi --use</code>.</li> <li>You can\u2019t push until you <code>docker login</code>.</li> <li>Push a container to hub.docker.com. Push with the tag that matches your branch. Push to <code>&lt;yourorg&gt;/ddev-webserver</code> repository with <code>make push DOCKER_ORG=&lt;yourorg&gt; VERSION=&lt;branchname&gt;</code> in the container directory. You might have to use other techniques to push to another repository.</li> <li>Update <code>pkg/versionconstants/versionconstants.go</code> with the <code>WebImg</code> and <code>WebTag</code> that relate to the Docker image you pushed.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#local-builds-and-pushes","title":"Local Builds and Pushes","text":"<p>To use <code>buildx</code> successfully you have to have the <code>buildx</code> Docker plugin, which is in many environments by default.</p> <p>To build multi-platform images you must <code>docker buildx create --use</code> as a one-time initialization.</p> <ul> <li> <p>If you want to work locally with a quick build for your architecture, you can:</p> <ul> <li><code>make VERSION=&lt;version&gt;</code></li> <li>for <code>ddev-dbserver</code>: <code>make mariadb_10.3 VERSION=&lt;version&gt;</code> etc.</li> </ul> </li> <li> <p>To push manually:</p> </li> </ul> <pre><code>cd containers/ddev-webserver\nmake push VERSION=&lt;tag&gt;\n</code></pre> <p>If you\u2019re pushing to a repository other than the one wired into the Makefile (like <code>ddev/ddev-webserver</code>):</p> <pre><code>cd containers/ddev-webserver\nmake push VERSION=&lt;tag&gt; DOCKER_REPO=your/dockerrepo\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#pushes-using-github-actions","title":"Pushes Using GitHub Actions","text":"<p>To manually push using GitHub Actions,</p>","boost":0.5},{"location":"developers/building-contributing/#for-most-images","title":"For Most Images","text":"<ul> <li>Visit Actions \u2192 Push tagged image</li> <li>Click \u201cRun workflow\u201d in the blue band near the top.</li> <li>Choose the branch, usually <code>master</code> and then the image to be pushed, <code>ddev-webserver</code>, <code>ddev-dbserver</code>, etc. Also you can use <code>all</code> to build and push all of them. Include a tag for the pushed image and GitHub will do all the work.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#for-ddev-dbserver","title":"For <code>ddev-dbserver</code>","text":"<ul> <li>Visit Actions \u2192 Push tagged db image</li> <li>Click \u201cRun workflow\u201d in the blue band near the top.</li> <li>Choose the branch, usually <code>master</code>. Include a tag for the pushed image and GitHub will do all the work.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#instrumentation","title":"Instrumentation","text":"<p>The instrumentation implementation is generated using the Ampli Codegen.</p> <p>To synchronize the implementation with the latest changes at Amplitude, the CLI tool has to be installed locally:</p> <pre><code>npm install -g @amplitude/ampli\n</code></pre> <p>Make changes to the event definition using the GUI at https://data.amplitude.com/ddev/DDEV:</p> <ul> <li>create a new branch</li> <li>create or change events and properties</li> <li>save changes to the new branch</li> <li>update the implementation with <code>ampli checkout &lt;branch name&gt;</code></li> <li>make changes to the code</li> </ul> <p>Once finished, save the changes to publish a new version of the definitions.</p> <p>Afterwards the changes can be imported running the following command in the project root:</p> <pre><code>ampli pull\n</code></pre> <p>Once the changes are ready to be merged, merge the changes made in the new branch to the main branch in the Amplitude backend and switch back to the main branch:</p> <pre><code>ampli checkout main\n</code></pre> <p>Make sure the API keys are not included to the sources; they are linked during compilation using a GitHub secret.</p>","boost":0.5},{"location":"developers/building-contributing/#environments","title":"Environments","text":"<p>There are two environments defined, <code>DDEV - Production</code> and <code>DDEV - Development</code>. Master builds will deliver the data to production, PR builds to development.</p> <p>When working on Amplitude, please always make sure the correct environment is selected or you won\u2019t see any data. Selection is possible on most pages.</p>","boost":0.5},{"location":"developers/building-contributing/#user-and-event-data","title":"User and event data","text":"<p>The first step is always to identify the device, this includes data like OS, architecture, DDEV version, Docker, etc., details are visible in the User Properties. The devices are called Users in the Amplitude backend. So every user represents an unique device on which DDEV is installed.</p> <p>The second step is to collect data about the command which was called by the user and is delivered by a dedicated <code>Command</code> event.</p> <p>The <code>Project</code> event finally collects data about the loaded project(s) which includes important configuration details like PHP version, database, etc.</p>","boost":0.5},{"location":"developers/building-contributing/#debugging","title":"Debugging","text":"<p>Information about data debugging can be found at https://www.docs.developers.amplitude.com/data/debugger/. Ingestion debugger or via User lookup are the most useful options for DDEV.</p> <p>Don\u2019t forget to select the matching environment while debugging.</p>","boost":0.5},{"location":"developers/building-contributing/#examining-data-on-amplitudecom","title":"Examining data on Amplitude.com","text":"<p>First, local <code>ddev</code> binaries have to be built with <code>AmplitudeAPIKey</code> set. Visit <code>https://app.amplitude.com/data/ddev/DDEV/sources/production</code> and select either \u201cProduction\u201d or \u201cDevelopment\u201d, then click the \u201cGo SDK\u201d line to get the API key. Then set <code>export AmplitudeAPIKey=&lt;key&gt;</code> and build the binaries with <code>make</code>.</p> <p>Then run <code>ddev</code> commands as usual, and the data will be sent to Amplitude.</p> <ul> <li>You can examine data on the local side with <code>export DDEV_VERBOSE=true</code> but it\u2019s awkward. However, the actual data is always marked with <code>AMPLITUDE:</code> and the <code>EventType</code> will be <code>Command</code>, <code>Project</code>, or <code>$identify</code> (User data). For example, DDEV_VERBOSE=true ddev start 2&gt;&amp;1 | grep AMPLITUDE`</li> <li>To see the data show up on Amplitude, you\u2019ll need to <code>ddev debug instrumentation flush</code>.</li> <li>To make it easier to find your data, use the \u201cDevelopment\u201d key and set your <code>instrumentation_user</code> to a familiar value in <code>~/.ddev/global_config.yaml</code>. For example, <code>instrumentation_user: rfay</code> would make it so you can find the user <code>rfay</code>.</li> <li>To inspect data, visit \u201cUser Lookup\u201d, (<code>https://app.amplitude.com/analytics/ddev/activity</code>) and choose the correct source in the upper left (\u201cDDEV Production\u201d or \u201cDDEV Development\u201d). Then use \u201cSearch users\u201d in the upper right to find the user you are studying. If you\u2019ve used an <code>instrumentation_user</code> it will be searchable as \u201cUser\u201d.  (Advanced-&gt;where: \u201cUser\u201d = \u201crfay\u201d. for example). You\u2019ll then have a page devoted to the events of that user.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#building","title":"Building","text":"<ul> <li>You\u2019ll want both your fork/branch and the upstream as remotes in Git, so that tags can be determined. For example, the upstream Git remote can be <code>https://github.com/ddev/ddev</code> and your fork\u2019s remote can be <code>git@github.com:&lt;yourgithubuser&gt;/ddev</code>. Without the upstream, Git may not know about tags that it needs for tests to work.</li> <li>To run tests, you\u2019ll want <code>~/tmp</code> to be allowed in Docker. This is not normally an issue as the home directory is available by default in most Docker providers.</li> </ul> <p>Build the project with <code>make</code> and your resulting executable will end up in <code>.gotmp/bin/linux_amd64/ddev</code> or <code>.gotmp/bin/linux_arm64/ddev</code> (for Linux) or <code>.gotmp/bin/windows_amd64/ddev.exe</code> (for Windows) or <code>.gotmp/bin/darwin_amd64/ddev</code> or <code>.gotmp/bin/darwin_arm64/ddev</code> (for macOS).</p> <p>Build/test/check static analysis with:</p> <pre><code>make # Builds on current os/architecture\nmake linux_amd64\nmake linux_arm64\nmake darwin_amd64\nmake darwin_arm64\nmake windows_amd64\nmake test\nmake clean\nmake staticrequired\n</code></pre>","boost":0.5},{"location":"developers/building-contributing/#testing","title":"Testing","text":"<p>Normal test invocation is <code>make test</code>. Run a single test with an invocation like <code>go test -v -run TestDevAddSites ./pkg/...</code> or <code>make test TESTARGS=\"-run TestDevAddSites\"</code>. The easiest way to run tests is from inside the excellent golang IDE GoLand. Click the arrowhead to the left of the test name.</p> <p>To see which DDEV commands the tests are executing, set the environment variable <code>DDEV_DEBUG=true</code>.</p> <p>Use <code>GOTEST_SHORT=true</code> to run one CMS in each test, or <code>GOTEST_SHORT=&lt;integer&gt;</code> to run exactly one project type from the list of project types in the TestSites array. For example, <code>GOTEST_SHORT=5 make test TESTARGS=\"-run TestDdevFullSiteSetup\"</code> will run only <code>TestDdevFullSiteSetup</code> against TYPO3.</p> <p>To run a test (in the <code>cmd</code> package) against a individually-compiled DDEV binary, set the <code>DDEV_BINARY_FULLPATH</code> environment variable, for example <code>DDEV_BINARY_FULLPATH=$PWD/.gotmp/bin/linux_amd64/ddev make testcmd</code>.</p> <p>The easiest way to run tests is using GoLand (or VS Code) with their built-in test runners and debuggers. You can step through a specific test; you can stop at the point before the failure and experiment with the site that the test has set up.</p>","boost":0.5},{"location":"developers/building-contributing/#automated-testing","title":"Automated Testing","text":"<p>Anybody can view the CircleCI automated tests, and they usually show up any problems that are not OS-specific. Click through on the testing section of the PR to see them.</p> <p>The Buildkite automated tests require special access, which we typically grant to any PR contributor that asks for it.</p>","boost":0.5},{"location":"developers/building-contributing/#docker-image-development","title":"Docker Image Development","text":"<p>The Docker images that DDEV uses are included in the <code>containers/</code> directory:</p> <ul> <li><code>containers/ddev-php-base</code> the base build for <code>ddev-webserver</code>.</li> <li><code>containers/ddev-webserver</code> provides the web servers for per-project <code>web</code> containers.</li> <li><code>containers/ddev-dbserver</code> provides the <code>db</code> container for per-project databases.</li> <li><code>containers/ddev-nginx-proxy-router</code> is the (deprecated) the nginx-proxy router image.</li> <li><code>containers/ddev-ssh-agent</code> provides a single in-Docker-network SSH agent so projects can use your SSH keys.</li> <li><code>containers/ddev-traefik-router</code> is the current Traefik-based router image.</li> </ul> <p>When changes are made to an image, they have to be temporarily pushed to a tag\u2014ideally with the same as the branch name of the PR\u2014and the tag updated in <code>pkg/versionconstants/versionconstants.go</code>. Please ask if you need a container pushed to support a pull request.</p>","boost":0.5},{"location":"developers/building-contributing/#pull-request-pro-tips","title":"Pull Request Pro Tips","text":"<ul> <li>Fork the repository and clone it locally. Connect your local to the original \u2018upstream\u2019 repository by adding it as a remote, and pull upstream changes often so you stay up to date and reduce the likelihood of conflicts when you submit your pull request. See more detailed instructions here.</li> <li>Create a branch for your edits.</li> <li>Be clear about the problem and how someone can recreate it, or why your feature will help. Be equally clear about the steps you took to make your changes.</li> <li>It\u2019s best to test. Run your changes against any existing tests and create new tests when needed. Whether tests exist or not, make sure your changes don\u2019t break the existing project.</li> </ul>","boost":0.5},{"location":"developers/building-contributing/#open-pull-requests","title":"Open Pull Requests","text":"<p>Once you\u2019ve opened a pull request, a discussion will start around your proposed changes. Other contributors and users may chime in, but ultimately the decision is made by the maintainer(s). You may be asked to make some changes to your pull request. If so, add more commits to your branch and push them. They\u2019ll automatically go into the existing pull request.</p> <p>If your pull request is merged, great! If not, no sweat; it may not be what the project maintainer had in mind, or they were already working on it. This happens, so our recommendation is to take any feedback you\u2019ve received and go forth and pull request again. Or create your own open source project.</p>","boost":0.5},{"location":"developers/building-contributing/#pull-request-title-guidelines","title":"Pull Request Title Guidelines","text":"<p>We have very precise rules over how our PR titles (and thus master-branch commits) are to be formatted. This leads to more readable messages that are easy to follow when looking through the project history. But also, we use the master-branch Git commit messages to generate the changelog for the releases.</p> <p>The pull request title must follow this convention which is based on the Conventional Commits specification:</p> <p><code>&lt;type&gt;[optional !]: &lt;description&gt;[, fixes #&lt;issue&gt;]</code></p>","boost":0.5},{"location":"developers/building-contributing/#examples","title":"Examples","text":"<ul> <li><code>build: bump mutagen to 0.17.2</code></li> <li><code>ci: enforce commit message convention, fixes #5037</code></li> <li><code>docs: change code refs of Mac M1 to Apple Silicon</code></li> <li><code>feat: allow multiple upload dirs, fixes #4190, fixes #4796</code></li> <li><code>fix: create upload_dir if it doesn't exist in ddev composer create, fixes #5031</code></li> <li><code>refactor: add new Amplitude Property DDEV-Environment</code></li> <li><code>test: optimize caching of downloaded assets</code></li> </ul>","boost":0.5},{"location":"developers/building-contributing/#type","title":"Type","text":"<p>Must be one of the following:</p> <ul> <li>build: Changes that affect the build or external dependencies</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>docs: Documentation only changes</li> <li>feat: A new feature</li> <li>fix: A bugfix</li> <li>refactor: A code change that neither fixes a bug nor adds a feature</li> <li>test: Adding missing tests or correcting existing tests</li> </ul> <p>Regarding SemVer, all types above except <code>feat</code> increase the patch version, <code>feat</code> increases the minor version.</p>","boost":0.5},{"location":"developers/building-contributing/#scope","title":"Scope","text":"<p>No scope must be used.</p>","boost":0.5},{"location":"developers/building-contributing/#breaking-changes","title":"Breaking Changes","text":"<p>Breaking changes must have a <code>!</code> appended after type/scope.</p> <p>Regarding SemVer, breaking changes increase the major version.</p>","boost":0.5},{"location":"developers/building-contributing/#subject-description","title":"Subject / Description","text":"<p>The subject contains a succinct description of the change:</p> <ul> <li>use the imperative, present tense: \u201cchange\u201d not \u201cchanged\u201d nor \u201cchanges\u201d</li> <li>don\u2019t capitalize the first letter</li> <li>no dot (.) at the end</li> </ul> <p>If an issue exists for the change, <code>, fixes #&lt;issue number&gt;</code> must be appended to the subject.</p>","boost":0.5},{"location":"developers/building-contributing/#revert","title":"Revert","text":"<p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>","boost":0.5},{"location":"developers/building-contributing/#coding-style","title":"Coding Style","text":"<p>Unless explicitly stated, we follow all coding guidelines from the Go community. While some of these standards may seem arbitrary, they somehow seem to result in a solid, consistent codebase.</p> <p>It is possible that the codebase does not currently comply with these guidelines. We are not looking for a massive PR that fixes this since that goes against the spirit of the guidelines. All new contributions should make a best effort to clean up and make the codebase better than they left it. Obviously, apply your best judgment. Remember, the goal here is to make the codebase easier for humans to navigate and understand. Always keep that in mind when nudging others to comply.</p> <p>Use <code>make staticrequired</code> to ensure that your code can pass the required static analysis tests.</p> <p>The rules:</p> <ol> <li>All code should be formatted with <code>gofmt -s</code>.</li> <li>All code should pass the default levels of <code>golint</code>.</li> <li>All code should follow the guidelines covered in Effective Go and Go Code Review Comments.</li> <li>Comment the code. Tell us the why, the history and the context.</li> <li>Document all declarations and methods, even private ones. Declare expectations, caveats and anything else that may be important. If a type gets exported, having the comments already there will ensure it\u2019s ready.</li> <li>Variable name length should be proportional to its context and no longer. <code>noCommaALongVariableNameLikeThisIsNotMoreClearWhenASimpleCommentWouldDo</code>. In practice, short methods will have short variable names and globals will have longer names.</li> <li>No underscores in package names. If you need a compound name, step back, and re-examine why you need a compound name. If you still think you need a compound name, lose the underscore.</li> <li>All tests should run with <code>go test</code> and outside tooling should not be required. No, we don\u2019t need another unit testing framework. Assertion packages are acceptable if they provide real incremental value.</li> <li>Even though we call these \u201crules\u201d above, they are guidelines. Since you\u2019ve read all the rules, you now know that.</li> </ol> <p>If you are having trouble getting into the mood of idiomatic Go, we recommend reading through Effective Go. The Go Blog is also a great resource. Drinking the kool-aid is a lot easier than going thirsty.</p>","boost":0.5},{"location":"developers/buildkite-testmachine-setup/","title":"Buildkite Test Agent Setup","text":"<p>We are using Buildkite for Windows and macOS testing. The build machines and <code>buildkite-agent</code> must be set up before use.</p>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#windows-test-agent-setup","title":"Windows Test Agent Setup","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>In admin PowerShell, <code>wsl --install</code>.</li> <li>In admin PowerShell, <code>Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\"</code>.</li> <li>In admin PowerShell, download and run windows_buildkite_start.ps1 with <code>curl &lt;url&gt; -O windows_buildkite_start.ps1</code>.</li> <li>After restart, in administrative Git Bash window, <code>Rename-Computer &lt;testbot-win10(home|pro)-&lt;description&gt;-1</code> and then <code>export BUILDKITE_AGENT_TOKEN=&lt;token&gt;</code>.</li> <li>Now download and run <code>windows_buildkite-testmachine_setup.sh</code>.</li> <li>Download and run windows_postinstall.sh.</li> <li>Launch Docker. It may require you to take further actions.</li> <li>Log into Chrome with the user <code>ddevtestbot@gmail.com</code> and enable Chrome Remote Desktop.</li> <li>Enable gd, fileinfo, and curl extensions in <code>/c/tools/php*/php.ini</code>.</li> <li>If a laptop, set the \u201clid closing\u201d setting to do nothing.</li> <li>Set the \u201cSleep after time\u201d setting in settings to never.</li> <li>Install winaero tweaker and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot.  Then run netplwiz, provide the password for the main user, uncheck \u201crequire a password to log in\u201d.</li> <li> <p>The <code>buildkite/hooks/environment.bat</code> file must be updated to contain the Docker pull credentials:</p> <pre><code>@echo off\nset DOCKERHUB_PULL_USERNAME=druddockerpullaccount\nset DOCKERHUB_PULL_PASSWORD=xxx_readonly_token\n</code></pre> </li> <li> <p>Set the <code>buildkite-agent</code> service to run as the testbot user and use delayed start: Choose \u201cAutomatic, delayed start\u201d and on the \u201cLog On\u201d tab in the services widget it must be set up to log in as the testbot user, so it inherits environment variables and home directory (and can access NFS, has testbot Git config, etc).</p> </li> <li><code>git config --global --add safe.directory '*'</code>.</li> <li>Manually run <code>testbot_maintenance.sh</code>, <code>curl -sL -O https://raw.githubusercontent.com/ddev/ddev/master/.buildkite/testbot_maintenance.sh &amp;&amp; bash testbot_maintenance.sh</code>.</li> <li>Run <code>.buildkite/sanetestbot.sh</code> to check your work.</li> <li>Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)</li> <li>Verify that <code>go</code>, <code>ddev</code>, <code>git-bash</code> are in the path.</li> <li>In \u201cAdvanced Windows Update Settings\u201d enable \u201cReceive updates for other Microsoft products\u201d to make sure you get WSL2 kernel upgrades. Make sure to run Windows Update to get the latest kernel.</li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#additional-windows-setup-for-wsl2docker-desktop-testing","title":"Additional Windows Setup for WSL2+Docker Desktop Testing","text":"<ol> <li>Do not set up <code>buildkite-agent</code> on the Windows side, or disable it.</li> <li> <p>Edit Ubuntu\u2019s <code>/etc/wsl.conf</code> to contain:</p> <pre><code>[boot]\nsystemd=true\n</code></pre> </li> <li> <p>Update WSL2 to WSL2 Preview from Microsoft Store and <code>wsl --shutdown</code> and then restart.</p> </li> <li><code>wsl --update</code></li> <li>Open WSL2 and check out ddev/ddev.</li> <li>As normal user, run <code>.github/workflows/linux-setup.sh</code>.</li> <li> <p><code>export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH     echo \"export PATH=/home/linuxbrew/.linuxbrew/bin:$PATH\" &gt;&gt;~/.bashrc</code></p> </li> <li> <p>As root user, add sudo capability with <code>echo \"ALL ALL=NOPASSWD: ALL\" &gt;/etc/sudoers.d/all &amp;&amp; chmod 440 /etc/sudoers.d/all</code>.</p> </li> <li>Manually run <code>testbot_maintenance.sh</code>, <code>curl -sL -O https://raw.githubusercontent.com/ddev/ddev/master/.buildkite/testbot_maintenance.sh &amp;&amp; bash testbot_maintenance.sh</code>.</li> <li><code>git config --global --add safe.directory '*'</code></li> <li> <p>Install basics in WSL2:</p> <pre><code>curl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg &gt; /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list &gt;/dev/null\n# Update package information and install DDEV\nsudo apt update &amp;&amp; sudo apt install -y ddev\n\nsudo mkdir -p /usr/sharekeyrings &amp;&amp; curl -fsSL https://keys.openpgp.org/vks/v1/by-fingerprint/32A37959C2FA5C3C99EFBC32A79206696452D198 | sudo gpg --dearmor -o /usr/share/keyrings/buildkite-agent-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/buildkite-agent-archive-keyring.gpg] https://apt.buildkite.com/buildkite-agent stable main\" | sudo tee /etc/apt/sources.list.d/buildkite-agent.list\nsudo apt update &amp;&amp; sudo apt install -y build-essential buildkite-agent ca-certificates curl ddev gnupg lsb-release make mariadb-client\nsudo snap install ngrok\n</code></pre> </li> <li> <p>Configure <code>buildkite-agent</code> in WSL2. It needs the same changes as macOS, but tags <code>tags=\"os=wsl2,architecture=amd64,dockertype=dockerforwindows\"</code> and build-path should be in <code>~/tmp/buildkite-agent</code>.</p> </li> <li> <p>The buildkite/hooks/environment file must be updated to contain the Docker pull credentials:</p> <pre><code>    #!/bin/bash\n    export DOCKERHUB_PULL_USERNAME=druddockerpullaccount\n    export DOCKERHUB_PULL_PASSWORD=xxx_readonly_token\n    set -e\n</code></pre> </li> <li> <p>Verify that <code>buildkite-agent</code> is running.</p> </li> <li>In Task Scheduler, create a task that runs on User Logon and runs <code>C:\\Windows\\System32\\wsl.exe</code> with arguments <code>-d Ubuntu</code>.</li> <li>Add <code>buildkite-agent</code> to the <code>docker</code> and <code>testbot</code> groups in <code>/etc/group</code></li> <li><code>echo \"capath=/etc/ssl/certs/\" &gt;&gt;~/.curlrc</code> And then do the same as <code>buildkite-agent</code> user</li> <li><code>sudo chmod -R ug+w /home/linuxbrew</code></li> <li><code>nc.exe -l -p 9003</code> on Windows to trigger and allow Windows Defender.</li> <li>Run <code>ngrok config add-authtoken &lt;token&gt;</code> with token for free account.</li> <li>Copy ngrok config into <code>buildkite-agent</code> account, <code>sudo cp -r ~/.ngrok2 ~buildkite-agent/ &amp;&amp; sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2</code></li> <li>Add <code>/home/linuxbrew/.linuxbrew/bin</code> to <code>PATH</code> in <code>/etc/environment</code>.</li> <li>Copy ngrok config into <code>buildkite-agent</code> account, <code>sudo cp -r ~/.ngrok2 ~buildkite-agent/ &amp;&amp; sudo chown -R buildkite-agent:buildkite--agent ~buildkite-agent/ngrok2</code></li> <li>Add <code>buildkite-agent</code> to <code>sudo</code> group in <code>/etc/groups</code></li> <li>Give <code>buildkite-agent</code> a password with <code>sudo passwd buildkite-agent</code></li> <li>As <code>buildkite-agent</code> user <code>mkcert -install</code></li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#additional-windows-setup-for-wsl2docker-inside-testing","title":"Additional Windows Setup for WSL2+Docker-Inside Testing","text":"<ol> <li>Uninstall Docker Desktop.</li> <li>Remove all of the entries (especially <code>host.docker.internal</code>) that Docker Desktop has added in <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code>.</li> <li> <p>Install Docker and basics in WSL2:</p> <pre><code>sudo mkdir -p /etc/apt/keyrings\nsudo mkdir -p /etc/apt/keyrings &amp;&amp; sudo rm -f /etc/apt/keyrings/docker.gpg &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt update &amp;&amp; sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\nsudo usermod -aG docker $USER\n</code></pre> </li> <li> <p>Configure buildkite agent in /etc/buildkite-agent:</p> <ul> <li>tags=\u201dos=wsl2,architecture=amd64,dockertype=wsl2\u201d</li> <li>token=\u201dxxx\u201d</li> <li>Create <code>/etc/buildkite-agent/hooks/environment</code> and set to executable with contents:</li> </ul> <pre><code>    #!/bin/bash\n    export DOCKERHUB_PULL_USERNAME=druddockerpullaccount\n    export DOCKERHUB_PULL_PASSWORD=xxx_readonly_token\n    set -e\n</code></pre> </li> <li> <p>Run <code>.buildkite/sanetestbot.sh</code></p> </li> </ol>","boost":0.2},{"location":"developers/buildkite-testmachine-setup/#macos-test-agent-setup-intel-and-apple-silicon","title":"macOS Test Agent Setup (Intel and Apple Silicon)","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>Change the name of the machine to something in keeping with current style, perhaps <code>testbot-macos-arm64-8</code>. This is done in Settings \u2192 General \u2192 About \u2192 Name and in Sharing \u2192 Computer Name and in Sharing \u2192 Local Hostname.</li> <li>Download and install Chrome and log the browser into the account used for test runners. It will pick up the Chrome Remote Desktop setup as a result. Configure Chrome Remote Desktop to serve. When this is done, the machine will be available for remote access and most other tasks can be done using Chrome Remote Desktop.</li> <li>The machine should be on the correct network and have a static IP handed out by DHCP. IP addresses are listed in /etc/hosts on <code>pi.ddev.site</code>, so this one should be added.</li> <li>Power should be set up as in .</li> <li>Auto login should be set up as in , see automatically log in on boot.</li> <li>Remote login should be enabled as in .</li> <li>Automatic updates should be set to mostly security only as in .</li> <li>Set the time zone to US MT (nearest city: Denver, Colorado).</li> <li><code>sudo mkdir -p /usr/local/bin &amp;&amp; sudo chown -R testbot /usr/local/bin</code></li> <li>Install Homebrew <code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"</code></li> <li>After installing Homebrew follow the instructions it gives you at the end to add brew to your PATH.</li> <li>Install everything you\u2019ll need with <code>brew install buildkite/buildkite/buildkite-agent bats-core composer ddev/ddev/ddev git golang jq mariadb mkcert netcat p7zip  &amp;&amp; brew install --cask docker iterm2 ngrok</code>.</li> <li>Run <code>ngrok config add-authtoken &lt;token&gt;</code> with token for free account from 1Password.</li> <li>Run <code>mkcert -install</code>.</li> <li>If Docker Desktop will be deployed, run Docker manually and go through its configuration routine.</li> <li>If OrbStack will be deployed, install it from orbstack.dev.<ul> <li>Install with Docker only.</li> <li>Click \u201cSign in\u201d in the lower left to sign in with OrbStack credentials (normal test runner gmail address; it will receive an email with a login code).</li> <li>Configure it to automatically start and download updates, see .</li> </ul> </li> <li>If Rancher Desktop will be deployed, install it.<ul> <li>Turn off kubernetes.</li> </ul> </li> <li>Run iTerm. You may need to allow full disk access permissions.</li> <li>Run <code>mkdir ~/workspace &amp;&amp; cd ~/workspace &amp;&amp; git clone https://github.com/ddev/ddev</code>.</li> <li>Set up <code>nfsd</code> by running <code>bash ~/workspace/ddev/scripts/macos_ddev_nfs_setup.sh</code>.</li> <li><code>git config --global --add safe.directory '*'</code>.</li> <li>Edit <code>/usr/local/etc/buildkite-agent/buildkite-agent.cfg</code> or <code>/opt/homebrew/etc/buildkite-agent/buildkite-agent.cfg</code> to add<ul> <li>the agent <code>token</code> (from agents tab, \u201cReveal Agent Token\u201d).</li> <li>the agent <code>name</code> (the name of the machine).</li> <li><code>tags</code>, like <code>\"os=macos,architecture=arm64,osvariant=sonoma,dockertype=dockerformac,rancher-desktop=true,orbstack=true,docker-desktop=true\"</code></li> <li><code>build-path=\"~/tmp/buildkite-agent/builds\"</code></li> </ul> </li> <li> <p>The <code>buildkite-agent/hooks/environment</code> file must be created and set executable to contain the Docker pull credentials (found in <code>druddockerpullaccount</code> in 1Password):</p> <pre><code>#!/bin/bash\nexport DOCKERHUB_PULL_USERNAME=druddockerpullaccount\nexport DOCKERHUB_PULL_PASSWORD=xxx_readonly_token\nset -e\n</code></pre> </li> <li> <p>Run <code>brew services start buildkite-agent</code>.</p> </li> <li>Run <code>bash ~/workspace/ddev/.buildkite/testbot_maintenance.sh</code>.</li> <li>Run <code>bash ~/workspace/ddev/.buildkite/sanetestbot.sh</code> to check your work.</li> <li>The <code>testbot</code> user\u2019s ssh account is used for monitoring, so <code>ssh-keygen</code> and then add the public key <code>id_testbot</code> from 1Password to <code>~/.ssh/authorized_keys</code> and <code>chmod 600 ~/.ssh/authorized_keys</code>.</li> <li>Add the new machine to Icinga by copying an existing Icinga service to the new one. This is done in Icinga Director \u2192 Services \u2192 Single Services \u2192 Select a Service \u2192 Clone \u2192 Deploy. The new service has to have <code>by-ssh-address</code> set to the name of the test runner, and that address needs to be added to <code>pi.ddev.site</code>\u2019s <code>/etc/hosts</code> file.</li> <li> <p>If <code>zsh</code> is the shell configured, add <code>/etc/zshenv</code> so that <code>/usr/local/bin/docker</code> will be picked up:</p> <pre><code>PATH=$PATH:/usr/local/bin:/opt/homebrew/bin\n</code></pre> </li> </ol>","boost":0.2},{"location":"developers/github-selfhosted-setup/","title":"GitHub Self-Hosted Agent Setup","text":"<p>We are using GitHub Self-Hosted Agents for Windows and macOS testing. The build machines and agents must be set up before use.</p>","boost":0.2},{"location":"developers/github-selfhosted-setup/#windows-agent-setup","title":"Windows Agent Setup","text":"<ol> <li>Create the user \u201ctestbot\u201d on the machine. Use the password for <code>ddevtestbot@gmail.com</code>, available in 1Password.</li> <li>In admin PowerShell, <code>Set-ExecutionPolicy -Scope \"CurrentUser\" -ExecutionPolicy \"RemoteSigned\"</code>.</li> <li>In admin Powershell, download and run windows_buildkite_start.ps1 with <code>curl &lt;url&gt; -O windows_buildkite_start.ps1</code>.</li> <li>After restart, in administrative Git Bash window, <code>Rename-Computer &lt;testbot-win10(home|pro)-&lt;description&gt;-1</code>.</li> <li>Now download and run windows_github_agent_setup.sh.</li> <li>Launch Docker. It may require you to take further actions.</li> <li>Log into Chrome with the user <code>ddevtestbot</code> and enable Chrome Remote Desktop.</li> <li>Enable <code>gd</code>, <code>fileinfo</code>, and <code>curl</code> extensions in <code>/c/tools/php*/php.ini</code>.</li> <li>If a laptop, set the \u201clid closing\u201d setting in settings to do nothing.</li> <li>Set the \u201cSleep after time\u201d setting in settings to never.</li> <li>Install <code>winaero tweaker</code> and \u201cEnable user autologin checkbox\u201d. Set up the machine to automatically log in on boot.  Then run <code>netplwiz</code>, provide the password for the main user, uncheck the \u201crequire a password to log in\u201d.</li> <li>Add the path <code>C:\\Program Files\\git\\bin</code> to the very front of the system environment variables. Otherwise Windows will try to use its own <code>bash.exe</code> or PowerShell.</li> <li>Install the GitHub self-hosted runner software using the \u201cAdd New\u201d instructions on https://github.com/organizations/ddev/settings/actions. When it asks if you want it as a service: yes, you do.</li> <li>Run <code>.buildkite/sanetestbot.sh</code> to check your work.</li> <li>Reboot the machine and do a test run. (On Windows, the machine name only takes effect on reboot.)</li> </ol>","boost":0.2},{"location":"developers/maintainers/","title":"Maintainer Tasks, Privileges, Resources","text":""},{"location":"developers/maintainers/#thank-you","title":"THANK YOU","text":"<p>We so appreciate our amazing maintainers. There are so many things to keep track of, including support, testing, test runners, improvements, and a thousand other things. This section attempts to document some of the things that maintainers need to know and do.</p>"},{"location":"developers/maintainers/#maintainer-responsibilities","title":"Maintainer Responsibilities","text":"<p>Not all maintainers can do all these things at any given time, but these are the things that we hope get done in the DDEV project:</p> <ul> <li>Support: We try to give friendly, accurate, and timely responses to those who need help in:<ul> <li>Issue queue (and discussions, etc). Please follow all in at least the ddev/ddev project. On the Watch/Unwatch button at the top of the repository, consider selecting \u201cAll Activity\u201d. Also consider this on other projects in the <code>ddev</code> organization or other projects that are in your interest area.</li> <li>Discord: Please read everything that happens in the DDEV Discord and respond to questions that you can help with.</li> <li>Stack Overflow. You can subscribe to the ddev tag on Stack Overflow and answer or comment on questions there.</li> <li>Often in Drupal Slack #ddev channel. We have tried and tried to get people over to Discord, but it\u2019s still pretty active there.</li> <li>Other add-on repositories or related repos where we can help.</li> </ul> </li> <li>Test Runner and Test System Maintenance: The testing system is complex, and most tests are end-to-end tests, which can be fragile due to design, internet problems, changes upstream, etc. When something goes wrong, we want to figure out what it is and make it better. This can include debugging or rebooting Buildkite-runners, etc.</li> <li>Test Maintenance: Getting great tests that tell us what we need to know without taking forever and without being fragile is a never-ending battle. Improvements are always a goal. But it\u2019s fundamental that we be able to pass tests before we add new PRs in.</li> <li>Improve the DDEV codebase with fixes and features: We try to listen to the community and improve based on their needs.</li> <li>Security Best Practices: Please make sure to remain current on all security best practices. Your GitHub login and 1Password access absolutely must be managed with 2FA. Be aware of the fact that someone who compromises your privileges could attack our entire user base. If you have any questions about best practices, let\u2019s talk and make sure we all understand what\u2019s going on.</li> </ul>"},{"location":"developers/maintainers/#appropriate-use-of-privileges","title":"Appropriate Use of Privileges","text":"<ul> <li>We prefer the forked-PR workflow for all code changes. There are a few cases where a branch-PR on <code>ddev/ddev</code>, but in general, to do a fix or a feature, do it on a branch on your fork, and submit it as a forked PR.</li> <li>Even though you may have privileges to do things like push directly to the default branch of a repository, it doesn\u2019t mean you should use them. The vast majority of the time you\u2019ll use the codebase the same as any other contributor. PRs make it clear both now and in the future why changes were made.</li> <li>Use clear PRs and write great issues even though you yourself may understand exactly what\u2019s going on. Remember that you may need a refresher course in what you did in a month or a year, so write a great PR description and fill in the form.</li> <li>Remember to talk about configuration changes you make with other maintainers. Don\u2019t waste their time by changing things they\u2019ll then have to discover and debug.</li> </ul>"},{"location":"developers/maintainers/#maintainer-documentation-resources","title":"Maintainer Documentation Resources","text":"<ul> <li>DDEV Developer Documentation</li> <li>Maintainer Private Repository. This has information that may be sensitive, with screencasts and tips.</li> <li>DDEV Contributor Training, a series of training sessions that were recorded.</li> <li>DDEV blog</li> <li>1Password passwords and tokens: Maintainers should be added to the DDEV team in 1Password. This gives access to the DDEV team vault, which has tokens and passwords that are needed for various things. Please try to maintain things like tokens in there.</li> </ul>"},{"location":"developers/maintainers/#privileges-required-for-maintainers","title":"Privileges Required for Maintainers","text":"<p>Most privileges should be granted per-developer as separate accounts. In general, we don\u2019t want to share a common login. So for example, instead of sharing a login to developer.apple.com or buildkite.com each maintainer should have their own login.</p> <p>There are cases like access to hosting provider integrations that have essentially no value upstream where a shared login is acceptable. And of course, tokens listed in 1Password are a type of shared login. Our hosting integrations like Acquia, Platform.sh, etc. should never have any valuable things to attack anyway, so these should be very low risk. However, the bad guys are always trying new things\u2026</p> <ul> <li>GitHub: Maintainers should usually be added to the DDEV organization, usually was \u201cowner\u201d, but lesser privileges are possible, and some maintainers may want only access to the DDEV project, etc.</li> <li>Buildkite: Maintainers should be added to the DDEV Buildkite organization with \u201cmaintainer\u201d privileges. This gives access to the Buildkite pipelines and the ability to add new pipelines. Do not require \u201cSSO\u201d or people won\u2019t be able to get in.</li> <li>Chrome Remote Desktop: This is the test runner login (\u201cDDEV buildkite test-runners - remotedesktop.google.com\u201d) from 1Password, but it will need to be authorized via 2FA or a backup code from 1Password.</li> <li>CircleCI: Maintainers automatically have some access via their GitHub team membership, but should probably get more.</li> <li>developer.apple.com: Add to the DDEV team there so certificates can be managed.</li> <li>hub.docker.com: Add user to owners team in DDEV org.</li> <li>Chocolatey: Add user to Manage maintainers.</li> <li>Icinga monitoring system: This is documented in maintainer-info.</li> <li>Discord: Make admin in Discord.</li> <li>Twitter (X): Posting is enabled by login in 1Password.</li> <li>Mastodon: Posting is enabled by login in 1Password.</li> <li>Zoho Mail is how <code>ddev.com</code> mail is routed; currently only Randy has an account, but we should consider adding others and making sure that more than one person can maintain it.</li> <li>Zoho CRM is how we track contacts and send monthly emails or announcements. People involved in marketing will want to have access to this, but it will cost for additional users.</li> <li>1Password. Maintainers should be added to the DDEV team in 1Password. This gives access to the DDEV team vault, which has tokens and passwords that are needed for various things. Please try to maintain things like tokens in there.</li> <li>Acquia Cloud test account</li> <li>Platform.sh test account</li> <li>Pantheon test account</li> <li>Lagoon test account</li> <li>Newmonitor.thefays.us (Test runner monitoring).</li> <li>SSH (and sudo) access to <code>newmonitor.thefays.us</code></li> <li>developer.apple.com - Maintainers should be added to the DDEV team in the Apple Developer program, so that they can create new certificates.</li> <li>SSH access to newmonitor.thefays.us.</li> <li>Account on pi.ddev.site.</li> <li>Notifications from newmonitor.thefays.us.</li> <li>Web access to newmonitor.thefays.us.</li> <li>SSH access to behind-firewall monitoring proxy.</li> <li>Amplitude: Invite new user at team management.</li> <li>Stack Overflow: Follow the ddev tag on Stack Overflow and answer or comment on questions there when possible.</li> </ul>"},{"location":"developers/maintainers/#newmonitorthefaysus-use-and-maintenance","title":"Newmonitor.thefays.us use and maintenance","text":"<p>Newmonitor.thefays.us is an Icinga instance that monitors our Buildkite test runners and a few other things like ddev.com, etc. It also monitors some of Randy\u2019s small sites, but those can be ignored.</p> <p>Maintainers have a login to the dashboard and should receive emails when problems are discovered.</p> <p>You can quickly check the dashboard to see the current status if you get an email notification. Sometimes the tests are flaky, and of course during power outages or internet outages there may be un-resolvable items.</p>"},{"location":"developers/maintainers/#test-runner-maintenance","title":"Test Runner Maintenance","text":"<ul> <li>When you change things on a test runner, or you solve a problem, or reboot it, add a comment to ddev/maintainer-info/issues/1 so others will know what\u2019s going on.</li> </ul>"},{"location":"developers/project-types/","title":"Adding New Project Types","text":"<p>Adding and maintaining project types (like <code>typo3</code>, <code>magento2</code>, etc.) is not too hard. Please update and add to this doc when you find things that have been missed.</p> <p>To add a new project type:</p> <ul> <li>Add the new type to the list in <code>nodeps.go</code></li> <li>Add to <code>appTypeMatrix</code> in <code>apptypes.go</code></li> <li>Create a new go file for your project type, like <code>django.go</code>.</li> <li>Implement the functions that you think are needed for your project type and add references to them in your <code>appTypeMatrix</code> stanza. There are lots of examples that you can start with in places like <code>drupal.go</code> and <code>typo3.go</code>, <code>shopware6.go</code>, etc. The comments in the code in <code>apptypes.go</code> for the <code>appTypeFuncs</code> for each type of action tell what these are for, but here\u2019s a quick summary.<ul> <li><code>settingsCreator</code> is the function that will create a main settings file if none exists.</li> <li><code>uploadDir</code> returns the filepath of the user-uploaded files directory for the project type, like <code>sites/default/files</code> for Drupal or <code>pub/media</code> for magento2.</li> <li><code>hookDefaultComments</code> adds comments to config.yaml about hooks with an example for that project type. It\u2019s probably not useful at all.</li> <li><code>apptypeSettingsPaths</code> returns the paths for the main settings file and the extra settings file that DDEV may create (like settings.ddev.php for Drupal).</li> <li><code>appTypeDetect</code> is a function that determines whether the project is of the type you\u2019re implementing.</li> <li><code>postImportDBAction</code> can do something after db import. I don\u2019t see it implemented anywhere.</li> <li><code>configOverrideAction</code> can change default config for your project type. For example, magento2 now requires <code>php8.1</code>, so a <code>configOverrideAction</code> can change the php version.</li> <li><code>postConfigAction</code> gives a chance to do something at the end of config, but it doesn\u2019t seem to be used anywhere.</li> <li><code>postStartAction</code> adds actions at the end of <code>ddev start</code>. You\u2019ll see several implementations of this, for things like creating needed default directories, or setting permissions on files, etc.</li> <li><code>importFilesAction</code> defines how <code>ddev import-files</code> works for this project type.</li> <li><code>defaultWorkingDirMap</code> allows the project type to override the project\u2019s <code>working_dir</code> (where <code>ddev ssh</code> and <code>ddev exec</code> start by default). This is mostly not done anymore, as the <code>working_dir</code> is typically the project root.</li> <li><code>composerCreateAllowedPaths</code> specifies the paths that can exist in a directory when <code>ddev composer create</code> is being used.</li> </ul> </li> <li>You\u2019ll likely need templates for settings files, use the Drupal or TYPO3 templates as examples, for example <code>pkg/ddevapp/drupal</code> and <code>pkg/ddevapp/typo3</code>. Those templates have to be loaded at runtime as well.</li> <li>Once your project type starts working and behaving as you\u2019d like, you\u2019ll need to add test artifacts for it and try testing it (locally first).<ul> <li>Add your project to <code>TestSites</code> in <code>ddevapp_test.go</code>.</li> <li>Create a DDEV project named <code>testpkg&lt;projectype&gt;</code> somewhere and get it going and working with a database and files you can export.</li> <li>Export the database, files, and (optionally) code to tarballs or <code>.sql.gz</code>. Put them somewhere on the internet\u2014they\u2019ll end up in <code>ddev/ddev_test_tarballs</code>. I can give you permissions on that if you like. The <code>magento2</code> project has descriptions explaining how each tarball gets created. Do that for yours as well.</li> <li>Run the test and get it working. I usually use the trick of setting <code>GOTEST_SHORT=&lt;element_in_TestSites&gt;</code>, like <code>GOTEST_SHORT=7</code>. Then set that environment variable in the GoLand profile or your environment. <code>export GOTEST_SHORT=7 &amp;&amp; make testpkg TEST_ARGS=\"-run TestDdevFullsiteSetup\"</code></li> </ul> </li> </ul>","boost":0.5},{"location":"developers/release-management/","title":"Release Management &amp; Docker Images","text":"","boost":0.5},{"location":"developers/release-management/#release-process-and-tools","title":"Release process and tools","text":"<ul> <li>Goreleaser Pro is used to do the actual releasing using .goreleaser.yml. Goreleaser Pro is a licensed product that requires a license key, which is in the GitHub Workflow configuration and is available in 1Password to DDEV maintainers who need it.</li> <li>The Master Build/Release GitHub Action does the actual running of the goreleaser actions and provides the needed secrets.</li> </ul>","boost":0.5},{"location":"developers/release-management/#github-actions-required-secrets","title":"GitHub Actions Required Secrets","text":"","boost":0.5},{"location":"developers/release-management/#how-to-add-new-people-to-these-accounts","title":"How to add new people to these accounts","text":"<ul> <li>AUR is Arch Linux User Repository. <code>ddev-bin</code> is at <code>https://aur.archlinux.org/packages/ddev-bin</code>. The current maintainer of this is @cweagans, who can add co-maintainers.</li> <li>The chocolatey package. Additional maintainers can be added at (login required) <code>https://community.chocolatey.org/packages/ddev/1.22.1/ManagePackageOwners</code>; they could then create tokens to push it.</li> <li>GitHub requires write access to this repository, either via permissions on the repository or on the org.</li> <li>Apple signing and notarization requires access to the Localdev Foundation group on <code>https://developer.apple.com</code>. It\u2019s easy enough to add additional people.</li> <li>Windows signing is an awkward process that requires a dongle. When the current signing certificate expires we definitely want the simpler approach.</li> <li>Discord</li> <li>Docker</li> </ul>","boost":0.5},{"location":"developers/release-management/#actual-secrets-required","title":"Actual secrets required","text":"<p>The following \u201cRepository secret\u201d environment variables must be added to https://github.com/ddev/ddev/settings/secrets/actions:</p> <ul> <li><code>AMPLITUDE_API_KEY</code>: Key that enables Amplitude reporting. Environment variable for Make is <code>AmplitudeAPIKey</code>.</li> <li><code>AMPLITUDE_API_KEY_DEV</code>: Key that enables Amplitude reporting for development versions e.g. a PR build. Environment variable for Make is <code>AmplitudeAPIKey</code>.</li> <li><code>AUR_SSH_PRIVATE_KEY</code>: Private ssh key for the <code>ddev-releaser</code> user. This must be processed into a single line, for example, <code>perl -p -e 's/\\n/&lt;SPLIT&gt;/' ~/.ssh/id_rsa_ddev_releaser| pbcopy</code>.</li> <li><code>CHOCOLATEY_API_KEY</code>: API key for Chocolatey.</li> <li><code>DDEV_GITHUB_TOKEN</code>: GitHub token that gives access to create releases and push to the Homebrew repositories.</li> <li><code>DDEV_MACOS_APP_PASSWORD</code>: Password used for notarization, see signing_tools.</li> <li><code>DDEV_MACOS_SIGNING_PASSWORD</code>: Password for the macOS signing key, see signing_tools.</li> <li><code>DDEV_WINDOWS_SIGNING_PASSWORD</code>: Windows signing password.</li> <li><code>SEGMENTKEY</code>: Key that enables Segment reporting. Environment variable for Make is <code>SegmentKey</code>.</li> <li><code>FURY_ACCOUNT</code>: Gemfury account that receives package pushes.</li> <li><code>FURY_TOKEN</code>: Push token assigned to the above Gemfury account.</li> <li><code>AUR_STABLE_GIT_URL</code>: The Git URL for AUR stable (normally <code>ddev-bin</code>), for example <code>ssh://aur@aur.archlinux.org/ddev-bin.git</code>.</li> <li><code>AUR_EDGE_GIT_URL</code>: The Git URL for AUR edge (normally <code>ddev-edge-bin</code>), for example <code>ssh://aur@aur.archlinux.org/ddev-edge-bin.git</code>.</li> </ul>","boost":0.5},{"location":"developers/release-management/#creating-a-release","title":"Creating a Release","text":"<p>This is completely automated now, so nothing needs to be done unless something goes wrong.</p>","boost":0.5},{"location":"developers/release-management/#prerelease-tasks","title":"Prerelease Tasks","text":"<ul> <li>Create and execute a test plan.</li> <li>Make sure <code>version-history.md</code> is up to date.</li> <li>Push the new version of <code>ddev/ddev-php-base</code>.</li> <li>Update <code>ddev/ddev-webserver</code> to use the new version of <code>ddev/ddev-php-base</code> and push it with the proper tag.</li> <li>Make sure the Docker images are all tagged and pushed.</li> <li>Make sure <code>pkg/versionconstants/versionconstants.go</code> is all set to point to the new images and tests have been run.</li> <li> <p>If the <code>devcontainer-feature.json</code> (for GitHub Codespaces) needs to be updated, use the <code>devcontainer</code> CLI and a GITHUB_TOKEN that has power to manage packages, like <code>https://github.com/settings/tokens/1121534855</code> (<code>Package management token - see https://ddev.readthedocs.io/en/latest/developers/release-management/#prerelease-tasks</code>)</p> <ul> <li>Change the version in <code>.github/devcontainers/src/install-ddev/devcontainer-feature.json</code>.</li> </ul> <pre><code>cd .github/devcontainers/src\nexport GITHUB_TOKEN=&lt;personal-access-token-with-power-to-manage-packages&gt;\ndevcontainer features publish -n ddev/ddev .\n</code></pre> </li> </ul>","boost":0.5},{"location":"developers/release-management/#actual-release-creation","title":"Actual Release Creation","text":"<ol> <li>Create a release for the new version using the GitHub UI. It should be \u201cprerelease\u201d if it\u2019s an edge release.</li> <li>Make sure you\u2019re about to create the right release tag.</li> <li>Use the \u201cAuto-generate release notes\u201d option to get the commit list, then edit to add all the other necessary info.</li> </ol>","boost":0.5},{"location":"developers/release-management/#post-release-tasks","title":"Post-Release Tasks","text":"<ol> <li>After the release has been created, the new gitpod image must be pushed.<ol> <li><code>cd .gitpod/images &amp;&amp; DOCKER_TAG=\"&lt;YYMMDD&gt;\" ./push.sh</code></li> <li>PR to update <code>.gitpod.yml</code> with the new image.</li> <li>PR to update ddev-gitpod-launcher with the new image.</li> </ol> </li> </ol>","boost":0.5},{"location":"developers/release-management/#pushing-docker-images-with-the-github-actions-workflow","title":"Pushing Docker Images with the GitHub Actions Workflow","text":"<p>The easiest way to push Docker images is to use the GitHub Actions workflow, especially if the code for the image is already in the ddev/ddev repository.</p>","boost":0.5},{"location":"developers/release-management/#actual-release-creation_1","title":"Actual release creation","text":"<ol> <li>Create a release for the new version using the GitHub UI. It should be \u201cprerelease\u201d if it\u2019s an edge release.</li> <li>Use the \u201cAuto-generate release notes\u201d option to get the commit list, then edit to add all the other necessary info.</li> <li>Verify that Homebrew (Linux and macOS) and Chocolatey and AUR are working correctly with the right versions.</li> </ol> <p>You can push all images besides <code>ddev-dbserver</code> at https://github.com/ddev/ddev/actions/workflows/push-tagged-image.yml</p> <p>You can push <code>ddev-dbserver</code> images at https://github.com/ddev/ddev/actions/workflows/push-tagged-dbimage.yml</p> <p>If you need to push from a forked PR, you\u2019ll have to do this from your fork (for example, <code>https://github.com/rfay/ddev/actions/workflows/push-tagged-image.yml</code>), and you\u2019ll have to specify the branch on the fork. This requires setting the <code>DOCKERHUB_TOKEN</code> and <code>DOCKERHUB_USERNAME</code> secrets on the forked PR, for example <code>https://github.com/rfay/ddev/settings/secrets/actions</code>. You can do the same with <code>ddev-dbserver</code> at <code>https://github.com/rfay/ddev/actions/workflows/push-tagged-dbimage.yml</code> for example.</p> <ul> <li>Visit <code>https://github.com/ddev/ddev/actions/workflows/push-tagged-image.yml</code>.</li> <li>Click the \u201cPush tagged image\u201d workflow on the left side of the page.</li> <li>Click the \u201cRun workflow\u201d button in the blue section above the workflow runs.</li> <li>Choose the branch to build from (usually <code>master</code>).</li> <li>Enter the image (<code>ddev-webserver</code>, <code>ddev-php-base</code>, etc.).</li> <li>Enter the tag that will be used in <code>pkg/version/version.go</code>.</li> </ul>","boost":0.5},{"location":"developers/release-management/#pushing-docker-images-manually","title":"Pushing Docker Images Manually","text":"<p>While it\u2019s more error-prone, images can be pushed from the command line:</p> <ol> <li><code>docker login</code> with a user that has push privileges.</li> <li><code>docker buildx create --name ddev-builder-multi --use</code> or if it already exists, <code>docker buildx use ddev-builder-multi</code>.</li> <li><code>cd containers/&lt;image&gt;</code>.</li> <li>Before pushing <code>ddev-webserver</code>, make sure you\u2019ve pushed a version of <code>ddev-php-base</code> and updated <code>ddev-webserver</code>\u2019s Dockerfile to use that as a base.</li> <li><code>make push VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code> for most of the images. For <code>ddev-dbserver</code> it\u2019s <code>make PUSH=true VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code>. There\u2019s a push-all.sh script to update all of them, but it takes forever.</li> <li><code>ddev-dbserver</code> images can be pushed with <code>make PUSH=true VERSION=&lt;release_version&gt; DOCKER_ARGS=--no-cache</code> from the <code>containers/ddev-dbserver</code> directory.</li> </ol>","boost":0.5},{"location":"developers/release-management/#maintaining-ddev-dbserver-mysql-57-80-arm64-images","title":"Maintaining <code>ddev-dbserver</code> MySQL 5.7 &amp; 8.0 ARM64 Images","text":"<p>Sadly, there are no ARM64 Docker images for MySQL 5.7 and 8.0, so we have our own process to maintain ddev/mysql-arm64-images and ddev/xtrabackup-build images for DDEV.</p> <ul> <li><code>ddev/mysql:5.7</code> uses Ubuntu 18.04 as the base image, and Ubuntu 18.04 ARM64 has <code>mysql-server</code> 5.7 in it, so we can install.</li> <li><code>ddev/mysql:8.0</code> uses Ubuntu 20.04 as the base image, and Ubuntu 20.04 ARM64 has <code>mysql-server</code> 8.0 in it, so we can install it from packages.</li> <li>Unfortunately, the <code>ddev snapshot</code> command depends on <code>xtrabackup</code> 8.0 being installed for <code>mysql:8.0</code>. There are no ARM64 packages or binaries provided by Percona for <code>xtrabackup</code>, so we build it from source with ddev/xtrabackup-build. There\u2019s a catch, however: <code>xtrabackup</code>\u2019s development cycle lags behind <code>mysql:8.0</code>\u2019s development cycle, so you can\u2019t build a usable <code>ddev/mysql:8.0</code> image until there\u2019s an <code>xtrabackup</code> version released. Further, when Ubuntu bumps <code>mysql-server-8.0</code> to a new version, there\u2019s no way to use the old one. So the only time that you can maintain <code>ddev/mysql:8.0</code> is when Ubuntu 20.04 has the same version that\u2019s released for <code>percona-xtrabackup</code>. (In the case at this writeup, I was finally able to build <code>percona-xtrabackup</code> 8.0.28, and the same day Ubuntu bumped its packages to 8.0.29, meaning that it was unusable.)</li> <li>To build percona-xtrabackup, follow the instructions on ddev/xtrabackup-build. Create a release with the release of Percona xtrabackup, for example <code>8.0.29-21</code>. When that succeeds, then there is an upstream xtrabackup to be used in the ddev/mysql:8.0 build.</li> <li>To build <code>ddev/mysql</code> (both 5.7 and 8.0) ARM64 images, follow the instructions on ddev/mysql-arm64-images. After the various files are updated, you can push a new release and the proper images will be pushed.</li> <li>After building a new set of <code>ddev/mysql</code> images, you\u2019ll need to push <code>ddev/ddev-dbserver</code> with new tags. Make sure to update the ddev/<code>ddev-dbserver</code> Makefile to set the explicit version of the upstream <code>mysql:8.0</code> (for example, 8.0.29, if you\u2019ve succeeded in getting 8.0.29 for <code>percona-xtrabackup</code> and <code>mysql:8.0</code>).</li> </ul>","boost":0.5},{"location":"developers/release-management/#actual-release-docker-image-updates","title":"Actual Release Docker Image Updates","text":"<p>We don\u2019t actually build every image for every point release. If there have been no changes to <code>ddev-traefik-router</code> or <code>ddev-ssh-agent</code>, for example, we only usually push those and update <code>pkg/version/version.go</code> on major releases.</p> <p>But here are the steps for building:</p> <ol> <li>The <code>ddev/ddev-php-base</code> image must be updated as necessary with a new tag before pushing <code>ddev-webserver</code>. You can do this using the process above.</li> <li>The <code>ddev/ddev-webserver</code> Dockerfile must <code>FROM ddev/ddev-php-base:&lt;tag&gt;</code> before building/pushing <code>ddev-webserver</code>. But then it can be pushed using either the GitHub Actions or the manual technique.</li> <li>If you\u2019re bumping <code>ddev-dbserver</code> 8.0 minor release, follow the upstream Maintaining ddev-dbserver MySQL 5.7 &amp; 8.0 ARM64 Images instructions.</li> <li>Update <code>pkg/version/version.go</code> with the correct versions for the new images, and run all the tests.</li> </ol>","boost":0.5},{"location":"developers/release-management/#manually-updating-homebrew-formulas","title":"Manually Updating Homebrew Formulas","text":"<p>Homebrew formulas normally update with the release process, so nothing needs to be done.</p> <p>If you have to temporarily update the Homebrew formulas, you can do that with a commit to https://github.com/ddev/homebrew-ddev and https://github.com/ddev/homebrew-ddev-edge. The bottles and checksums for macOS (High Sierra) and x86_64_linux are built and pushed to the release page automatically by the release build process (see bump_homebrew.sh). Test <code>brew upgrade ddev</code> both on macOS and Linux and make sure DDEV is the right version and behaves well.</p>","boost":0.5},{"location":"developers/release-management/#manually-updating-chocolatey","title":"Manually Updating Chocolatey","text":"<p>Normally the release process does okay with pushing to Chocolatey, but at times a failure can happen and it\u2019s not worth doing the whole release process again.</p> <p>Note that if an existing approved release is being updated you have to have a new version. So for example, if <code>v1.21.3</code> failed, you\u2019ll need to work with <code>v1.21.3.1</code>, so <code>make chocolatey VERSION=v1.21.3.1</code> below.</p> <ul> <li>Open up Gitpod, https://gitpod.io/#https://github.com/ddev/ddev and</li> </ul> <pre><code>cd /workspace/ddev\ngit checkout &lt;tag&gt;\nsudo apt-get update &amp;&amp; sudo apt-get install -y nsis\nsudo .ci-scripts/nsis_setup.sh /usr/share/nsis\n</code></pre> <ul> <li>Edit the checksum in <code>tools/chocolateyinstall.ps1</code> to match the released checksum of the <code>ddev-windows-installer</code> in <code>checksums.txt</code> of the release that is being repaired, for example, for <code>v1.21.3</code> this would be the checksum for <code>ddev_windows_installer.v1.21.3.exe</code> in v1.21.3 checksums.txt.</li> <li>Edit <code>url64</code> in <code>tools/chocolateyinstall.ps1</code> to be the intended actual DDEV download version - edit the version where it appears and edit the GitHub org. For example, if the actual version of DDEV to be downloaded is <code>v1.21.3</code> then put that there.</li> </ul> <pre><code>make chocolatey VERSION=&lt;tag&gt;\nexport CHOCOLATEY_API_KEY=key33333\ncd .gotmp/bin/windows_amd64/chocolatey\ndocker run --rm -v $PWD:/tmp/chocolatey -w /tmp/chocolatey linuturk/mono-choco push -s https://push.chocolatey.org/ --api-key \"${CHOCOLATEY_API_KEY}\"\n</code></pre>","boost":0.5},{"location":"developers/release-management/#manually-updating-aur-repository","title":"Manually Updating AUR Repository","text":"<p>The AUR repository normally updates with the release process, so nothing needs to be done.</p> <p>However, you can manually publish the release to the DDEV AUR repository. The README.md in the AUR Git repository (<code>ssh://aur@aur.archlinux.org/ddev-bin.git</code> or <code>https://aur.archlinux.org/ddev-bin.git</code>) has instructions on how to update, including how to do it with a Docker container, so it doesn\u2019t have to be done on an ArchLinux or Manjaro VM.</p>","boost":0.5},{"location":"developers/release-management/#manually-signing-the-windows-installer","title":"Manually Signing the Windows Installer","text":"<p>This is done by the release process, but the manual process is documented here.</p> <p>This is done automatically by the release build on a dedicated Windows test runner (GitHub Actions runner) named <code>testbot-asus-win10pro</code>. You would need to do this process manually on that build machine or install the fob on another machine.</p> <p>After rebooting this machine, sometimes an automated reboot, the password for the security fob has to be re-entered or Windows signing will fail. We do this by opening up <code>tb-win11-06</code> using Chrome Remote Desktop (or manually physically opening it), opening Git Bash, and <code>cd ~/tmp &amp;&amp; signtool sign gsudo.exe</code>. There happens to be a <code>gsudo.exe</code> there but it doesn\u2019t matter what you sign\u2014the idea is to pop up the GUI where you enter the password (which is in 1Password).</p>","boost":0.5},{"location":"developers/release-management/#basic-instructions","title":"Basic Instructions","text":"<ol> <li>Install the suggested Windows SDK. Only the signing component is required.</li> <li>Add the path of the kit binaries to the Windows system PATH, <code>C:/Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/</code>.</li> <li>The keyfob and Safenet Authentication Client must be installed. The best documentation for the Safenet software is at https://support.globalsign.com/ssl/ssl-certificates-installation/safenet-drivers. You must configure the advanced client settings to \u201cEnable single logon\u201d or it will require the password on each run.</li> <li>After <code>make windows_install</code> the <code>ddev-windows-installer.exe</code> will be in <code>.ddev/bin/windows_amd64/ddev_windows_installer.exe</code> and you can sign it with <code>signtool sign ddev-windows-installer.exe</code>.</li> <li>If you need to install the GitHub self-hosted Windows runner, do it with the instructions in project settings \u2192 Actions \u2192 Runners.</li> <li>Currently the <code>actions/cache</code> runner does not work out of the box on Windows, so you have to install tar and zstd as described in this issue.</li> </ol> <p>We shouldn\u2019t use this high-security keyfob approach to signing on the next go-around with the certs.</p> <p>It\u2019s way too difficult to manage, and the Safenet software is atrocious.</p>","boost":0.5},{"location":"developers/release-management/#apt-and-yumrpm-package-management","title":"APT and YUM/RPM Package Management","text":"<p>The Linux <code>apt</code> and <code>yum</code>/<code>rpm</code> packages are built and pushed by the <code>nfpms</code> and <code>furies</code> sections of the .goreleaser.yml file.</p> <ul> <li>The actual packages are served by gemfury.com.</li> <li>The name of the organization in GemFury is <code>drud</code>, managed at <code>https://manage.fury.io/dashboard/drud</code>.</li> <li>Randy Fay, Matt Stein, and Simon Gillis are authorized as owners on this dashboard.</li> <li>The <code>pkg.ddev.com</code> domain name is set up as a custom alias for our package repositories; see <code>https://manage.fury.io/manage/drud/domains</code>. (Users do not see <code>drud</code> anywhere. Although we could have moved to a new organization for this, the existing repositories contain all the historical versions so it made sense to be less disruptive.)</li> <li>The <code>pkg.ddev.com</code> <code>CNAME</code> is managed in CloudFlare because <code>ddev.com</code> is managed there.</li> <li>The fury.io tokens are in DDEV\u2019s shared 1Password account.</li> </ul>","boost":0.5},{"location":"developers/remote-config/","title":"Remote Config","text":"<p>DDEV supports downloading a <code>remote config</code> from the <code>ddev/remote-config</code> GitHub repository with messages that will be shown to the user as a \u201cTip of the Day\u201d. This feature may be enhanced later with more information and filtering.</p>","boost":0.5},{"location":"developers/remote-config/#messages","title":"Messages","text":"","boost":0.5},{"location":"developers/remote-config/#notifications","title":"Notifications","text":"<p>The defined messages are shown to the user every <code>interval</code> as long as not disabled (interval=0). Supported message types are <code>infos</code> and <code>warnings</code> where <code>infos</code> are printed in a yellow box and <code>warnings</code> in a red box.</p> <p>Messages will be shown as configured in the <code>remote-config</code> repository and the user cannot influence them.</p>","boost":0.5},{"location":"developers/remote-config/#ticker","title":"Ticker","text":"<p>Messages rotate, with one shown to the user every <code>interval</code> as long as it\u2019s not disabled (interval=0).</p> <p>The user can disable the ticker or change the interval in the global config.</p>","boost":0.5},{"location":"developers/remote-config/#conditions-and-versions","title":"Conditions and Versions","text":"<p>Every message can optionally include a condition and version constraint to limit the message to matching conditions and DDEV versions.</p> <p>Each element in the <code>conditions</code> array may contain a condition listed by <code>ddev debug message-conditions</code>. It may be prefixed by a <code>!</code> to negate the condition. All conditions must be met in order for a message to be displayed. Unknown conditions are always met.</p> <p>The field <code>versions</code> may contain a version constraint which must be met by the current version of DDEV. More information about the supported constraints can be found in the Masterminds SemVer repository.</p>","boost":0.5},{"location":"developers/remote-config/#testing","title":"Testing","text":"<p>While running tests a GitHub token maybe required to avoid rate limits and can be provided with the <code>DDEV_GITHUB_TOKEN</code> environment variable.</p>","boost":0.5},{"location":"developers/testing-docs/","title":"Working on the Docs","text":"<p>This page is about working with the DDEV documentation. See the Writing Style Guide for stylistic guidance.</p>","boost":0.5},{"location":"developers/testing-docs/#fix-docs-using-web-browser","title":"Fix Docs Using Web Browser","text":"<p>The documentation is built and checked automatically with various GitHub Actions workflows. While it may help to check your work locally for more involved PRs, you can more quickly make suggestions using GitHub in a browser:</p> <ol> <li>Click the pencil in the upper right. That will take you to the right page on GitHub.</li> <li>Click the pencil button on GitHub and follow the instructions to create your change.</li> <li>Save your changes and follow the prompts to create a PR.</li> <li>In the checks on your PR, click the \u201cdetails\u201d link by <code>docs/readthedocs.org:ddev</code> to browse the docs build created by your PR.</li> <li>Once the PR has run its checks, you\u2019ll see an item labeled <code>docs/readthedocs.org:ddev</code>. Click \u201cDetails\u201d to review a docs build that includes your changes:     </li> <li>Take a look at the \u201cCheck docs\u201d action to make sure there were no linting or spelling errors.</li> </ol>","boost":0.5},{"location":"developers/testing-docs/#fork-clone-the-ddev-repository","title":"Fork / Clone the DDEV Repository","text":"<p>To start making changes you\u2019ll need a local copy of the DDEV documentation, so fork the DDEV repository which includes the documentation.</p> <p>After forking the repository, you can clone it to your local machine.</p>","boost":0.5},{"location":"developers/testing-docs/#make-changes","title":"Make Changes","text":"<p>Now that you\u2019ve got a local copy, you can make your changes.</p> Action Path Documentation <code>./docs/content/users/*</code> <code>./docs/content/developers/*</code> MkDocs configuration <code>./mkdocs.yml</code> Front end <code>./docs/content/assets/extra.css</code> <code>./docs/content/assets/extra.js</code>","boost":0.5},{"location":"developers/testing-docs/#preview-changes","title":"Preview Changes","text":"<p>Preview your changes locally by running <code>make mkdocs-serve</code>.</p> <p>This will launch a web server on port 8000 and automatically refresh pages as they\u2019re edited.</p> <p>No need to install MkDocs locally!</p> <p>It\u2019s easiest to install MkDocs locally, but you don\u2019t have to. The <code>make mkdocs-serve</code> command will look for and use a local binary, otherwise using <code>make</code> to build and serve the documentation. If you don\u2019t have <code>make</code> installed on your system, you can directly run the command it would have instead:</p> <pre><code>docker run -it -p 8000:8000 -v \"${PWD}:/docs\" -e \"ADD_MODULES=mkdocs-material mkdocs-redirects mkdocs-minify-plugin mdx_truly_sane_lists mkdocs-git-revision-date-localized-plugin\" -e \"LIVE_RELOAD_SUPPORT=true\" -e \"FAST_MODE=true\" -e \"DOCS_DIRECTORY=./docs\" polinux/mkdocs;\n</code></pre>","boost":0.5},{"location":"developers/testing-docs/#check-markdown-for-errors","title":"Check Markdown for Errors","text":"<p>Run <code>make markdownlint</code> before you publish changes to quickly check your files for errors or inconsistencies.</p> <p><code>markdownlint-cli</code> required!</p> <p>The <code>make markdownlint</code> command requires you to have <code>markdownlint-cli</code> installed, which you can do by executing <code>npm install -g markdownlint-cli</code></p>","boost":0.5},{"location":"developers/testing-docs/#check-for-spelling-errors","title":"Check for Spelling Errors","text":"<p>Run <code>make pyspelling</code> to check for spelling errors. Output will be brief if all goes well:</p> <pre><code>\u279c  make pyspelling\npyspelling:\nSpelling check passed :)\n</code></pre> <p>If you\u2019ve added a correctly-spelled word that gets flagged, like \u201cSymfony\u201d for example, you\u2019ll need to add it to <code>.spellcheckwordlist.txt</code> in the root of DDEV\u2019s repository.</p> <p><code>pyspelling</code> and <code>aspell</code> required!</p> <p>It\u2019s probably best to install packages locally before attempting to run <code>make pyspelling</code>:</p> <pre><code>sudo -H pip3 install pyspelling pymdown-extensions\nsudo apt-get install aspell\n</code></pre>","boost":0.5},{"location":"developers/testing-docs/#publish-changes","title":"Publish Changes","text":"<p>If all looks good, it\u2019s time to commit your changes and make a pull request back into the official DDEV repository.</p> <p>When you make a pull request, several tasks and test actions will be run. One of those is a task named <code>docs/readthedocs.org:ddev</code>, which builds a version of the docs containing all the changes from your pull request. You can use that to confirm the final result is exactly what you\u2019d expect.</p>","boost":0.5},{"location":"developers/writing-style-guide/","title":"Writing Style Guide","text":"<p>This page formalizes the writing conventions we aspire to use in the documentation. It\u2019s a living statement of intent and a reference for all contributors.</p>","boost":0.5},{"location":"developers/writing-style-guide/#voice-and-tone","title":"Voice and Tone","text":"<p>In the spirit of the Code of Conduct, we want to be clear and encouraging for everyone that bothers to read DDEV\u2019s documentation, rewarding the time and attention they choose to give to it.</p>","boost":0.5},{"location":"developers/writing-style-guide/#beginner-friendly-expert-compatible","title":"Beginner-Friendly, Expert-Compatible","text":"<p>Write so a DDEV beginner can follow your guidance and a DDEV veteran could use the same content as a reference.</p> Write This \ud83d\udc4d Not This \u274c You can run <code>ddev restart</code> to apply changes you\u2019ve made to your global <code>~/.ddev/global_config.yaml</code> or per-project <code>.ddev/config.yaml</code>. Just <code>ddev restart</code> to apply YAML config changes.","boost":0.5},{"location":"developers/writing-style-guide/#be-efficient-and-direct","title":"Be Efficient and Direct","text":"<p>Brevity makes for good documentation!</p> <p>Few read the docs from start to finish like a book, and explanation can be a barrier to learning. Get to the point, avoiding parentheticals and mid-sentence notes that interrupt the main flow.</p> <p>Omit extraneous explanation or decorative language that doesn\u2019t help the reader. Instructions don\u2019t need to include \u201cplease\u201d. Provide some context for anchor links without overloading them to hinder flow.</p> Write This \ud83d\udc4d Not This \u274c Run <code>ddev start</code> and launch the site in a browser. Please run <code>ddev start</code>, then launch the site in a browser. Learn more on the Extending page. (You can also learn more about this and related topics in Providing Custom Environment Variables to a Container.)","boost":0.5},{"location":"developers/writing-style-guide/#avoid-just-and-easy","title":"Avoid \u201cJust\u201d and \u201cEasy\u201d","text":"<p>Try not to use language that may talk down to the reader. You may intend for \u201cit\u2019s easy\u201d to be reassuring, but it\u2019s a subjective judgment that can convince someone struggling that they\u2019re doing it wrong. Things could instead be \u201cstraightforward\u201d if they\u2019re without nuance, \u201csimple\u201d if they don\u2019t involve complex actions or concepts, or \u201cquick\u201d if they involve one or two steps that\u2019d be fast even on someone\u2019s worst day with the slowest-imaginable machine.</p> <p>Similarly, \u201cjust do X\u201d suggests that \u201cX\u201d should be easy or obvious. Most of the time \u201cjust\u201d can be omitted and everyone wins.</p> <p>If you\u2019d like to reassure the reader something is easy, illustrate it with a demonstration and let them draw their own conclusion!</p> Write This \ud83d\udc4d Not This \u274c Change your project\u2019s PHP version by either editing <code>.ddev/config.yaml</code> to set <code>php_version: \"8.2\"</code>, or by running <code>ddev config --php-version=8.2</code>, followed by running <code>ddev restart</code>. It\u2019s easy to change your project\u2019s PHP version! Just edit your project\u2019s <code>.ddev/config.yaml</code> to set <code>php_version: \"8.2\"</code>, or run <code>ddev config --php-version=8.2</code>, followed by running <code>ddev restart</code>.","boost":0.5},{"location":"developers/writing-style-guide/#writing-style","title":"Writing Style","text":"<p>DDEV\u2019s documentation should be consistent throughout, which benefits both the reader taking in information and the contributor looking for examples to follow.</p> <p>Read It Aloud</p> <p>If you get tripped up speaking your words out loud, someone else will get tripped up reading them, too.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-correct-capitalization-and-punctuation","title":"Use Correct Capitalization and Punctuation","text":"<p>Write with appropriate grammar and style for U.S. English, including capitalization and punctuation. Variations in spelling and writing style make the documentation harder to read, and we want to be respectful of the reader\u2019s time and attention.</p> Write This \ud83d\udc4d Not This \u274c Let\u2019s not capitalize random words for emphasis. Let\u2019s not Capitalize random Words for emphasis. That organization uses a lovely American color. That organisation uses a lovely American colour. We can use \u201ccurly quotes\u201d now that we\u2019re post-typewriter. We can use \u201ccurly quotes\u201d now that we\u2019re post-typewriter.","boost":0.5},{"location":"developers/writing-style-guide/#run-commands","title":"\u201cRun\u201d Commands","text":"<p>We \u201crun\u201d commands. We don\u2019t \u201cdo\u201d them, and the command itself is not a verb. Whenever possible, reinforce that a given thing in backticks is intended as a console command by using the word \u201crun\u201d before it.</p> Write This \ud83d\udc4d Not This \u274c Run <code>ddev config</code> to set up your project. Do <code>ddev config</code> to set up your project.You can <code>ddev config</code> to set up your project. If you get stuck, run <code>ddev restart</code>. If you get stuck, just <code>ddev restart</code>.","boost":0.5},{"location":"developers/writing-style-guide/#use-active-third-person","title":"Use Active Third Person","text":"<p>Avoid impersonal language featuring unknown individuals or shadowy organizations. \u201cIt is recommended,\u201d for example, could be a warmer \u201cwe recommend\u201d or \u201cLaravel users recommend\u201d.</p> <p>Write on behalf of the community and not yourself\u2014use \u201cwe\u201d and not \u201cI\u201d.</p> Write This \ud83d\udc4d Not This \u274c We recommend Colima for the best performance. It is recommended for performance that you use Colima. Some prefer Redis for runtime caches. I like using Redis for runtime caches.","boost":0.5},{"location":"developers/writing-style-guide/#write-once-and-link","title":"Write Once and Link","text":"<p>Try to keep from repeating yourself in the documentation. Instead, write carefully and link to that well-crafted specimen, whether it\u2019s across the page or off to another section. This has two benefits:</p> <ol> <li>Easier maintenance with less chance of redundant information becoming stale.</li> <li>Subtle reinforcement of documentation structure that helps the reader learn where to find answers, rather than answering the same thing in different places.</li> </ol>","boost":0.5},{"location":"developers/writing-style-guide/#mind-your-context","title":"Mind Your Context","text":"<p>It\u2019s easy to get lost in documentation; don\u2019t assume the reader is always following your words. Take care to bring the reader with you, especially if there are steps that involve different applications or distinct areas of concern.</p> Write This \ud83d\udc4d Not This \u274c 1. In Docker Desktop, go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB.2. From your terminal, run <code>ddev restart</code>.3. In your text editor, open <code>.ddev/config.yaml</code> and set <code>php_version: \"8.1\"</code>. 1. Go to Resources \u2192 Advanced and set \u201cMemory\u201d to 6GB.2. Run <code>ddev restart</code>.3. Set <code>php_version: \"8.1\"</code>. Once you\u2019ve installed a Docker provider, you\u2019re ready to install DDEV! Docker or an alternative is required before anything will work with DDEV. This is pretty easy on most environments; see the Docker Installation page to help sort out the details.","boost":0.5},{"location":"developers/writing-style-guide/#avoid-starting-with-asides","title":"Avoid Starting with Asides","text":"<p>The beginning of a page or section should introduce what the rest of the content is about. Try to avoid starting with asides or reminders that get in the way of this initial statement of purpose.</p> <p>Never tell the reader to \u201cremember\u201d\u00a0something they may not have been introduced to yet.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-tips","title":"Use Tips","text":"<p>Avoid using \u201cNote:\u201d to signal an aside. Most sentences work fine without it, and for discreet notes we have <code>!!!note</code>, <code>!!!tip</code>, and <code>!!!warning</code> conventions.</p> <p>Use one of these callouts for text that can stand on its own and be skipped, or for an urgent message that needs greater visual emphasis.</p> <p>Summarize the callout\u2019s contents with a succinct heading whenever you can, so anyone skimming can know whether to read the callout\u2019s supporting text.</p> <pre><code>!!!note \"This is a note.\"\n    Use it for extraneous asides.\n\n!!!tip \"This is a tip.\"\n    Use it for helpful asides.\n\n!!!warning \"This is a warning.\"\n    Use it for asides that should have urgent emphasis.\n\n!!!note\n    This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is added automatically.)\n</code></pre> <p>This is a note.</p> <p>Use it for extraneous asides.</p> <p>This is a tip.</p> <p>Use it for helpful asides.</p> <p>This is a warning.</p> <p>Use it for asides that should have urgent emphasis.</p> <p>Note</p> <p>This is a note without a heading, which should only be used with the author isn\u2019t clever enough to come up with a succinct one. (The \u201cNote\u201d is automatically added.)</p> <p>Note: we want to avoid callouts like this sentence, that should either be tips or flow naturally with their surrounding text. If any documentation shouldn\u2019t be noted by the reader, get rid of it.</p>","boost":0.5},{"location":"developers/writing-style-guide/#use-correct-proper-nouns","title":"Use Correct Proper Nouns","text":"","boost":0.5},{"location":"developers/writing-style-guide/#ddev-ddev","title":"DDEV != <code>ddev</code>","text":"<p>DDEV is a product and <code>ddev</code> is a binary or console command. DDEV should always be uppercase, and <code>ddev</code> should always be in backticks. DDEV-Local and DDEV-Live are former product incarnations that shouldn\u2019t be found in modern documentation.</p> Write This \ud83d\udc4d Not This \u274c DDEV is wonderful! Ddev is wonderful!ddev is wonderful!DDEV-Local is wonderful! Run <code>ddev</code>. Run ddev.Run DDEV.","boost":0.5},{"location":"developers/writing-style-guide/#products-organizations-and-protocols","title":"Products, Organizations, and Protocols","text":"<p>When in doubt, honor whatever name a product or organization uses in its official materials. Use backticks to differentiate between a product and command, like DDEV vs. <code>ddev</code>.</p> Write This \ud83d\udc4d Not This \u274c AMD64, ARM64, and Apple Silicon amd64, arm64, M1 Macs Apache apache Bash or <code>bash</code> bash Blackfire blackfire, Blackfire.io Chocolatey chocolatey Colima or <code>colima</code> colima Composer or <code>composer</code> composer Docker or <code>docker</code> docker Drush or <code>drush</code> drush Git git Git Bash git bash GitHub or <code>github</code> Github Gitpod or <code>gitpod</code> Gitpod.io, GitPod GoLand Goland Google google Homebrew homebrew HTTP, HTTPS, SSH, <code>http</code>, <code>https</code>, <code>ssh</code> http, https, ssh IPv4, IPv6 IPV4, IPV6, ipv4, ipv6 Linux linux nginx or <code>nginx</code> Nginx, NGINX Node.js or <code>node</code> Node, node NFS nfs Pantheon pantheon, Pantheon.io PHP or <code>php</code> php PhpStorm PHPStorm, PHPstorm, Phpstorm PHPUnit or <code>phpunit</code> phpunit, PHPunit PostgreSQL Postgres Terminus terminus Windows windows Xdebug XDebug, xDebug","boost":0.5},{"location":"developers/writing-style-guide/#quote-copied-text","title":"Quote Copied Text","text":"<p>If you\u2019re quoting a human being or a message lifted verbatim from some other source (outside a fenced code block), make sure it ends up in a <code>&lt;blockquote&gt;</code> element:</p> <pre><code>&gt; Error: your quote style should not always be in a fenced block.\n</code></pre> <p>Error: your quote style should not always be in a fenced block.</p>","boost":0.5},{"location":"developers/writing-style-guide/#other-recommendations","title":"Other Recommendations","text":"<p>One-off tips that don\u2019t fit nicely into any of the sections above:</p> <ul> <li>Pluralize \u201cCMS\u201d as \u201cCMSes\u201d, not \u201cCMSs\u201d.</li> <li>Use all-caps references for file types like JSON, YAML and CSS.</li> <li>Wrap file extensions in backticks like <code>.json</code>, <code>.yaml</code>, and <code>.css</code>.</li> <li>Wrap references to files, directories, images and commands in backticks.</li> <li>Use Title Case for headings wherever it makes sense.</li> <li>Link to related services and topics where convenient\u2014usually first use on a given page.</li> <li>Use <code>&lt;kbd&gt;</code> elements for representing literal keystrokes.</li> <li>Use sequential numbers for numbered lists in the source Markdown, regardless of how they\u2019re eventually rendered.</li> <li>Try to maintain parallel format for list items.</li> </ul> Write This \ud83d\udc4d Not This \u274c web server webserver add-on addon JSON, YAML, CSS json, Yaml, css <code>.json</code>, <code>.yaml</code>, <code>.css</code>, <code>~/.ddev</code> .json, .yaml, .css, ~/.ddev CTRL + C control-c, control + c, ctrl+c Menu Item \u2192 Another Menu Item \u2192 Setting Menu Item&gt;Another Menu Item&gt;SettingMenu Item -&gt; Another Menu Item -&gt; Setting several CMSes several CMSs, several CMS\u2019s How to Reticulate Splines How to reticulate splines 1. Run <code>command</code>.2. Edit file.3. Restart computer. 1. <code>command</code>2. Edit file.3. Additionally, restart your computer.","boost":0.5},{"location":"users/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"users/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"users/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not only for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"users/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"users/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"users/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at <code>conduct</code>(at)<code>localdev.foundation</code>. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"users/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"users/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"users/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"users/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"users/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"users/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"users/project/","title":"Starting a Project","text":"<p>Once DDEV\u2019s installed, setting up a new project should be quick:</p> <ol> <li>Clone or create the code for your project.</li> <li><code>cd</code> into the project directory and run <code>ddev config</code> to initialize a DDEV project.</li> <li>Run <code>ddev start</code> to spin up the project.</li> <li>Run <code>ddev launch</code> to open your project in a browser.</li> </ol> <p>DDEV automatically detects your project type and docroot. If it guessed wrong or there\u2019s something else you want to change, update project options by editing <code>.ddev/config.yaml</code> and running <code>ddev describe</code>, or using the <code>ddev config</code> command.</p> <p>What\u2019s a project type?</p> <p>A <code>php</code> project type is the most general, ready for whatever modern PHP or static HTML/JS project you might be working on. It\u2019s as full-featured as other CMS-specific options, without any assumptions about your configuration or presets. (You can use this with a CMS or framework fine!)</p> <p>If you need to configure your app to connect to the database, the hostname, username, password, and database name are each <code>db</code>.</p> <p>While you\u2019re getting your bearings, use <code>ddev describe</code> to get project details, and <code>ddev help</code> to investigate commands.</p> <p>Next, you may want to run <code>ddev composer install</code>, import a database, or load user-managed files.</p> <p>If you\u2019re new to DDEV, check out Using the <code>ddev</code> Command for an overview of what\u2019s available.</p>"},{"location":"users/quickstart/","title":"CMS Quickstarts","text":"<p>DDEV is ready to go with generic project types for PHP and Python frameworks, and more specific project types for working with popular platforms and CMSes. To learn more about how to manage projects in DDEV visit Managing Projects.</p> <p>Before proceeding, make sure your installation of DDEV is up to date. In a new and empty project folder, using your favorite shell, run the following commands:</p>"},{"location":"users/quickstart/#backdrop","title":"Backdrop","text":"<p>To get started with Backdrop, clone the project repository and navigate to the project directory.</p> <pre><code>git clone https://github.com/example/example-site\ncd example-site\nddev config\nddev start\nddev launch\n</code></pre>"},{"location":"users/quickstart/#craft-cms","title":"Craft CMS","text":"<p>Start a new Craft CMS project or retrofit an existing one.</p> <p>Compatibility with Craft CMS 3</p> <p>The <code>craftcms</code> project type is best with Craft CMS 4+, which is more opinionated about some settings. If you are using Craft CMS 3, you may want to use the <code>php</code> project type and manage settings yourself.</p> <p>Environment variables will be automatically added to your <code>.env</code> file to simplify the first boot of a project. For new installations, this means the default URL and database connection settings displayed during installation can be used without modification. If existing projects expect environment variables to be named in a particular way, you are welcome to rename them.</p> New projectsExisting projects <p>New Craft CMS projects can be created from the official starter project using DDEV\u2019s <code>composer create</code> command:</p> <pre><code># Create a project directory and move into it:\nmkdir my-craft-project\ncd my-craft-project\n\n# Set up the DDEV environment:\nddev config --project-type=craftcms --docroot=web\n\n# Boot the project and install the starter project:\nddev start\nddev composer create -y --no-scripts craftcms/craft\n\n# Run the Craft installer:\nddev craft install\nddev launch\n</code></pre> <p>Third-party starter projects can by used the same way\u2014substitute the package name when running <code>ddev composer create</code>.</p> <p>You can start using DDEV with an existing project, too\u2014but make sure you have a database backup handy!</p> <pre><code># Clone an existing repository (or navigate to a local project directory):\ngit clone https://github.com/example/example-site my-craft-project\ncd my-craft-project\n\n# Set up the DDEV environment:\nddev config --project-type=craftcms\n\n# Boot the project and install Composer packages:\nddev start\nddev composer install\n\n# Import a database backup and open the site in your browser:\nddev import-db --file=/path/to/db.sql.gz\nddev launch\n</code></pre> <p>Craft CMS projects use PHP 8.1 and MySQL 8.0, by default. You can override these settings during setup with <code>config</code> command flags or after setup via the configuration files.</p> <p>Upgrading or using a generic project type?</p> <p>If you previously set up DDEV in a Craft project using the generic <code>php</code> project type, update the <code>type:</code> setting in <code>.ddev/config.yaml</code> to <code>craftcms</code>, then run <code>ddev restart</code> apply the changes.</p>"},{"location":"users/quickstart/#running-craft-in-a-subdirectory","title":"Running Craft in a Subdirectory","text":"<p>In order for <code>ddev craft</code> to work when Craft is installed in a subdirectory, you will need to change the location of the <code>craft</code> executable by providing the <code>CRAFT_CMD_ROOT</code> environment variable to the web container. For example, if the installation lives in <code>my-craft-project/app</code>, you would run <code>ddev config --web-environment-add=CRAFT_CMD_ROOT=./app</code>. <code>CRAFT_CMD_ROOT</code> defaults to <code>./</code>, the project root directory. Run <code>ddev restart</code> to apply the change.</p> <p>Read more about customizing the environment and persisting configuration in Providing Custom Environment Variables to a Container.</p> <p>Installing Craft</p> <p>Read more about installing Craft in the official documentation.</p>"},{"location":"users/quickstart/#django-4-experimental","title":"Django 4 (Experimental)","text":"<pre><code>git clone https://github.com/example/my-django-site\ncd my-django-site\nddev config # Follow the prompts\n# If your settings file is not `settings.py` you must add a DJANGO_SETTINGS_MODULE\nddev config --web-environment-add=DJANGO_SETTINGS_MODULE=&lt;myapp.settings.local&gt;\nddev start\n# If your app requires setup, do it here:\n# ddev python manage.py migrate\nddev launch\n</code></pre> <ul> <li>DDEV will install everything in your <code>requirements.txt</code> or <code>pyproject.toml</code> into a <code>venv</code>. This takes a little while on first startup.</li> <li>DDEV appends a stanza to your settings file which includes the DDEV settings only if running in DDEV context.</li> <li>You can watch the <code>pip install</code> in real time on that first slow startup with <code>ddev logs -f</code> in another window.</li> <li>If your <code>requirements.txt</code> includes <code>psycopg2</code> it requires build tools, so either set <code>ddev config --web-extra-packages=build-essential</code> or change your requirement to <code>psycopg2-binary</code>.</li> </ul>"},{"location":"users/quickstart/#drupal","title":"Drupal","text":"Drupal 10Drupal 9Drupal 6/7Git Clone <pre><code>mkdir my-drupal10-site\ncd my-drupal10-site\nddev config --project-type=drupal10 --docroot=web\nddev start\nddev composer create drupal/recommended-project\nddev composer require drush/drush\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev drush uli\nddev launch\n</code></pre> <pre><code>mkdir my-drupal9-site\ncd my-drupal9-site\nddev config --project-type=drupal9 --docroot=web\nddev start\nddev composer create \"drupal/recommended-project:^9\"\nddev composer require drush/drush\nddev drush site:install --account-name=admin --account-pass=admin -y\nddev drush uli\nddev launch\n</code></pre> <pre><code>git clone https://github.com/example/my-drupal-site\ncd my-drupal-site\nddev config # Follow the prompts to select type and docroot\nddev start\nddev launch /install.php\n</code></pre> <p>Drupal 7 doesn\u2019t know how to redirect from the front page to <code>/install.php</code> if the database is not set up but the settings files are set up, so launching with <code>/install.php</code> gets you started with an installation. You can also run <code>drush site-install</code>, then <code>ddev exec drush site-install --yes</code>.</p> <p>See Importing a Database.</p> <pre><code>git clone https://github.com/example/my-drupal-site\ncd my-drupal-site\nddev config # Follow the prompts to set Drupal version and docroot\nddev composer install # If a composer build\nddev launch\n</code></pre>"},{"location":"users/quickstart/#expressionengine","title":"ExpressionEngine","text":"ExpressionEngine ZIP File DownloadExpressionEngine Git Checkout <p>Download the ExpressionEngine code from expressionengine.com, then follow these steps based on the official installation instructions:</p> <pre><code>mkdir my-ee &amp;&amp; cd my-ee\nunzip /path/to/ee-zipfile.zip\nddev config # Accept the defaults\nddev start\nddev launch /admin.php # Open installation wizard in browser\n</code></pre> <p>When the installation wizard prompts for database settings, enter <code>db</code> for the DB Server Address, DB Name, DB Username, and DB Password.</p> <p>Visit your site.</p> <p>Follow these steps based on the ExpressionEngine Git Repository README.md:</p> <pre><code>git clone https://github.com/ExpressionEngine/ExpressionEngine # for example\ncd ExpressionEngine\nddev config # Accept the defaults\nddev start\nddev composer install\ntouch system/user/config/config.php\necho \"EE_INSTALL_MODE=TRUE\" &gt;.env.php\nddev start\nddev launch /admin.php  # Open installation wizard in browser\n</code></pre> <p>When the installation wizard prompts for database settings, enter <code>db</code> for the DB Server Address, DB Name, DB Username, and DB Password.</p>"},{"location":"users/quickstart/#ibexa-dxp","title":"Ibexa DXP","text":"<p>Install Ibexa DXP OSS Edition.</p> <pre><code>mkdir my-ibexa-project &amp;&amp; cd my-ibexa-project\nddev config --project-type=php --php-version 8.1 --docroot=public\nddev config --web-environment-add DATABASE_URL=mysql://db:db@db:3306/db\nddev start\nddev composer create ibexa/oss-skeleton\nddev php bin/console ibexa:install\nddev php bin/console ibexa:graphql:generate-schema\nddev launch\n</code></pre> <p>Visit Ibexa documentation for more cases.</p>"},{"location":"users/quickstart/#laravel","title":"Laravel","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> <p>The Laravel project type can be used for Lumen like it can for Laravel. DDEV automatically updates or creates the <code>.env</code> file with the database information.</p> ComposerGit Clone <pre><code>mkdir my-laravel-app\ncd my-laravel-app\nddev config --project-type=laravel --docroot=public --php-version=8.1\nddev composer create --prefer-dist --no-install --no-scripts laravel/laravel -y\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch\n</code></pre> <pre><code>git clone &lt;your-laravel-repo&gt;\ncd &lt;your-laravel-project&gt;\nddev config --project-type=laravel --docroot=public --php-version=8.1\nddev start\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch\n</code></pre>"},{"location":"users/quickstart/#magento","title":"Magento","text":"Magento 2OpenMage/Magento 1 <p>Normal details of a Composer build for Magento 2 are on the Magento 2 site. You must have a public and private key to install from Magento\u2019s repository. When prompted for \u201cusername\u201d and \u201cpassword\u201d in <code>composer create</code>, it\u2019s asking for your public and private keys.</p> <pre><code>mkdir ddev-magento2 &amp;&amp; cd ddev-magento2\nddev config --project-type=magento2 --php-version=8.1 --docroot=pub --disable-settings-management\nddev get ddev/ddev-elasticsearch\nddev start\nddev composer create --repository=https://repo.magento.com/ magento/project-community-edition -y\nrm -f app/etc/env.php\n\n# Change the base-url below to your project's URL\nddev magento setup:install --base-url='https://ddev-magento2.ddev.site/' --cleanup-database --db-host=db --db-name=db --db-user=db --db-password=db --elasticsearch-host=elasticsearch --search-engine=elasticsearch7 --elasticsearch-port=9200 --admin-firstname=Magento --admin-lastname=User --admin-email=user@example.com --admin-user=admin --admin-password=Password123 --language=en_US\n\nddev magento deploy:mode:set developer\nddev magento module:disable Magento_TwoFactorAuth Magento_AdminAdobeImsTwoFactorAuth\nddev config --disable-settings-management=false\n</code></pre> <p>Change the admin name and related information is needed.</p> <p>You may want to add the Magento 2 Sample Data with <code>ddev magento sampledata:deploy &amp;&amp; ddev magento setup:upgrade</code>.</p> <p>Magento 2 is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows.</p> <ol> <li>Download OpenMage from release page.</li> <li>Make a directory for it, for example <code>mkdir ~/workspace/OpenMage</code> and change to the new directory <code>cd ~/workspace/OpenMage</code>.</li> <li>Run <code>ddev config</code> and accept the defaults.</li> <li>Install sample data. (See below.)</li> <li>Run <code>ddev start</code>.</li> <li>Follow the URL to the base site.</li> </ol> <p>You may want the Magento 1 Sample Data for experimentation:</p> <ul> <li>Download Magento 1.9.2.4 Sample Data.</li> <li>Extract the download:     <code>tar -zxf ~/Downloads/compressed-magento-sample-data-1.9.2.4.tgz --strip-components=1</code></li> <li>Import the example database <code>magento_sample_data_for_1.9.2.4.sql</code> with <code>ddev import-db --file=magento_sample_data_for_1.9.2.4.sql</code> to database before running OpenMage install.</li> </ul> <p>OpenMage is a huge codebase, and we recommend using Mutagen for performance on macOS and traditional Windows.</p>"},{"location":"users/quickstart/#moodle","title":"Moodle","text":"<pre><code>ddev config --composer-root=public --docroot=public --webserver-type=apache-fpm --database=mariadb:10.6\nddev start\nddev composer create moodle/moodle -y\nddev exec 'php public/admin/cli/install.php --non-interactive --agree-license --wwwroot=$DDEV_PRIMARY_URL --dbtype=mariadb --dbhost=db --dbname=db --dbuser=db --dbpass=db --fullname=\"DDEV Moodle Demo\" --shortname=Demo --adminpass=password'\nddev launch /login\n</code></pre> <p>In the web browser, log into your account using <code>admin</code> and <code>password</code>.</p> <p>Visit the Moodle Admin Quick Guide for more information.</p> <p>Tip</p> <p>Moodle relies on a periodic cron job\u2014don\u2019t forget to set that up! See ddev/ddev-cron.</p>"},{"location":"users/quickstart/#pythonflask-experimental","title":"Python/Flask (Experimental)","text":"<pre><code>git clone https://github.com/example/my-python-site\ncd my-python-site\nddev config # Follow the prompts\n# Tell gunicorn where your app is (WSGI_APP)\nddev config --web-environment-add=WSGI_APP=&lt;my-app:app&gt;\nddev start\n# If you need to do setup before the site can go live, do it:\n# ddev exec flask forge\nddev launch\n</code></pre> <ul> <li>DDEV will install all everything in your <code>requirements.txt</code> or <code>pyproject.toml</code> into a <code>venv</code>. This takes a little while on first startup.</li> <li>If your app requires settings, you can add them as environment variables, or otherwise configure your app to use the database, etc. (Database settings are host: <code>db</code>, database: <code>db</code>, user: <code>db</code>, password <code>db</code> no matter whether you\u2019re using PostgreSQL, MariaDB, or MySQL.)</li> <li>You can watch <code>pip install</code> output in real time on that first slow startup with <code>ddev logs -f</code> in another window.</li> <li>If your <code>requirements.txt</code> includes <code>psycopg2</code> it requires build tools, so either set <code>ddev config --web-extra-packages=build-essential</code> or change your requirement to <code>psycopg2-binary</code>.</li> </ul>"},{"location":"users/quickstart/#shopware","title":"Shopware","text":"<p>Though you can set up a Shopware 6 environment many ways, we recommend the following technique. DDEV creates a <code>.env.local</code> file for you by default; if you already have one DDEV adds necessary information to it. When <code>ddev composer create</code> asks if you want to include Docker configuration, answer <code>x</code>, as this approach does not use their Docker configuration.</p> <pre><code>mkdir my-shopware6 &amp;&amp; cd my-shopware6\nddev config --project-type=shopware6 --docroot=public\nddev composer create shopware/production:^v6.5\n# If it asks `Do you want to include Docker configuration from recipes?`\n# answer `x`, as we're using DDEV for this rather than its recipes.\nddev exec console system:install --basic-setup\nddev launch /admin\n# Default username and password are `admin` and `shopware`\n</code></pre> <p>Log into the admin site (<code>/admin</code>) using the web browser. The default credentials are username <code>admin</code> and password <code>shopware</code>. You can use the web UI to install sample data or accomplish many other tasks.</p> <p>For more advanced tasks like adding elasticsearch, building and watching storefront and administration, see susi.dev.</p>"},{"location":"users/quickstart/#silverstripe","title":"Silverstripe","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> ComposerGit Clone <pre><code>mkdir my-silverstripe-app\ncd my-silverstripe-app\nddev config --project-type=silverstripe --docroot=public\nddev composer create --prefer-dist --no-scripts silverstripe/installer -y\nddev start\nddev sake dev/build flush=all\n</code></pre> <pre><code>git clone &lt;your-silverstripe-repo&gt;\ncd &lt;your-silverstripe-project&gt;\nddev config --project-type=silverstripe --docroot=public\nddev start\nddev composer install\nddev sake dev/build flush=all\n</code></pre> <p>Your Silverstripe project is now ready. The CMS can be found at /admin, log into the default admin account using <code>admin</code> and <code>password</code>.</p> <p>Visit the Silverstripe documentation for more information.</p> <p><code>ddev sake</code> can be used as a shorthand for the Silverstripe Make command <code>ddev exec vendor/bin/sake</code></p> <p>To open the CMS directly from CLI, run <code>ddev launch /admin</code>.</p>"},{"location":"users/quickstart/#statamic","title":"Statamic","text":"<p>Use a new or existing Composer project, or clone a Git repository.</p> <p>The Laravel project type can be used for Statamic like it can for Laravel. DDEV automatically updates or creates the <code>.env</code> file with the database information.</p> ComposerGit Clone <pre><code>mkdir my-statamic-app\ncd my-statamic-app\nddev config --project-type=laravel --docroot=public\nddev composer create --prefer-dist --no-install --no-scripts statamic/statamic\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch\n</code></pre> <pre><code>git clone &lt;your-statamic-repo&gt;\ncd &lt;your-statamic-project&gt;\nddev config --project-type=laravel --docroot=public\nddev start\nddev composer install\nddev exec \"php artisan key:generate\"\nddev launch\n</code></pre>"},{"location":"users/quickstart/#typo3","title":"TYPO3","text":"ComposerGit Clone <pre><code>mkdir my-typo3-site\ncd my-typo3-site\nddev config --project-type=typo3 --docroot=public --php-version 8.1\nddev start\nddev composer create \"typo3/cms-base-distribution\"\nddev exec touch public/FIRST_INSTALL\nddev launch\n</code></pre> <pre><code>git clone https://github.com/example/example-site\ncd example-site\nddev config --project-type=typo3 --docroot=public --php-version 8.1\nddev composer install\nddev restart\nddev exec touch public/FIRST_INSTALL\nddev launch\n</code></pre>"},{"location":"users/quickstart/#wordpress","title":"WordPress","text":"<p>There are several easy ways to use DDEV with WordPress:</p> WP-CLIBedrockGit Clone <p>DDEV has built-in support for WP-CLI, the command-line interface for WordPress.</p> <pre><code>mkdir my-wp-site\ncd my-wp-site/\n\n# Create a new DDEV project inside the newly-created folder\n# (Primary URL automatically set to `https://&lt;folder&gt;.ddev.site`)\nddev config --project-type=wordpress\nddev start\n\n# Download WordPress\nddev wp core download\n\n# Launch in browser to finish installation\nddev launch\n\n# OR use the following installation command\n# (we need to use single quotes to get the primary site URL from `.ddev/config.yaml` as variable)\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='New-WordPress' --admin_user=admin --admin_email=admin@example.com --prompt=admin_password\n\n# Launch WordPress admin dashboard in your browser\nddev launch wp-admin/\n</code></pre> <p>Bedrock is a modern, Composer-based installation in WordPress:</p> <pre><code>mkdir my-wp-bedrock-site\ncd my-wp-bedrock-site\nddev config --project-type=wordpress --docroot=web\nddev start\nddev composer create roots/bedrock\n</code></pre> <p>Update the <code>.env</code> file in the project root for Bedrock\u2019s WordPress configuration convention:</p> <pre><code>DB_NAME=db\nDB_USER=db\nDB_PASSWORD=db\nDB_HOST=db\nWP_HOME=${DDEV_PRIMARY_URL}\nWP_SITEURL=${WP_HOME}/wp\nWP_ENV=development\n</code></pre> <p>You can then run <code>ddev start</code> and <code>ddev launch</code>.</p> <p>For more details, see Bedrock installation.</p> <p>To get started using DDEV with an existing WordPress project, clone the project\u2019s repository.</p> <pre><code>git clone https://github.com/example/my-site.git\ncd my-site\nddev config\n</code></pre> <p>You\u2019ll see a message like:</p> <p>An existing user-managed wp-config.php file has been detected! Project DDEV settings have been written to:</p> <p>/Users/rfay/workspace/bedrock/web/wp-config-ddev.php</p> <p>Comment out any database connection settings in your <code>wp-config.php</code> file and add the following snippet to your <code>wp-config.php</code>, near the bottom of the file and before the include of <code>wp-settings.php</code>:</p> <pre><code>// Include for DDEV-managed settings in wp-config-ddev.php.\n$ddev_settings = dirname(__FILE__) . '/wp-config-ddev.php';\nif (is_readable($ddev_settings) &amp;&amp; !defined('DB_USER')) {\nrequire_once($ddev_settings);\n}\n</code></pre> <p>If you don\u2019t care about those settings, or config is managed elsewhere (like in a <code>.env</code> file), you can eliminate this message by adding a comment to <code>wp-config.php</code>:</p> <pre><code>// wp-config-ddev.php not needed\n</code></pre> <p>Now run <code>ddev start</code> and continue importing a database if you need to.</p>"},{"location":"users/support/","title":"Support","text":"<p>We love to hear from you and want you to be successful with DDEV!</p> <ul> <li>See the included <code>ddev help</code> command, which includes lots of examples.</li> <li>FAQ</li> <li>Discord interactive community support.</li> <li>DDEV issue queue for bugs and feature requests.</li> <li>Mastodon</li> <li>Twitter (deprecated) with tag #ddev will get to us. It\u2019s not as good for interactive support, but we\u2019ll answer anywhere.</li> </ul>"},{"location":"users/support/#additional-resources","title":"Additional Resources","text":"<ul> <li>DDEV Stack Overflow for support and frequently asked questions. We respond quickly here and the results provide quite a library of user-curated solutions.</li> <li>ddev-contrib repository provides a number of vetted, user-contributed recipes for extending and using DDEV. Your contributions are welcome.</li> <li>awesome-ddev repository has loads of external resources, blog posts, recipes, screencasts, and the like. Your contributions are welcome.</li> </ul>"},{"location":"users/configuration/config/","title":"Config Options","text":"<p>DDEV configuration is stored in YAML files that come in two flavors:</p> <ol> <li> Project <code>.ddev/config.yaml</code> settings, with optional environmental override variants.</li> <li> Global <code>$HOME/.ddev/global_config.yaml</code> settings that can apply to all projects.</li> </ol> <p>Most of these settings take effect when you run <code>ddev start</code>.</p>","boost":0.5},{"location":"users/configuration/config/#managing-configuration","title":"Managing Configuration","text":"","boost":0.5},{"location":"users/configuration/config/#setting-options","title":"Setting Options","text":"<p>You can hand-edit the YAML files DDEV creates for you after running <code>ddev config</code>, and you can also define most settings with equivalent CLI arguments:</p> config.yaml<code>ddev config</code> <pre><code>php_version: \"8.1\"\n</code></pre> <pre><code>ddev config --php-version 8.1\n</code></pre> <p>Run <code>ddev help config</code> to see all the available config arguments.</p>","boost":0.5},{"location":"users/configuration/config/#environmental-overrides","title":"Environmental Overrides","text":"<p>You can override the per-project <code>config.yaml</code> with files named <code>config.*.yaml</code>, and files like this are often created by DDEV add-ons. For example, <code>config.elasticsearch.yaml</code> in Elasticsearch add-on adds additional configuration related to Elasticsearch.</p> <p>Many teams use <code>config.local.yaml</code> for configuration that is specific to one environment, and not checked into the team\u2019s default <code>config.yaml</code>. You might enable Mutagen or enable NFS for the project, for example, only on your machine. Or maybe use a different database type. The file <code>config.local.yaml</code> is gitignored by default.</p> <p>For examples, see the Extending and Customizing Environments page.</p>","boost":0.5},{"location":"users/configuration/config/#additional_fqdns","title":"<code>additional_fqdns</code>","text":"<p>An array of extra fully-qualified domain names to be used for a project.</p> Type Default Usage  project <code>[]</code> <p>Example: <code>additional_fqdns: [\"example.com\", \"sub1.example.com\"]</code> would provide HTTP and HTTPS URLs for <code>example.com</code> and <code>sub1.example.com</code>.</p> <p>Warning</p> <p>Take care with <code>additional_fqdns</code>; it adds items to your <code>/etc/hosts</code> file which can cause confusion.</p>","boost":0.5},{"location":"users/configuration/config/#additional_hostnames","title":"<code>additional_hostnames</code>","text":"<p>An array of extra hostnames to be used for a project.</p> Type Default Usage  project <code>[]</code> <p>Example: <code>additional_hostnames: [\"somename\", \"someothername\", \"*.thirdname\"]</code> would provide HTTP and HTTPS URLs for <code>somename.ddev.site</code>, <code>someothername.ddev.site</code>, and <code>one.thirdname.ddev.site</code> + <code>two.thirdname.ddev.site</code>.</p> <p>The wildcard (<code>*</code>) setting only works if you\u2019re using DNS to resolve hostnames (default) and connected to the internet.</p>","boost":0.5},{"location":"users/configuration/config/#bind_all_interfaces","title":"<code>bind_all_interfaces</code>","text":"<p>When the network interfaces of a project should be exposed to the local network, you can specify <code>bind_all_interfaces: true</code> to do that. This is an unusual application, sometimes used to share projects on a local network.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#composer_root","title":"<code>composer_root</code>","text":"<p>The relative path, from the project root, to the directory containing <code>composer.json</code>. (This is where all Composer-related commands are executed.)</p> Type Default Usage  project","boost":0.5},{"location":"users/configuration/config/#composer_version","title":"<code>composer_version</code>","text":"<p>Composer version for the web container and the <code>ddev composer</code> command.</p> Type Default Usage  project <code>2</code> Can be <code>2</code>, <code>1</code>, or empty (<code>\"\"</code>) for latest major version at container build time.Can also be a minor version like <code>2.2</code> for the latest release of that branch, an explicit version like <code>1.0.22</code>, or a keyword like <code>stable</code>, <code>preview</code> or <code>snapshot</code>. See Composer documentation.","boost":0.5},{"location":"users/configuration/config/#database","title":"<code>database</code>","text":"<p>The type and version of the database engine the project should use.</p> Type Default Usage  project MariaDB 10.4 Can be MariaDB 5.5\u201310.8 or 10.11, MySQL 5.5\u20138.0, or PostgreSQL 9\u201315.See Database Server Types for examples and caveats.","boost":0.5},{"location":"users/configuration/config/#dbimage_extra_packages","title":"<code>dbimage_extra_packages</code>","text":"<p>Extra Debian packages for the project\u2019s database container.</p> Type Default Usage  project <code>[]</code> <p>Example: <code>dbimage_extra_packages: [\"less\"]</code> will add the <code>less</code> package when the database container is built.</p>","boost":0.5},{"location":"users/configuration/config/#ddev_version_constraint","title":"<code>ddev_version_constraint</code>","text":"<p>You can configure a DDEV version constraint that will be validated against the running DDEV executable and prevent any command from running if it doesn\u2019t match.</p> <p>This will only work with DDEV versions above v1.22.4; older versions will ignore this setting.</p> Type Default Usage  project <code>&gt;= 1.22.4</code>","boost":0.5},{"location":"users/configuration/config/#default_container_timeout","title":"<code>default_container_timeout</code>","text":"<p>Seconds DDEV will wait for all containers to become ready.</p> Type Default Usage  project <code>120</code> Can be adjusted to avoid timeouts on slower systems or for huge snapshot restores.","boost":0.5},{"location":"users/configuration/config/#developer_mode","title":"<code>developer_mode</code>","text":"<p>Not currently used.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#disable_http2","title":"<code>disable_http2</code>","text":"<p>Whether to disable HTTP/2 listen in <code>ddev-router</code>.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. <p>Only available with legacy <code>router: nginx-proxy</code>, not the default <code>router: traefik</code>. When <code>true</code>, the router will not listen for HTTP/2, but use HTTP/1.1 SSL. (Some browsers don\u2019t work well with HTTP/2.)</p>","boost":0.5},{"location":"users/configuration/config/#disable_settings_management","title":"<code>disable_settings_management</code>","text":"<p>Whether to disable CMS-specific settings file management.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will not create or update CMS-specific settings files.</p>","boost":0.5},{"location":"users/configuration/config/#disable_upload_dirs_warning","title":"<code>disable_upload_dirs_warning</code>","text":"<p>Whether to disable the standard warning issued when a project is using <code>performance_mode: mutagen</code> but <code>upload_dirs</code> is not configured.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will not issue the normal warning on <code>ddev start</code>: \u201cYou have Mutagen enabled and your \u2018php\u2019 project type doesn\u2019t have <code>upload_dirs</code> set\u201d. See Mutagen and User-Generated Uploads for context on why DDEV avoids doing the Mutagen sync on <code>upload_dirs</code>.</p>","boost":0.5},{"location":"users/configuration/config/#docroot","title":"<code>docroot</code>","text":"<p>Relative path to the document root containing <code>index.php</code> or <code>index.html</code>.</p> Type Default Usage  project automatic DDEV will attempt to detect this and set it for you, otherwise falling back to the current directory.","boost":0.5},{"location":"users/configuration/config/#fail_on_hook_fail","title":"<code>fail_on_hook_fail</code>","text":"<p>Whether <code>ddev start</code> should be interrupted by a failing hook, on a single project or for all projects if used globally.</p> Type Default Usage  project global <code>false</code> Can be <code>true</code> or <code>false</code>.","boost":0.5},{"location":"users/configuration/config/#hooks","title":"<code>hooks</code>","text":"<p>DDEV-specific lifecycle hooks to be executed.</p> Type Default Usage  project ``","boost":0.5},{"location":"users/configuration/config/#host_db_port","title":"<code>host_db_port</code>","text":"<p>Port for binding database server to localhost interface.</p> Type Default Usage  project automatic <p>Not commonly used. Can be a specific port number for a fixed database port. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Can be a specific port number for a fixed database port, which can be useful for configuration of host-side database clients. (May still be easier to use <code>ddev mysql</code>, <code>ddev psql</code>, <code>ddev sequelace</code>, etc., which handle changing ports automatically, as does the sample command <code>ddev mysqlworkbench</code>.)</p>","boost":0.5},{"location":"users/configuration/config/#host_https_port","title":"<code>host_https_port</code>","text":"<p>Specific, persistent HTTPS port for direct binding to localhost interface.</p> Type Default Usage  project automatic <p>Not commonly used. Can be a specific port number for a fixed HTTPS URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Example: <code>59001</code> will have the project always use <code>https://127.0.0.1:59001</code> for the localhost URL\u2014used less commonly than the named URL which is better to rely on.</p>","boost":0.5},{"location":"users/configuration/config/#host_mailpit_port","title":"<code>host_mailpit_port</code>","text":"<p>Specific, persistent Mailpit port for direct binding to localhost interface.</p> Type Default Usage  project automatic <p>Not commonly used. Can be a specific port number for a fixed Mailpit URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p>","boost":0.5},{"location":"users/configuration/config/#host_webserver_port","title":"<code>host_webserver_port</code>","text":"<p>Specific, persistent HTTP port for direct binding to localhost interface.</p> Type Default Usage  project automatic <p>Not commonly used. Can be a specific port number for a fixed HTTP URL. If unset, the port will be assigned automatically and change each time <code>ddev start</code> is run.</p> <p>Example: <code>59000</code> will have the project always use <code>http://127.0.0.1:59000</code> for the localhost URL\u2014used less commonly than the named URL which is better to rely on.</p>","boost":0.5},{"location":"users/configuration/config/#instrumentation_opt_in","title":"<code>instrumentation_opt_in</code>","text":"<p>Whether to allow instrumentation reporting.</p> Type Default Usage  global <code>true</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, anonymous usage information is collected via Amplitude.</p>","boost":0.5},{"location":"users/configuration/config/#instrumentation_queue_size","title":"<code>instrumentation_queue_size</code>","text":"<p>Maximum number of locally collected events for instrumentation reporting.</p> Type Default Usage  global <code>100</code> Can be any integer.","boost":0.5},{"location":"users/configuration/config/#instrumentation_reporting_interval","title":"<code>instrumentation_reporting_interval</code>","text":"<p>Reporting interval in hours for instrumentation reporting.</p> Type Default Usage  global <code>24</code> Can be any integer.","boost":0.5},{"location":"users/configuration/config/#internet_detection_timeout_ms","title":"<code>internet_detection_timeout_ms</code>","text":"<p>Internet detection timeout in milliseconds.</p> Type Default Usage  global <code>3000</code> (3 seconds) Can be any integer. <p>DDEV must detect whether the internet is working to determine whether to add hostnames to <code>/etc/hosts</code>. In rare cases, you may need to increase this value if you have slow but working internet. See FAQ and GitHub issue.</p>","boost":0.5},{"location":"users/configuration/config/#letsencrypt_email","title":"<code>letsencrypt_email</code>","text":"<p>Email associated with Let\u2019s Encrypt feature. (Works in conjunction with <code>use_letsencrypt</code>.) (Not currently compatible with Traefik router.)</p> Type Default Usage  global `` <p>Set with <code>ddev config global --letsencrypt-email=me@example.com</code>. Used with the casual hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#mailpit_http_port","title":"<code>mailpit_http_port</code>","text":"<p>Port for project\u2019s Mailpit HTTP URL.</p> Type Default Usage  project global <code>8025</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#mailpit_https_port","title":"<code>mailpit_https_port</code>","text":"<p>Port for project\u2019s Mailpit HTTPS URL.</p> Type Default Usage  project global <code>8026</code> Can be changed to avoid a port conflict.","boost":0.5},{"location":"users/configuration/config/#messages","title":"<code>messages</code>","text":"<p>Configure messages like the Tip of the Day.</p> Type Default Usage  global <code>ticker_interval:</code> hours between ticker messages. <p>Example: Disable the \u201cTip of the Day\u201d ticker in <code>~/.ddev/global_config.yaml</code></p> <pre><code>messages:\n  ticker_interval: -1\n</code></pre> <p>Example: Show the \u201cTip of the Day\u201d ticket every two hours:</p> <p><code>`yaml` messages:   ticker_interval: 2</code></p>","boost":0.5},{"location":"users/configuration/config/#name","title":"<code>name</code>","text":"<p>The URL-friendly name DDEV should use to reference the project.</p> Type Default Usage  project enclosing directory name Must be unique; no two projects can have the same name. It\u2019s best if this matches the directory name. If this option is omitted, the project will take the name of the enclosing directory. This value may also be set via <code>ddev config --project-name=&lt;name&gt;</code>. (The <code>ddev config</code> flag is <code>project-name</code>, not <code>name</code>, see <code>ddev config</code> docs.)\u201d","boost":0.5},{"location":"users/configuration/config/#ngrok_args","title":"<code>ngrok_args</code>","text":"<p>Extra flags for configuring ngrok when sharing projects with the <code>ddev share</code> command.</p> Type Default Usage  project `` <p>Example: <code>--basic-auth username:pass1234 --domain foo.ngrok-free.app</code>.</p>","boost":0.5},{"location":"users/configuration/config/#no_bind_mounts","title":"<code>no_bind_mounts</code>","text":"<p>Whether to not use Docker bind mounts.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>Some Docker environments (like remote Docker) do not allow bind mounts, so when <code>true</code> this turns those off, turns on Mutagen, and uses volume copies to do what bind mounts would otherwise do.</p>","boost":0.5},{"location":"users/configuration/config/#no_project_mount","title":"<code>no_project_mount</code>","text":"<p>Whether to skip mounting project into web container.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>Advanced users only!</p> <p>When <code>true</code>, project will not be mounted by DDEV into the web container. Enables experimentation with alternate file mounting strategies.</p>","boost":0.5},{"location":"users/configuration/config/#nodejs_version","title":"<code>nodejs_version</code>","text":"<p>Node.js version for the web container\u2019s \u201csystem\u201d version.</p> Type Default Usage  project current LTS version any node version, like <code>16</code>, <code>18.2</code>, <code>18.19.2</code>, etc. <p>There is no need to configure <code>nodejs_version</code> unless you want a version other than the default version.</p>","boost":0.5},{"location":"users/configuration/config/#omit_containers","title":"<code>omit_containers</code>","text":"<p>Containers that should not be loaded automatically for one or more projects.</p> Type Default Usage  project global <code>[]</code> For projects, can include <code>db</code>, and <code>ddev-ssh-agent</code>.Globally, can include <code>ddev-router</code>, and <code>ddev-ssh-agent</code>. <p>Example: <code>omit_containers: [db, ddev-ssh-agent]</code> starts the project without a <code>db</code> container and SSH agent. Some containers can be omitted globally in <code>~/.ddev/global_config.yaml</code> and the result is additive; all containers named in both places will be omitted.</p> <p>Warning</p> <p>Omitting the <code>db</code> container will cause database-dependent DDEV features to be unstable.</p>","boost":0.5},{"location":"users/configuration/config/#override_config","title":"<code>override_config</code>","text":"<p>Whether to override config values instead of merging.</p> Type Default Usage  project <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, the <code>config.*.yaml</code> file with the option will have its settings override rather than merge with others. Allows statements like <code>use_dns_when_possible: false</code> or <code>additional_hostnames: []</code> to work.</p> <p>See Extending <code>config.yaml</code> with Custom <code>config.*.yaml</code> Files.</p>","boost":0.5},{"location":"users/configuration/config/#performance_mode","title":"<code>performance_mode</code>","text":"<p>Defines the performance optimization mode to be used. Currently Mutagen asynchronous caching and NFS are supported. Mutagen is enabled by default on Mac and Windows.</p> Type Default Usage  project global `` Can be <code>global</code>, <code>none</code>, <code>mutagen</code>, or <code>nfs</code>. <p>This is typically a global setting. The project-specific value will override global config.</p> <p>Workstation configuration is required to use NFS!</p> <p>See the NFS section on the Performance page.</p>","boost":0.5},{"location":"users/configuration/config/#php_version","title":"<code>php_version</code>","text":"<p>The PHP version the project should use.</p> Type Default Usage  project <code>8.1</code> Can be <code>5.6</code>, <code>7.0</code>, <code>7.1</code>, <code>7.2</code>, <code>7.3</code>, <code>7.4</code>, <code>8.0</code>, <code>8.1</code>, <code>8.2</code>, or <code>8.3</code>. <p>You can only specify the major version (<code>7.3</code>), not a minor version (<code>7.3.2</code>), from those explicitly available.</p>","boost":0.5},{"location":"users/configuration/config/#project_tld","title":"<code>project_tld</code>","text":"<p>Default TLD to be used for a project\u2019s domains, or globally for all project domains.</p> Type Default Usage  project global <code>ddev.site</code> Can be changed to any TLD you\u2019d prefer.","boost":0.5},{"location":"users/configuration/config/#required_docker_compose_version","title":"<code>required_docker_compose_version</code>","text":"<p>Specific docker-compose version for download.</p> Type Default Usage  global <p>If set to <code>v2.8.0</code>, for example, it will download and use that version instead of the expected version for docker-compose.</p> <p>Troubleshooting Only!</p> <p>This should only be used in specific cases like troubleshooting. Best avoided otherwise.</p>","boost":0.5},{"location":"users/configuration/config/#router","title":"<code>router</code>","text":"<p>Whether to enable the default Traefik router or the legacy \u201cnginx-proxy\u201d router.</p> Type Default Usage  global <code>traefik</code> Can <code>traefik</code> or <code>nginx-proxy</code> (legacy). <p>May also be set via <code>ddev config global --router=traefik</code> or <code>ddev config global --router=nginx-proxy</code>.</p>","boost":0.5},{"location":"users/configuration/config/#router_bind_all_interfaces","title":"<code>router_bind_all_interfaces</code>","text":"<p>Whether to bind <code>ddev-router</code>\u2019s ports on all network interfaces.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. <p>When <code>true</code>, the router will bind on all network interfaces instead of only <code>localhost</code>, exposing DDEV projects to your local network. This is sometimes used to share projects on a local network, see Sharing Your Project.</p>","boost":0.5},{"location":"users/configuration/config/#router_http_port","title":"<code>router_http_port</code>","text":"<p>Port for DDEV router\u2019s HTTP traffic.</p> Type Default Usage  project global <code>80</code> Usually changed only if there\u2019s a conflicting process using that port. <p>See the Troubleshooting page for more on addressing port conflicts.</p>","boost":0.5},{"location":"users/configuration/config/#router_https_port","title":"<code>router_https_port</code>","text":"<p>Port for DDEV router\u2019s HTTPS traffic.</p> Type Default Usage  project global <code>443</code> Usually changed only if there\u2019s a conflicting process using that port. <p>See the Troubleshooting page for more on addressing port conflicts.</p>","boost":0.5},{"location":"users/configuration/config/#simple_formatting","title":"<code>simple_formatting</code>","text":"<p>Whether to disable most <code>ddev list</code> and <code>ddev describe</code> table formatting.</p> Type Default Usage  global <code>false</code> Can be <code>true</code> or <code>false</code>. If you don\u2019t like the table lines in <code>ddev list</code> or <code>ddev describe</code>, you can completely turn them off with <code>ddev config --simple-formatting=true</code>. <p>When <code>true</code>, turns off most table formatting in <code>ddev list</code> and <code>ddev describe</code> and suppresses colorized text everywhere.</p>","boost":0.5},{"location":"users/configuration/config/#table_style","title":"<code>table_style</code>","text":"<p>Style for <code>ddev list</code> and <code>ddev describe</code>.</p> Type Default Usage  global <code>default</code> Can be <code>default</code>, <code>bold</code>, and <code>bright</code>. <p><code>bright</code> is a pleasant, colorful output some people may prefer. If you don\u2019t like the table lines at all, you can remove them with <code>ddev config --simple-formatting=true</code>.</p>","boost":0.5},{"location":"users/configuration/config/#timezone","title":"<code>timezone</code>","text":"<p>Timezone for container and PHP configuration.</p> Type Default Usage  project <code>UTC</code> Can be any valid timezone, like <code>Europe/Dublin</code> or <code>MST7MDT</code>.","boost":0.5},{"location":"users/configuration/config/#traefik_monitor_port","title":"<code>traefik_monitor_port</code>","text":"<p>Specify an alternate port for the Traefik (ddev-router) monitor port. This defaults to 10999 and rarely needs to be changed, but can be changed in cases of port conflicts.</p> Type Default Usage  global <code>10999</code> Can be any unused port below 65535.","boost":0.5},{"location":"users/configuration/config/#type","title":"<code>type</code>","text":"<p>The DDEV-specific project type.</p> Type Default Usage  project <code>php</code> Can be <code>backdrop</code>, <code>craftcms</code>, <code>django4</code>, <code>drupal6</code>, <code>drupal7</code>, <code>drupal8</code>, <code>drupal9</code>, <code>drupal10</code>,  <code>laravel</code>, <code>magento</code>, <code>magento2</code>, <code>php</code>, <code>python</code>, <code>shopware6</code>, <code>silverstripe</code>, <code>typo3</code>, or <code>wordpress</code>. <p>The <code>php</code> and <code>python</code> types don\u2019t attempt CMS configuration or settings file management and can work with any project.</p>","boost":0.5},{"location":"users/configuration/config/#upload_dirs","title":"<code>upload_dirs</code>","text":"<p>Paths from the project\u2019s docroot to the user-generated files directory targeted by <code>ddev import-files</code>. Can be outside the docroot but must be within the project directory e.g. <code>../private</code>. Some CMSes and frameworks have default <code>upload_dirs</code>, like Drupal\u2019s <code>sites/default/files</code>; <code>upload_dirs</code> will override the defaults, so if you want Drupal to use both <code>sites/default/files</code> and <code>../private</code> you would list both, <code>upload_dirs: [\"sites/default/files\", \"../private\"]</code>. <code>upload_dirs</code> is used for targeting <code>ddev import-files</code> and also, when Mutagen is enabled, to bind-mount those directories so their contents does not need to be synced into Mutagen.</p> Type Default Usage  project A list of directories.","boost":0.5},{"location":"users/configuration/config/#use_dns_when_possible","title":"<code>use_dns_when_possible</code>","text":"<p>Whether to use DNS instead of editing <code>/etc/hosts</code>.</p> Type Default Usage  project <code>true</code> Can be <code>true</code> or <code>false</code>. <p>When <code>false</code>, DDEV will always update the <code>/etc/hosts</code> file with the project hostname instead of using DNS for name resolution.</p> <p>See Using DDEV Offline.</p>","boost":0.5},{"location":"users/configuration/config/#use_docker_compose_from_path","title":"<code>use_docker_compose_from_path</code>","text":"<p>Whether to use the system-installed docker-compose. You can otherwise use <code>required_docker_compose_version</code> to specify a version for download.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>When <code>true</code>, DDEV will use the docker-compose found in on your system\u2019s path instead of using its private, known-good, docker-compose version.</p> <p>Troubleshooting Only!</p> <p>This should only be used in specific cases like troubleshooting. Best avoided otherwise.</p>","boost":0.5},{"location":"users/configuration/config/#use_hardened_images","title":"<code>use_hardened_images</code>","text":"<p>Whether to use hardened images for internet deployment.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>When <code>true</code>, more secure hardened images are used for an internet deployment. These do not include sudo in the web container, and the container is run without elevated privileges. Generally used with the casual hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#use_letsencrypt","title":"<code>use_letsencrypt</code>","text":"<p>Whether to enable Let\u2019s Encrypt integration. (Works in conjunction with <code>letsencrypt_email</code>.) (Not currently compatible with Traefik router.)</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>May also be set via <code>ddev config global --use-letsencrypt</code> or <code>ddev config global --use-letsencrypt=false</code>. When <code>true</code>, <code>letsencrypt_email</code> must also be set and the system must be available on the internet. Used with the casual hosting feature.</p>","boost":0.5},{"location":"users/configuration/config/#web_environment","title":"<code>web_environment</code>","text":"<p>Additional custom environment variables for a project\u2019s web container. (Or for all projects if used globally.)</p> Type Default Usage  project global <code>[]</code>","boost":0.5},{"location":"users/configuration/config/#web_extra_daemons","title":"<code>web_extra_daemons</code>","text":"<p>Additional daemons that should automatically be started in the web container.</p> Type Default Usage  project <code>[]</code>","boost":0.5},{"location":"users/configuration/config/#web_extra_exposed_ports","title":"<code>web_extra_exposed_ports</code>","text":"<p>Additional named sets of ports to expose via <code>ddev-router</code>.</p> Type Default Usage  project <code>[]</code>","boost":0.5},{"location":"users/configuration/config/#webimage","title":"<code>webimage</code>","text":"<p>The Docker image to use for the web server.</p> Type Default Usage  project <code>ddev/ddev-webserver</code> Specify your own image based on ddev/ddev-webserver. <p>Proceed with caution</p> <p>It\u2019s unusual to change this, and we don\u2019t recommend it without Docker experience and a good reason. Typically, this means additions to the existing web image using a <code>.ddev/web-build/Dockerfile.*</code>.</p>","boost":0.5},{"location":"users/configuration/config/#webimage_extra_packages","title":"<code>webimage_extra_packages</code>","text":"<p>Extra Debian packages for the project\u2019s web container.</p> Type Default Usage  project <code>[]</code> <p>Example: <code>webimage_extra_packages: [php-yaml, php-bcmath]</code> will add the <code>php-yaml</code> and <code>php-bcmath</code> packages when the web container is built.</p>","boost":0.5},{"location":"users/configuration/config/#webserver_type","title":"<code>webserver_type</code>","text":"<p>Which available web server type should be used.</p> Type Default Usage  project <code>nginx-fpm</code> Can be <code>nginx-fpm</code>, <code>apache-fpm</code>, or <code>nginx-gunicorn</code>. <p>To change from the default <code>nginx-fpm</code> to <code>apache-fpm</code>, for example, you would need to edit your project\u2019s <code>.ddev/config.yaml</code> to include the following:</p> <pre><code>webserver_type: apache-fpm\n</code></pre> <p>Then run the <code>ddev restart</code> command to have the change take effect.</p>","boost":0.5},{"location":"users/configuration/config/#working_dir","title":"<code>working_dir</code>","text":"<p>Working directories used by <code>ddev exec</code> and <code>ddev ssh</code>.</p> Type Default Usage  project <p>Example: <code>working_dir: { web: \"/var/www\", db: \"/etc\" }</code> sets the working directories for the <code>web</code> and <code>db</code> containers.</p>","boost":0.5},{"location":"users/configuration/config/#wsl2_no_windows_hosts_mgt","title":"<code>wsl2_no_windows_hosts_mgt</code>","text":"<p>(WSL2 only) Whether to disable the management and checking of the Windows hosts file. By default, when using WSL2, DDEV manages the system-wide hosts file on the Windows side (normally <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code>) by using <code>ddev.exe</code> installed on the Windows side. This normally works better for all applications, including browsers and IDEs. However, this behavior can be disabled by setting <code>wsl_no_windows_hosts_mgt: true</code>.</p> Type Default Usage  global <code>false</code> Can <code>true</code> or <code>false</code>. <p>May also be set via <code>ddev config global --wsl2-no-windows-hosts-mgt</code> or <code>ddev config global --wsl2-no-windows-hosts-mgt=false</code>.</p>","boost":0.5},{"location":"users/configuration/config/#xdebug_enabled","title":"<code>xdebug_enabled</code>","text":"<p>Whether Xdebug should be enabled for step debugging or profiling.</p> Type Default Usage  project <code>false</code> Please leave this <code>false</code> in most cases. Most people use <code>ddev xdebug</code> and <code>ddev xdebug off</code> (or <code>ddev xdebug toggle</code>) commands.","boost":0.5},{"location":"users/configuration/config/#xdebug_ide_location","title":"<code>xdebug_ide_location</code>","text":"<p>Adjust Xdebug listen location for WSL2 or in-container.</p> Type Default Usage  global <code>\"\"</code> Can be empty (<code>\"\"</code>), <code>\"wsl2\"</code>, <code>\"container\"</code>, or an explicit IP address. <p>For PhpStorm running inside WSL2 (or JetBrains Gateway), use <code>\"wsl2\"</code>. For in-container like VS Code Language Server, set to <code>\"container\"</code>. It can also be set to an explicit IP address.</p> <p>Examples:</p> <ul> <li><code>xdebug_ide_location: 172.16.0.2</code> when you need to provide an explicit IP address where the IDE is listening.</li> <li><code>xdebug_ide_location: container</code> when the IDE is actually listening inside the <code>ddev-webserver</code> container.</li> <li><code>xdebug_ide_location: wsl2</code> when the IDE is running (or listening) in WSL2.</li> </ul>","boost":0.5},{"location":"users/configuration/experimental/","title":"Experimental Configurations","text":""},{"location":"users/configuration/experimental/#django4-and-python-project-types","title":"<code>django4</code> and <code>python</code> Project Types","text":"<p>DDEV v1.22+ supports Python-based projects, including those built with Django 4 and Flask.</p> <p><code>ddev config --project-type=django4</code> will by default a project to use the <code>nginx-gunicorn</code> <code>webserver_type</code> and the <code>postgres</code> database type.</p> <p>To get started with either one of these Python projects, checkout the Django 4 Quickstart or the Flask Quickstart.</p> <p>Community feedback is essential for Django/Python support to improve, thank you for participating!</p>"},{"location":"users/configuration/hooks/","title":"Hooks","text":"<p>Most DDEV commands provide hooks to run tasks before or after the main command executes. To automate setup tasks specific to your project, define them in the project\u2019s <code>config.yaml</code> file.</p> <p>To define command tasks in your configuration, specify the desired command hook as a subfield to <code>hooks</code>, then a list of tasks to run:</p> <pre><code>hooks:\n  post-start:\n    - exec: \"simple command expression\"\n    - exec: \"ls &gt;/dev/null &amp;&amp; touch /var/www/html/somefile.txt\"\n    - exec-host: \"simple command expression\"\n  post-import-db:\n    - exec: \"drush uli\"\n</code></pre>"},{"location":"users/configuration/hooks/#supported-command-hooks","title":"Supported Command Hooks","text":"<ul> <li> <p><code>pre-start</code>: Hooks into <code>ddev start</code>. Execute tasks before the project environment starts.</p> <p>Tip</p> <p>Only <code>exec-host</code> tasks can run during <code>pre-start</code> because the containers are not yet running. See Supported Tasks below.</p> </li> <li> <p><code>post-start</code>: Execute tasks after the project environment has started.</p> </li> <li><code>pre-import-db</code> and <code>post-import-db</code>: Execute tasks before or after database import.</li> <li><code>pre-import-files</code> and <code>post-import-files</code>: Execute tasks before or after files are imported.</li> <li><code>pre-composer</code> and <code>post-composer</code>: Execute tasks before or after the <code>composer</code> command.</li> <li><code>pre-stop</code>, <code>pre-config</code>, <code>post-config</code>, <code>pre-exec</code>, <code>post-exec</code>, <code>pre-pull</code>, <code>post-pull</code>, <code>pre-push</code>, <code>post-push</code>, <code>pre-snapshot</code>, <code>post-snapshot</code>, <code>pre-restore-snapshot</code>, <code>post-restore-snapshot</code>: Execute as the name suggests.</li> <li> <p><code>post-stop</code>: Hooks into <code>ddev stop</code>. Execute tasks after the project environment stopped.</p> <p>Tip</p> <p>Only <code>exec-host</code> tasks can run during <code>post-stop</code>. See Supported Tasks below.</p> </li> </ul>"},{"location":"users/configuration/hooks/#supported-tasks","title":"Supported Tasks","text":"<p>DDEV currently supports these tasks:</p> <ul> <li><code>exec</code> to execute a command in any service/container.</li> <li><code>exec-host</code> to execute a command on the host.</li> <li><code>composer</code> to execute a Composer command in the web container.</li> </ul>"},{"location":"users/configuration/hooks/#exec-execute-a-shell-command-in-a-container-defaults-to-web-container","title":"<code>exec</code>: Execute a shell command in a container (defaults to web container)","text":"<p>Value: string providing the command to run. Commands requiring user interaction are not supported. You can also add a \u201cservice\u201d key to the command, specifying to run it on the <code>db</code> container or any other container you use.</p> <p>Example: Use Drush to clear the Drupal cache and get a user login link after database import.</p> <pre><code>hooks:\n  post-import-db:\n    - exec: drush cr\n    - exec: drush uli\n</code></pre> <p>Example: Use wp-cli to replace the production URL with development URL in a WordPress project\u2019s database.</p> <pre><code>hooks:\n  post-import-db:\n    - exec: wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\n</code></pre> <p>Example: Add an extra database before <code>import-db</code>, executing in <code>db</code> container.</p> <pre><code>hooks:\n  pre-import-db:\n    - exec: mysql -uroot -proot -e \"CREATE DATABASE IF NOT EXISTS some_new_database;\"\n      service: db\n</code></pre> <p>Example: Add the common <code>ll</code> alias into the <code>web</code> container\u2019s <code>.bashrc</code> file.</p> <pre><code>hooks:\n  post-start:\n  - exec: sudo echo alias ll=\\\"ls -lhA\\\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Tip</p> <p>This could be done more efficiently via <code>.ddev/web-build/Dockerfile</code> as explained in Customizing Images.</p> <p>Advanced usages may require running commands directly with explicit arguments. This approach is useful when Bash interpretation is not required (no environment variables, no redirection, etc.).</p> <pre><code>hooks:\n  post-start:\n  - exec:\n    exec_raw: [ls, -lR, /var/www/html]\n</code></pre>"},{"location":"users/configuration/hooks/#exec-host-execute-a-shell-command-on-the-host-system","title":"<code>exec-host</code>: Execute a shell command on the host system","text":"<p>Value: string providing the command to run. Commands requiring user interaction are not supported.</p> <pre><code>hooks:\n  pre-start:\n    - exec-host: \"command to run\"\n</code></pre>"},{"location":"users/configuration/hooks/#composer-execute-a-composer-command-in-the-web-container","title":"<code>composer</code>: Execute a Composer command in the web container","text":"<p>Value: string providing the Composer command to run.</p> <p>Example:</p> <pre><code>hooks:\n  post-start:\n    - composer: config discard-changes true\n</code></pre>"},{"location":"users/configuration/hooks/#wordpress-example","title":"WordPress Example","text":"<pre><code>hooks:\n  post-start:\n    # Install WordPress after start\n    - exec: \"wp config create --dbname=db --dbuser=db --dbpass=db --dbhost=db\"\n    - exec: \"wp core install --url=http://mysite.ddev.site --title=MySite --admin_user=admin --admin_email=admin@mail.test\"\n  post-import-db:\n    # Update the URL of your project throughout your database after import\n    - exec: \"wp search-replace https://www.myproductionsite.com http://mydevsite.ddev.site\"\n</code></pre>"},{"location":"users/configuration/hooks/#drupal-7-example","title":"Drupal 7 Example","text":"<pre><code>hooks:\n  post-start:\n    # Install Drupal after start if not installed already\n    - exec: \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=db:db@db/db\"\n    # Generate a one-time login link for the admin account\n    - exec: \"drush uli\"\n  post-import-db:\n    # Set the project name\n    - exec: \"drush vset site_name MyDevSite\"\n    # Enable the environment indicator module\n    - exec: \"drush en -y environment_indicator\"\n    # Clear the cache\n    - exec: \"drush cc all\"\n</code></pre>"},{"location":"users/configuration/hooks/#drupal-8-example","title":"Drupal 8 Example","text":"<pre><code>hooks:\n  post-start:\n    # Install Composer dependencies from the web container\n    - composer: install\n    # Install Drupal after start if not installed already\n    - exec: \"(drush status bootstrap | grep -q Successful) || drush site-install -y --db-url=mysql://db:db@db/db\"\n    # Generate a one-time login link for the admin account\n    - exec: \"drush uli 1\"\n  post-import-db:\n    # Set the site name\n    - exec: \"drush config-set system.site name MyDevSite\"\n    # Enable the environment indicator module\n    - exec: \"drush en -y environment_indicator\"\n    # Clear the cache\n    - exec: \"drush cr\"\n</code></pre>"},{"location":"users/configuration/hooks/#typo3-example","title":"TYPO3 Example","text":"<pre><code>hooks:\n    post-start:\n      - composer: install\n</code></pre>"},{"location":"users/configuration/hooks/#adding-additional-debian-packages-php-modules-example","title":"Adding Additional Debian Packages (PHP Modules) Example","text":"<pre><code>webimage_extra_packages: [\"php-bcmath\", \"php7.4-tidy\"]\ndbimage_extra_packages: [\"vim\"]\n</code></pre>"},{"location":"users/debugging-profiling/blackfire-profiling/","title":"Blackfire Profiling","text":"<p>DDEV has built-in Blackfire integration.</p>"},{"location":"users/debugging-profiling/blackfire-profiling/#basic-blackfire-usage-using-browser-plugin","title":"Basic Blackfire Usage (Using Browser Plugin)","text":"<ol> <li>Create a Blackfire account. (Free Blackfire accounts are no longer available; see Blackfire pricing.)</li> <li>Install the Chrome or Firefox browser plugin.</li> <li>From Blackfire\u2019s control panel, get the Server ID, Server Token, Client ID, and Client Token from your Account \u2192 Credentials or environment.</li> <li>Configure DDEV with the credentials, <code>ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=&lt;id&gt;,BLACKFIRE_SERVER_TOKEN=&lt;token&gt;,BLACKFIRE_CLIENT_ID=&lt;id&gt;,BLACKFIRE_CLIENT_TOKEN=&lt;token&gt;\"</code>. It\u2019s easiest to do this globally, but you can do the same thing at the project level using <code>ddev config --web-environment-add</code>. (It may be easier to manually edit the relevant config file, <code>.ddev/config.yaml</code> or <code>~/.ddev/global_config.yaml</code>.)</li> <li><code>ddev start</code>.</li> <li><code>ddev blackfire on</code> to enable, <code>ddev blackfire off</code> to disable, <code>ddev blackfire status</code> to see status.</li> <li>With Blackfire enabled, you can use the browser extension.</li> </ol>"},{"location":"users/debugging-profiling/blackfire-profiling/#profiling-with-the-blackfire-cli","title":"Profiling with the Blackfire CLI","text":"<p>The Blackfire CLI is built into the web container, so you don\u2019t need to install it yourself.</p> <ol> <li> <p>Add the <code>BLACKFIRE_SERVER_ID</code>, <code>BLACKFIRE_SERVER_TOKEN</code>, <code>BLACKFIRE_CLIENT_ID</code>, and <code>BLACKFIRE_CLIENT_TOKEN</code> environment variables to <code>~/.ddev/global_config.yaml</code> via the <code>web_environment</code> key:</p> <pre><code>  web_environment:\n  - OTHER_ENV=something\n  - BLACKFIRE_SERVER_ID=dde5f66d-xxxxxx\n  - BLACKFIRE_SERVER_TOKEN=09b0ec-xxxxx\n  - BLACKFIRE_CLIENT_ID=f5e88b7e-xxxxx\n  - BLACKFIRE_CLIENT_TOKEN=00cee15-xxxxx1\n</code></pre> <p>You can also do this with <code>ddev config global --web-environment-add=\"BLACKFIRE_SERVER_ID=&lt;id&gt;,BLACKFIRE_SERVER_TOKEN=&lt;token&gt;,BLACKFIRE_CLIENT_ID=&lt;id&gt;,BLACKFIRE_CLIENT_TOKEN=&lt;token&gt;\"</code>, but any existing environment variables will be deleted.</p> </li> <li> <p><code>ddev start</code>.</p> </li> <li><code>ddev blackfire on</code>.</li> <li>Click the \u201cBlackfire\u201d browser extension to profile.</li> </ol>"},{"location":"users/debugging-profiling/blackfire-profiling/#examples-of-using-the-blackfire-cli","title":"Examples of Using the Blackfire CLI","text":"<ul> <li><code>ddev blackfire on</code> and <code>ddev blackfire off</code></li> <li><code>ddev exec blackfire curl https://&lt;yoursite&gt;.ddev.site</code></li> <li><code>ddev exec blackfire drush st</code></li> <li><code>ddev exec blackfire curl https://&lt;yoursite&gt;.ddev.site</code></li> <li><code>ddev ssh</code> and use the Blackfire CLI as described in Profiling HTTP Requests with the CLI.</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/","title":"Step Debugging with Xdebug","text":"<p>Every DDEV project is automatically configured with Xdebug so that popular IDEs can do step debugging of PHP code.</p> <p>Xdebug is a server-side tool, and it\u2019s installed automatically in the container so you don\u2019t have to install or configure it on your workstation. Xdebug is disabled by default for performance reasons, so you\u2019ll need to enable it and configure your IDE before can start debugging.</p> <p>All IDEs basically work the same, listening on a port and reacting when they\u2019re contacted there. IDEs other than those listed here work fine, if they listen on Xdebug\u2019s default port 9003.</p> <p>Tip</p> <p>This was port 9000 through DDEV v1.18, changed in v1.19+ to port 9003.</p> <p>Key facts:</p> <ul> <li>Enable Xdebug by running <code>ddev xdebug</code> or <code>ddev xdebug on</code> from your project directory. It will remain enabled until you start or restart the project.</li> <li>Disable Xdebug for better performance when not debugging with <code>ddev xdebug off</code>.</li> <li>Toggle Xdebug on and off easily with <code>ddev xdebug toggle</code>.</li> <li><code>ddev xdebug status</code> will show Xdebug\u2019s current status.</li> <li>You may need to open port 9003 in your firewall to allow Xdebug access. (See Troubleshooting Xdebug below.)</li> <li>The IDE\u2019s debug server port must be set to Xdebug\u2019s default 9003, which is already the case in popular IDEs. If the unusual case that you have a port conflict, see Using Xdebug on a Port Other than the Default 9003 below.</li> <li>In the case of using running your IDE inside WSL2 (using WSLg) or with a proxy setup like JetBrains Gateway, you can set that with <code>ddev config global --xdebug-ide-location=wsl2</code>. If you\u2019re running your IDE with a proxy inside the web container, you can set that with <code>ddev config global --xdebug-ide-location=container</code>.</li> </ul> <p>For more background on Xdebug, see Xdebug documentation. The intention here is that one won\u2019t have to understand Xdebug to do debugging.</p>"},{"location":"users/debugging-profiling/step-debugging/#ide-setup","title":"IDE Setup","text":"<ul> <li>PhpStorm</li> <li>Visual Studio Code (VS Code)</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-debugging-setup","title":"PhpStorm Debugging Setup","text":"<p>PhpStorm is a leading PHP development IDE with extensive built-in debugging support. It provides two ways to do debugging: \u201czero-configuration\u201d debugging which requires very little effort in the PhpStorm IDE, and a \u201crun configuration\u201d you can set up like Netbeans or Eclipse.</p> <p>If you\u2019re using PhpStorm inside WSL2 or Linux</p> <p>Make PhpStorm listen for Xdebug using IPv4 by visiting Help \u2192 Edit Custom VM Options, and adding an additional line: <code>-Djava.net.preferIPv4Stack=true</code>. The Linux version of PhpStorm seems to otherwise default to only using IPv6.</p> <p>If using PhpStorm inside WSL2 or with JetBrains Gateway</p> <p>Make PhpStorm listen to the right IP address with <code>ddev config global --xdebug-ide-location=wsl2</code></p>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-zero-configuration-debugging","title":"PhpStorm Zero-Configuration Debugging","text":"<p>PhpStorm zero-configuration debugging will automatically detect a connection and offer to create a \u201cserver\u201d that maps your workstation files to the container. This means you only have to:</p> <ol> <li>Toggle the \u201cStart Listening for PHP Debug Connections\u201d button:     </li> <li>Set a breakpoint.</li> <li>Visit a page that should stop in the breakpoint you set.</li> <li>PhpStorm will ask you what mapping to use, so it can figure out how to map the path inside the container to the path on your workstation. The first time you do this with a project, PhpStorm will pop up a \u201cserver\u201d dialog box to set the mapping. The default will work, but it\u2019s best to click the checkbox to map the whole project directory to <code>/var/www/html</code>.</li> </ol> <p>When using this zero-configuration option:</p> <ol> <li>Use the latest DDEV version.</li> <li>Under Run \u2192 Edit Configurations, check that there are no servers already defined. PhpStorm will create a new server for you if no others exist. You can delete all servers and have PhpStorm create a new one, or you can create/edit an existing server as discussed below.</li> </ol>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-rundebug-configuration-debugging","title":"PhpStorm \u201cRun/Debug Configuration\u201d Debugging","text":"<p>PhpStorm run/debug configurations require more setup but may be easier and more flexible for some people.</p> <ol> <li>Under the Run menu select Edit configurations.</li> <li>Click the + in the upper left and choose PHP Web Page to create a configuration. Give it a reasonable name.</li> <li>Create a \u201cserver\u201d for the project. Make sure Name is exactly the same as your host (e.g. <code>my-site.ddev.site</code>):     </li> <li>Add file mappings for the files on the server. Click on the local repository path and add <code>/var/www/html</code> as the Absolute path on the server and your repository root as the path on the host.</li> <li>Set an appropriate breakpoint.</li> <li>Start debugging by clicking the \u201cdebug\u201d button, which will launch a page in your browser:     </li> </ol>"},{"location":"users/debugging-profiling/step-debugging/#phpstorm-and-command-line-debugging","title":"PhpStorm and Command-Line Debugging","text":"<p>If you need to debug command-line PHP processes, especially code that\u2019s outside the docroot, the environment variable <code>PHP_IDE_CONFIG</code> is already set inside the web container, so you don\u2019t have to do much more.</p> <p>However, if you\u2019ve not yet used PhpStorm with Xdebug for a regular web request, do that to automatically create the PhpStorm \u201cserver\u201d with the same name as your primary URL (Languages and Frameworks \u2192 PHP \u2192 Servers). The key job of the server is to map filesystem locations on the workstation (your computer) to filesystem locations on the remote server\u2014in this case the <code>ddev-webserver</code> container. Often, PhpStorm automatically sets up a mapping that doesn\u2019t include the entire project, meaning things like the <code>vendor</code> directory may not be mapped. You can fix this by mapping the top-level directory of your project to <code>/var/www/html</code> in the container: </p> <p>If you encounter the error: \u201cCan\u2019t find a source position. Server with name \u2018SITE_NAME.ddev.site\u2019 doesn\u2019t exist\u201d, change the \u201cPHP | Servers\u201d Name to <code>SITE_NAME.ddev.site</code>. In the example screenshot above both Name and Host are \u201c<code>d8composer.ddev.site</code>\u201d.</p>"},{"location":"users/debugging-profiling/step-debugging/#visual-studio-code-vs-code-debugging-setup","title":"Visual Studio Code (VS Code) Debugging Setup","text":"<ol> <li>Install the PHP Debug extension.</li> <li>Update the project\u2019s <code>.vscode/launch.json</code> to add the \u201cListen for Xdebug\u201d configuration from this config snippet. For more on customizing <code>launch.json</code>, see the VS Code docs.</li> <li>Set a breakpoint in your <code>index.php</code>. If it isn\u2019t solid red, restart.</li> <li>In the menu, choose Run \u2192 Start Debugging. You may have to select \u201cListen for Xdebug\u201d by the green arrowhead at the top left. The bottom pane of VS Code should now be orange (live) and should say \u201cListen for Xdebug\u201d.</li> <li>Enable Xdebug with <code>ddev xdebug on</code>.</li> <li>In a browser, visit your project and confirm you hit the breakpoint.</li> </ol> <p>If you\u2019re using VS Code on Windows with WSL2</p> <p>VS Code should suggest two extensions if you have WSL2 enabled along with a PHP project: \u201cPHP Debug\u201d and \u201cRemote - WSL\u201d. You\u2019ll need to enable both of these extensions in your distro (e.g. Ubuntu).</p>"},{"location":"users/debugging-profiling/step-debugging/#using-xdebug-on-a-port-other-than-the-default-9003","title":"Using Xdebug on a Port Other than the Default 9003","text":"<p>By default, DDEV is set up to contact the default port, port 9003 on your IDE. However, if you have something else listening on that port or your IDE does not yet default to 9003, you\u2019ll need to change the port. (PhpStorm and VS Code have switch to supporting 9003 instead of 9000 for some time now.)</p> <ul> <li> <p>To override the port, add an override file in the project\u2019s <code>.ddev/php directory</code>. For example, a file <code>.ddev/php/xdebug_client_port.ini</code> would change to use the legacy port 9000:</p> <pre><code>[PHP]\nxdebug.client_port=9000\n</code></pre> </li> <li> <p>Then change your IDE\u2019s configuration to listen on the new port.</p> </li> </ul> <p>Tip</p> <p>If you\u2019re using a PHP version below 7.2, you\u2019ll be using Xdebug version 2.x instead of 3.x and your port config should be <code>xdebug.remote_port</code> instead.</p>"},{"location":"users/debugging-profiling/step-debugging/#troubleshooting-xdebug","title":"Troubleshooting Xdebug","text":"<p>The basic thing to understand about Xdebug is that it\u2019s a network protocol. Your IDE (like PhpStorm) will listen on the Xdebug port (port 9003). If Xdebug is enabled in the DDEV web container (<code>ddev xdebug on</code>), PHP inside that container will try to open a TCP connection to the IDE. Docker\u2019s networking places the host-side listening IDE at <code>host.docker.internal:9003</code>, so you have to make sure the network connection is clear and can be made and everything should work. Firewalls may get in the way.</p> <p>Here are basic steps to take to sort out any difficulty:</p> <ul> <li>Make sure your IDE is listening for Xdebug.</li> <li><code>ddev logs</code> may show you something like <code>Xdebug: [Step Debug] Could not connect to debugging client. Tried: host.docker.internal:9003 (fallback through xdebug.client_host/xdebug.client_port) :-(</code>. If it does, it may mean that your firewall is blocking the connection, or in a small number of cases that <code>host.docker.internal</code> is not figured out successfully by DDEV or Docker. If it does:<ul> <li>Temporarily disable your firewall. On Windows/WSL this is typically Windows Defender; on macOS you\u2019ll find it in settings; on Debian/Ubuntu it\u2019s typically <code>ufw</code> so <code>sudo ufw disable</code>.</li> <li>If disabling the firewall fixes the problem, re-enable the firewall and add an exception for port 9003. Your firewall will have a way to do this; on Debian/Ubuntu run <code>sudo ufw allow 9003</code>.</li> </ul> </li> <li>Delete existing PhpStorm \u201cservers\u201d in settings, or recreate VS Code\u2019s <code>launch.json</code> file exactly as shown in the instructions here.</li> <li>Remember the port in play is port 9003.</li> <li>Reboot your computer.</li> <li>If you\u2019re running WSL2 and have PhpStorm running inside WSL2 (the Linux version of PhpStorm) then <code>ddev config global --xdebug-ide-location=wsl2</code>.</li> <li>Temporarily disable any firewall or VPN if you\u2019re having trouble. Xdebug is a network protocol, and the PHP process inside the web container must be able to establish a TCP connection to the listening IDE (PhpStorm, for example).</li> <li>Confirm that DDEV\u2019s <code>xdebug_ide_location</code> config setting is set properly, which in most cases should be set to an empty string. Check both your project\u2019s <code>.ddev/config.yaml</code> and DDEV\u2019s global <code>~/.ddev/global_config.yaml</code>.</li> <li>Use <code>ddev xdebug on</code> to enable Xdebug when you want it, and <code>ddev xdebug off</code> when you\u2019re done with it.</li> <li>You can also use <code>ddev xdebug toggle</code> to easily toggle Xdebug on and off.</li> <li>Set a breakpoint at the first executable line of your <code>index.php</code>.</li> <li>Tell your IDE to start listening. (PhpStorm: click the telephone button, VS Code: run the debugger.)</li> <li>Use <code>curl</code> or a browser to create a web request. For example, <code>curl https://d10.ddev.site</code> or run <code>ddev exec curl localhost</code>.</li> <li><code>ddev ssh</code> into the web container. Can you run <code>telnet host.docker.internal 9003</code> and have it connect? If not, follow the instructions above about disabling firewall and adding an exception for port 9003.</li> <li>In PhpStorm, disable the \u201clisten for connections\u201d button so it won\u2019t listen. Or exit PhpStorm. With another IDE like VS Code, stop the debugger from listening.</li> <li><code>ddev ssh</code> into the web container. Can you run <code>telnet host.docker.internal 9003</code> and have it connect? If so, you have something else running on port 9003. On the host, use <code>sudo lsof -i :9003 -sTCP:LISTEN</code> to find out what\u2019s there and stop it. Don\u2019t continue debugging until your telnet command does not connect. (On Windows WSL2 you may have to look for listeners both inside WSL2 and on the Windows side.)</li> <li>Now click the \u201clisten\u201d button on PhpStorm to start listening for connections.</li> <li><code>ddev ssh</code> and try the <code>telnet host.docker.internal 9003</code> again. It should connect. If not, maybe PhpStorm is not listening, or not configured to listen on port 9003?</li> <li>Check to make sure that Xdebug is enabled. You can use <code>php -i | grep -i xdebug</code> inside the container, or use any other technique you want that gives the output of <code>phpinfo()</code>, including Drupal\u2019s <code>admin/reports/status/php</code>. You should see <code>with Xdebug v3</code> and <code>php -i | grep xdebug.mode</code> should give you <code>xdebug.mode =&gt; debug,develop =&gt; debug,develop\"</code>.</li> <li>Set a breakpoint in the first relevant line of your <code>index.php</code> and then visit the site in a browser. It should stop at that first line.</li> <li>If you\u2019re using a flavor of IDE that connects directly into the web container like VS Code Language Server, you may want to use the global <code>xdebug_ide_location</code> setting to explain to DDEV the situation. For example, <code>ddev config global --xdebug-ide-location=container</code>, which tells the PHP/Xdebug to connect directly to the listener inside the container.</li> <li>To find out what DDEV is using for the value of <code>host.docker.internal</code> you can run <code>DDEV_DEBUG=true ddev start</code> and it will explain how it\u2019s getting that value, which help troubleshoot some problems. You\u2019ll see something like <code>host.docker.internal=192.168.5.2 because running on Colima</code> which can explain the usage.</li> </ul>"},{"location":"users/debugging-profiling/step-debugging/#wsl2-xdebug-troubleshooting","title":"WSL2 Xdebug Troubleshooting","text":"<p>WSL2 is a complicated environment for Xdebug, especially if you\u2019re running your IDE on the Windows side, as most people do.</p> <ul> <li>With PhpStorm, consider using the \u201cRemote Development\u201d feature to connect to WSL. That runs an actual PhpStorm instance on WSL2 to reduce networking complexity.</li> <li>When using an IDE inside WSL2\u2014like you would running PhpStorm or Visual Studio Code inside WSL2, or using PhpStorm\u2019s \u201cRemote Development\u201d feature\u2014you may need to use the <code>xdebug_ide_location</code> setting to tell Xdebug to expect the IDE under WSL2. You can do this by running <code>ddev config global --xdebug-ide-location=wsl2</code>.</li> <li><code>export DDEV_DEBUG=true &amp;&amp; ddev start</code> will show you how DDEV is calculating the <code>host.docker.internal</code> IP address to be used when contacting the IDE, which may give a hint about problems you might discover in the general troubleshooting discussed above, when trying to connect to the listening IDE.</li> <li>If you\u2019re using the IDE on the Windows side, WSL2\u2019s <code>/etc/resolv.conf</code> file is the authoritative way to figure out where the IDE is in the Windows networking scheme. That value should be the same as <code>host.docker.internal</code>, so running <code>ddev exec ping -c 1 host.docker.internal</code> will show you what\u2019s actually being used. If your IDE is actually at a different address, you can tell DDEV to override the discovered value for <code>host.docker.internal</code> by running <code>ddev config global --xdebug-ide-location=&lt;some_ip_address&gt;</code>.</li> <li>If you\u2019re using PhpStorm inside WSL2 (or perhaps other Linux configurations), go to Help \u2192 Edit Custom VM Options and add an additional line: <code>-Djava.net.preferIPv4Stack=true</code> This makes PhpStorm listen for Xdebug using IPv4; the Linux version of PhpStorm seems to default to using only IPv6.</li> <li>If you\u2019re on WSL2 using Docker Desktop, make sure that the <code>docker</code> command is the one provided by Docker Desktop. <code>ls -l $(which docker)</code> should show a link to <code>/mnt/wsl/docker-desktop...</code>. If you\u2019re on WSL2 using Docker installed inside WSL2, make sure that <code>ls -l $(which docker)</code> is not a link to <code>/mnt/wsl</code>.</li> <li>You can run <code>export DDEV_DEBUG=true</code> and <code>ddev start</code> to get information about how <code>host.docker.internal</code> is figured out, which can help in some situations especially with WSL2. (<code>host.docker.internal</code> inside the web container is where Xdebug thinks it should connect to your IDE. You can see what it is set to by running <code>ddev exec ping host.docker.internal</code>.)</li> </ul>"},{"location":"users/debugging-profiling/xdebug-profiling/","title":"Xdebug Profiling","text":"<p>Although DDEV has more sophisticated profiling capabilities with xhprof and Blackfire, it also has built-in support for Xdebug profiling.</p>"},{"location":"users/debugging-profiling/xdebug-profiling/#basic-usage","title":"Basic usage","text":"<ul> <li>Create the directory <code>.ddev/xdebug</code>, which is where the output files will be dumped.</li> <li> <p>Switch Xdebug to profiling mode by adding this in <code>.ddev/php/xdebug.ini</code>:</p> <pre><code>xdebug.mode=profile\nxdebug.start_with_request=yes\nxdebug.output_dir=/var/www/html/.ddev/xdebug\nxdebug.profiler_output_name=trace.%c%p%r%u.out\n</code></pre> </li> <li> <p>Enable Xdebug with <code>ddev xdebug on</code>.</p> </li> <li>Make an HTTP request to the DDEV project and the profile will be located in <code>.ddev/xdebug</code> directory.</li> <li>Analyze it with any call graph viewer, for example kcachegrind.</li> <li>When you\u2019re done, execute <code>ddev xdebug off</code> to avoid generating unneeded profile files.</li> <li>You can also toggle Xdebug on and off using <code>ddev xdebug toggle</code>.</li> </ul>"},{"location":"users/debugging-profiling/xdebug-profiling/#information-links","title":"Information Links","text":"<ul> <li>Xdebug profiling docs</li> <li>kcachegrind</li> </ul>"},{"location":"users/debugging-profiling/xhprof-profiling/","title":"xhprof Profiling","text":"<p>DDEV has built-in support for xhprof. The official PECL xhprof extension only supports PHP &gt;=7.x.</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#basic-xhprof-usage","title":"Basic xhprof Usage","text":"<ul> <li>Enable xhprof with <code>ddev xhprof on</code> (or <code>ddev xhprof</code> or <code>ddev xhprof enable</code>) and check its status with <code>ddev xhprof status</code>.</li> <li><code>ddev xhprof on</code> will show you the URL you can use to see the xhprof analysis, <code>https://&lt;projectname&gt;.ddev.site/xhprof</code> shows recent runs. (It\u2019s often useful to keep a tab or window open with this URL and refresh as needed.)</li> <li>Use a web browser or other technique to visit a page whose performance you want to study. To eliminate first-time cache-building issues, you may want to hit it twice.</li> <li>Visit one of the links provided by <code>ddev xhprof on</code> and study the results.</li> <li>On the profiler output page, you can drill down to the function that you want to study, or use the graphical \u201cView Full Callgraph\u201d link. Click the column headers to sort by number of runs and inclusive or exclusive wall time, then drill down into the function you want to study and do the same.</li> <li>The runs are erased on <code>ddev restart</code>.</li> <li>If you\u2019re using Apache with a custom <code>.ddev/apache/apache-site.conf</code>, you\u2019ll need to make sure it includes <code>Alias \"/xhprof\" \"/var/xhprof/xhprof_html\"</code> from DDEV\u2019s default apache-site.conf.</li> </ul> <p>For a tutorial on how to study the various xhprof reports, see the section \u201cHow to use XHPROF UI\u201d in A Guide to Profiling with XHPROF. It takes a little time to get your eyes used to the reporting. (You don\u2019t need to do any of the installation described in that article!)</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#advanced-xhprof-configuration","title":"Advanced xhprof Configuration","text":"<p>You can change the contents of the <code>xhprof_prepend</code> function in <code>.ddev/xhprof/xhprof_prepend.php</code>.</p> <p>For example, you may want to add a link to the profile run to the bottom of the profiled web page. The provided <code>xhprof_prepend.php</code> has comments and a sample function to do that, which works with Drupal 7. If you change it, remove the <code>#ddev-generated</code> line from the top, and check it in (<code>git add -f .ddev/xhprof/xhprof_prepend.php</code>).</p> <p>Another example: you could exclude memory profiling so there are fewer columns to study. Change <code>xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);</code> to <code>xhprof_enable(XHPROF_FLAGS_CPU);</code> in <code>.ddev/xhprof/xhprof_prepend.php</code> and remove the <code>#ddev-generated</code> at the top of the file. See the docs on xhprof_enable().</p>"},{"location":"users/debugging-profiling/xhprof-profiling/#information-links","title":"Information Links","text":"<ul> <li>php.net xhprof</li> <li>Old facebook xhprof docs</li> <li>rfay screencast on xhprof and blackfire.io</li> <li>pecl.php.net docs</li> <li>Upstream GitHub repository <code>lonngxhinH/xhprof</code></li> </ul>"},{"location":"users/extend/additional-hostnames/","title":"Additional Project Hostnames","text":"<p>You can add hostnames to a project by editing its config file or using the <code>ddev config</code> command.</p> <p>Use the <code>additional_hostnames</code> array in <code>.ddev/config.yaml</code>:</p> <pre><code>name: mysite\n\nadditional_hostnames:\n  - \"extraname\"\n  - \"fr.mysite\"\n  - \"es.mysite\"\n  - \"it.mysite\"\n  - \"*.lotsofnames\"\n</code></pre> <p>This configuration would result in working hostnames of <code>mysite.ddev.site</code>, <code>extraname.ddev.site</code>, <code>fr.mysite.ddev.site</code>, <code>es.mysite.ddev.site</code>, and <code>it.mysite.ddev.site</code>, with full HTTP and HTTPS URLs for each.</p> <p>You could accomplish the same thing by running the <code>ddev config</code> command:</p> <pre><code>ddev config --additional-hostnames extraname,fr.mysite,es.mysite,it.mysite,*.lotsofnames\n</code></pre> <p>In addition, the wildcard <code>*.lotsofnames</code> will result in anything <code>*.lotsofnames.ddev.site</code> being recognized by the project. This works only if you\u2019re connected to the internet, using <code>ddev.site</code> for your top-level-domain, and using DNS for name lookups. (These are all the defaults.)</p> <p>Although we recommend extreme care with this feature, you can also provide <code>additional_fqdn</code> entries, which don\u2019t use the <code>.ddev.site</code> top-level domain. This feature populates your hosts file with entries which may hide the real DNS entries on the internet, causing way too much head-scratching.</p> <p>If you use a FQDN which is resolvable on the internet, you must use <code>use_dns_when_possible: false</code> or configure that with <code>ddev config --use-dns-when-possible=false</code>.</p> <pre><code>name: somename\n\nadditional_fqdns:\n- example.com\n- somesite.example.com\n- anothersite.example.com\n</code></pre> <p>This configuration would result in working FQDNs of <code>somename.ddev.site</code>, <code>example.com</code>, <code>somesite.example.com</code>, and <code>anothersite.example.com</code>.</p> <p>Don\u2019t use the same <code>additional_fqdns</code> or <code>additional_hostnames</code> in two different projects.</p> <p>If you see <code>ddev-router</code> status become unhealthy in <code>ddev list</code>, it\u2019s most often a result of trying to use conflicting FQDNs in more than one project. <code>example.com</code> can only be assigned to one project, or it will break <code>ddev-router</code>.</p> <p>May not work predictably everywhere.</p> <p>This may not work predictably on all systems. There are operating systems and machines where <code>/etc/hosts</code> may not be the first or only resolution technique, especially if the <code>additional_fqdn</code> you use is also in DNS.</p> <p>Don\u2019t override a real domain name!</p> <p>If you use an <code>additional_fqdn</code> that exists on the internet (like <code>www.google.com</code>), your hosts file will override access to the original (internet) site, and you\u2019ll be sad and confused that you can\u2019t get to it.</p>"},{"location":"users/extend/additional-services/","title":"Additional Service Configurations &amp; Add-ons","text":"<p>DDEV projects can be extended to provide additional add-ons, including services. You can define these add-ons using docker-compose files in the project\u2019s <code>.ddev</code> directory.</p> <p>Anyone can create their own services with a <code>.ddev/docker-compose.*.yaml</code> file, and a growing number of popular services are supported and tested, and can be installed using the <code>ddev get</code> command.</p> <p>Use <code>ddev get --list</code> to see available add-ons. To see all possible add-ons (not necessarily supported or tested), use <code>ddev get --list --all</code>.</p> <p>For example,</p> <pre><code>\u2192  ddev get --list\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ADD-ON                               \u2502 DESCRIPTION                                       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-adminer                    \u2502 Adminer service for DDEV*                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-beanstalkd                 \u2502 Beanstalkd for DDEV*                              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-browsersync                \u2502 Auto-refresh HTTPS page on changes with DDEV*     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-cron                       \u2502 Schedule commands to execute within DDEV*         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-drupal9-solr               \u2502 Drupal 9 Apache Solr installation for DDEV*       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-elasticsearch              \u2502 Elasticsearch add-on for DDEV*                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-memcached                  \u2502 Install Memcached as an extra service in DDEV*    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-mongo                      \u2502 MongoDB add-on for DDEV*                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-pdfreactor                 \u2502 PDFreactor service for DDEV*                      \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-platformsh                 \u2502 Add integration with Platform.sh hosting service* \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-proxy-support              \u2502 Support HTTP/HTTPS proxies with DDEV*             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-redis                      \u2502 Redis service for DDEV*                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-redis-commander            \u2502 Redis Commander for use with DDEV Redis service*  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-selenium-standalone-chrome \u2502 A DDEV service for running standalone Chrome*     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ddev/ddev-varnish                    \u2502 Varnish reverse proxy add-on for DDEV*            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nAdd-ons marked with '*' are official, maintained DDEV add-ons.\n</code></pre> <p>Tip</p> <p>If you need a service not provided here, see Defining an Additional Service with Docker Compose.</p> <p>Officially-supported add-ons:</p> <ul> <li>Adminer: <code>ddev get ddev/ddev-adminer</code>.</li> <li>Apache Solr for Drupal 9: <code>ddev get ddev/ddev-drupal9-solr</code>.</li> <li>Beanstalkd: <code>ddev get ddev/ddev-beanstalkd</code>.</li> <li>Browsersync: <code>ddev get ddev/ddev-browsersync</code>.</li> <li>cron: <code>ddev get ddev/ddev-cron</code>.</li> <li>Elasticsearch: <code>ddev get ddev/ddev-elasticsearch</code>.</li> <li>Memcached: <code>ddev get ddev/ddev-memcached</code>.</li> <li>MongoDB: <code>ddev get ddev/ddev-mongo</code>.</li> <li>PDFreactor: <code>ddev get ddev/ddev-pdfreactor</code></li> <li>Platform.sh: <code>ddev get ddev/ddev-platformsh</code></li> <li>Proxy Support: <code>ddev get ddev/ddev-proxy-support</code>.</li> <li>Redis Commander: <code>ddev get ddev/ddev-redis-commander</code>.</li> <li>Redis: <code>ddev get ddev/ddev-redis</code>.</li> <li>Selenium Standalone Chrome: <code>ddev get ddev/ddev-selenium-standalone-chrome</code>.</li> <li>Varnish: <code>ddev get ddev/ddev-varnish</code>.</li> </ul>","boost":2},{"location":"users/extend/additional-services/#viewing-and-removing-installed-add-ons","title":"Viewing and Removing Installed Add-Ons","text":"<p>Add-ons installed in DDEV v1.22+ are versioned and can be viewed by running <code>ddev get --installed</code>. You can remove an add-on by running <code>ddev get --remove &lt;addonname&gt;</code>. If you have add-ons that were installed before v1.22, re-add them with <code>ddev get &lt;addonname&gt;</code> and they will be versioned and available in <code>ddev get --installed</code>.</p>","boost":2},{"location":"users/extend/additional-services/#creating-an-additional-service-for-ddev-get","title":"Creating an Additional Service for <code>ddev get</code>","text":"<p>Anyone can create an add-on for <code>ddev get</code>. See this screencast and instructions in <code>ddev-addon-template</code>:</p> <ol> <li>Click \u201cUse this template\u201d on <code>ddev-addon-template</code>.</li> <li>Create a new repository.</li> <li>Test it and preferably make sure it has valid tests in <code>tests.bats</code>.</li> <li>When it\u2019s working and tested, create a release.</li> <li>Add the <code>ddev-get</code> label and a good short description to the GitHub repository.</li> <li>When you\u2019re ready for the add-on to become official, open an issue in the DDEV issue queue requesting upgrade to official. You\u2019ll be expected to maintain it, and subscribe to all activity and be responsive to questions.</li> </ol>","boost":2},{"location":"users/extend/additional-services/#sections-and-features-of-ddev-get-add-on-installyaml","title":"Sections and Features of ddev-get Add-On install.yaml","text":"<p>The <code>install.yaml</code> is a simple YAML file with a few main sections:</p> <ul> <li><code>pre_install_actions</code>: an array of Bash statements or scripts to be executed before <code>project_files</code> are installed. The actions are executed in the context of the target project\u2019s root directory.</li> <li><code>project_files</code>: an array of files or directories to be copied from the add-on into the target project\u2019s <code>.ddev</code> directory.</li> <li><code>global_files</code>: is an array of files or directories to be copied from the add-on into the target system\u2019s global <code>.ddev</code> directory (<code>~/.ddev/</code>).</li> <li><code>dependencies</code>: an array of add-ons that this add-on depends on.</li> <li><code>post_install_actions</code>: an array of Bash statements or scripts to be executed after <code>project_files</code> and <code>global_files</code> are installed. The actions are executed in the context of the target project\u2019s root directory.</li> <li><code>removal_actions</code>: an array of Bash statements or scripts to be executed when the add-on is being removed with <code>ddev get --remove</code>.</li> <li><code>yaml_read_files</code>: a map of <code>name: file</code> of YAML files to be read from the target project\u2019s root directory. The contents of these YAML files may be used as templated actions within <code>pre_install_actions</code> and <code>post_install_actions</code>.</li> </ul> <p>In any stanza of <code>pre_install_actions</code> and <code>post_install_actions</code> you can:</p> <ul> <li>Use <code>#ddev-nodisplay</code> on a line to suppress any output.</li> <li>Use <code>#ddev-description:&lt;some description of what stanza is doing&gt;</code> to instruct DDEV to output a description of the action it\u2019s taking.</li> </ul> <p>You can see a simple <code>install.yaml</code> in <code>ddev-addon-template</code>\u2019s <code>install.yaml</code>.</p>","boost":2},{"location":"users/extend/additional-services/#environment-variable-replacements","title":"Environment Variable Replacements","text":"<p>Simple environment variables will be replaced in <code>install.yaml</code> as part of filenames. This can include environment variables in the context where DDEV run, as well as the standard environment variables provided to custom host commands, like <code>DDEV_APPROOT</code>, <code>DDEV_DOCROOT</code>, etc. For example, if a file in <code>project_files</code> is listed as <code>somefile.${DDEV_PROJECT}.txt</code> with a project named <code>d10</code>, the file named <code>somefile.d10.txt</code> will be copied from the add-on into the project.</p>","boost":2},{"location":"users/extend/additional-services/#template-action-replacements-advanced","title":"Template Action Replacements (Advanced)","text":"<p>A number of additional replacements can be made using Go template replacement techniques, using the format <code>{{ .some-gotemplate-action }}</code>. These are mostly for use of YAML information pulled into <code>yaml_read_files</code>. A map of values from each YAML file is placed in a map headed by the name of the YAML file. For example, if a YAML file named <code>example_yaml.yaml</code>:</p> <pre><code>value1: xxx\n</code></pre> <p>is referenced using</p> <pre><code>yaml_read_files:\n  example: example_yaml.yaml\n</code></pre> <p>then <code>value1</code> can be used throughout the <code>install.yaml</code> as <code>{{ example.value1 }}</code> and it will be replaced with the value <code>xxx</code>.</p> <p>More exotic template-based replacements can be seen in an advanced test example.</p> <p>Go templating resources:</p> <ul> <li>Official Go template docs</li> <li>Lots of intro to Golang templates</li> <li>masterminds/sprig extra functions.</li> </ul>","boost":2},{"location":"users/extend/additional-services/#additional-services-in-ddev-contrib","title":"Additional services in ddev-contrib","text":"<p>Commonly-used services are being migrated from the ddev-contrib repository to individual, tested, supported add-on repositories, but the repository still has a wealth of additional examples and instructions:</p> <ul> <li>Old PHP Versions to Run Old Sites: See Old PHP Versions</li> <li>RabbitMQ: See RabbitMQ</li> <li>TYPO3 Solr Integration: See TYPO3 Solr</li> </ul> <p>While we welcome requests to integrate other services at ddev-contrib, we encourage creating a supported add-on that\u2019s more beneficial to the community.</p>","boost":2},{"location":"users/extend/custom-commands/","title":"Custom Commands","text":"<p>Custom commands can easily be added to DDEV, to be executed on the host or in containers.</p> <p>This involves adding a Bash script to the project in <code>.ddev/commands/host</code>, a specific container in <code>.ddev/commands/&lt;containername&gt;</code>, or globally in <code>~/.ddev/commands</code>.</p> <p>Example commands in <code>ddev/commands/*/*.example</code> can be copied, moved, or symlinked.</p> <p>For example, .ddev/commands/host/mysqlworkbench.example can be used to add a <code>ddev mysqlworkbench</code> command. Rename it from <code>mysqlworkbench.example</code> to <code>mysqlworkbench</code>. If you\u2019re on macOS or Linux (or some configurations of Windows) you can <code>cd .ddev/commands/host &amp;&amp; ln -s mysqlworkbench.example mysqlworkbench</code>.</p> <p>The <code>ddev mysql</code> runs the <code>mysql</code> client inside the <code>db</code> container command using this technique. See the <code>ddev mysql</code> command.</p>"},{"location":"users/extend/custom-commands/#notes-for-all-command-types","title":"Notes for All Command Types","text":"<ul> <li>The command filename is not what determines the name of the command. That comes from the \u201cUsage\u201d doc line (<code>## Usage: commandname</code>).</li> <li>To confirm that your custom command is available, run <code>ddev -h</code> and look for it in the list.</li> </ul>"},{"location":"users/extend/custom-commands/#host-commands","title":"Host Commands","text":"<p>To provide host commands, place a Bash script in <code>.ddev/commands/host</code>. For example, a PhpStorm launcher to make the <code>ddev phpstorm</code> command might go in <code>.ddev/commands/host/phpstorm</code> with these contents. The <code>OSTypes</code> and <code>HostBinaryExists</code> annotations are optional, but are useful to prevent the command from showing up if it\u2019s not useful to the user.</p> <pre><code>#!/usr/bin/env bash\n\n## Description: Open PhpStorm with the current project\n## Usage: phpstorm\n## Example: \"ddev phpstorm\"\n## OSTypes: darwin\n## HostBinaryExists: \"/Applications/PhpStorm.app\"\n\n# Example is macOS-specific, but easy to adapt to any OS\nopen -a PhpStorm.app ${DDEV_APPROOT}\n</code></pre>"},{"location":"users/extend/custom-commands/#container-commands","title":"Container Commands","text":"<p>To provide a command which will execute in a container, add a Bash script to <code>.ddev/commands/&lt;container_name&gt;</code>, for example, <code>.ddev/commands/web/mycommand</code>. The Bash script will be executed inside the named container. For example, see the several standard DDEV script-based web container commands.</p> <p>You can run commands in custom containers as well as standard DDEV <code>web</code> and <code>db</code> containers. Use the service name, like <code>.ddev/commands/solr/&lt;command&gt;</code>. The only catch with a custom container is that your service must mount <code>/mnt/ddev_config</code> like the <code>web</code> and <code>db</code> containers do; the <code>volumes</code> section of <code>docker-compose.&lt;servicename&gt;.yaml</code> needs:</p> <pre><code>    volumes:\n    - \".:/mnt/ddev_config\"\n</code></pre> <p>For example, to add a <code>solrtail</code> command that runs in a Solr service, add <code>.ddev/commands/solr/solrtail</code> with:</p> <pre><code>#!/bin/bash\n\n## Description: Tail the main solr log\n## Usage: solrtail\n## Example: ddev solrtail\n\ntail -f /opt/solr/server/logs/solr.log\n</code></pre>"},{"location":"users/extend/custom-commands/#global-commands","title":"Global Commands","text":"<p>Global commands work exactly the same as project-level commands, but they need to go in your global <code>.ddev</code> directory. Your home directory has a <code>.ddev/commands</code> in it, where you can add host, web, or db commands.</p> <p>Changes to the command files in the global <code>.ddev</code> directory need a <code>ddev start</code> for changes to be picked up by a project, as the global commands are copied to the project on start.</p>"},{"location":"users/extend/custom-commands/#shell-command-examples","title":"Shell Command Examples","text":"<p>There are many examples of global and project-level custom/shell commands that ship with DDEV you can adapt for your own use. They can be found in your <code>~/.ddev/commands/*</code> directories and in your project\u2019s <code>.ddev/commands/*</code> directories. There you\u2019ll see how to provide usage, examples, and how to use arguments provided to the commands. For example, the <code>xdebug</code> command shows simple argument processing and the launch command demonstrates flag processing.</p>"},{"location":"users/extend/custom-commands/#environment-variables-provided","title":"Environment Variables Provided","text":"<p>A number of environment variables are provided to these command scripts. These are generally supported, but please avoid using undocumented environment variables. Useful variables for host scripts are:</p> <ul> <li><code>DDEV_APPROOT</code>: File system location of the project on the host</li> <li><code>DDEV_DATABASE</code>: Database in use, in format <code>type:version</code> (example: <code>mariadb:10.5</code>)</li> <li><code>DDEV_DATABASE_FAMILY</code>: Database \u201cfamily\u201d (example: <code>mysql</code>, <code>postgres</code>), useful for database connection URLs</li> <li><code>DDEV_DOCROOT</code>: Relative path from approot to docroot</li> <li><code>DDEV_GID</code>: The GID the web container runs as</li> <li><code>DDEV_HOSTNAME</code>: Comma-separated list of FQDN hostnames</li> <li><code>DDEV_HOST_DB_PORT</code>: Localhost port of the database server</li> <li><code>DDEV_HOST_HTTPS_PORT</code>: Localhost port for HTTPS on web server</li> <li><code>DDEV_HOST_MAILPIT_PORT</code>: Localhost port for Mailpit</li> <li><code>DDEV_HOST_WEBSERVER_PORT</code>: Localhost port of the web server</li> <li><code>DDEV_MAILPIT_HTTP_PORT</code>: Router Mailpit port for HTTP</li> <li><code>DDEV_MAILPIT_HTTPS_PORT</code>: Router Mailpit port for HTTPS</li> <li><code>DDEV_MUTAGEN_ENABLED</code>: <code>true</code> if Mutagen is enabled</li> <li><code>DDEV_PHP_VERSION</code>: Current PHP version</li> <li><code>DDEV_PRIMARY_URL</code>: Primary project URL</li> <li><code>DDEV_PROJECT</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_PROJECT_TYPE</code>: <code>drupal8</code>, <code>typo3</code>, <code>backdrop</code>, <code>wordpress</code>, etc.</li> <li><code>DDEV_ROUTER_HTTP_PORT</code>: Router port for HTTP</li> <li><code>DDEV_ROUTER_HTTPS_PORT</code>: Router port for HTTPS</li> <li><code>DDEV_SITENAME</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_TLD</code>: Top-level project domain, like <code>ddev.site</code></li> <li><code>DDEV_UID</code>: The UID the web container runs as</li> <li><code>DDEV_WEBSERVER_TYPE</code>: <code>nginx-fpm</code>, <code>apache-fpm</code>, or <code>nginx-gunicorn</code></li> <li><code>GOARCH</code>: Architecture (<code>arm64</code>, <code>amd64</code>)</li> <li><code>GOOS</code>: Operating system (<code>windows</code>, <code>darwin</code>, <code>linux</code>)</li> </ul> <p>Useful variables for container scripts are:</p> <ul> <li><code>DDEV_DOCROOT</code>: Relative path from approot to docroot</li> <li><code>DDEV_FILES_DIR</code>: Deprecated, first directory of user-uploaded files</li> <li><code>DDEV_FILES_DIRS</code>: Comma-separated list of directories of user-uploaded files</li> <li><code>DDEV_HOSTNAME</code>: Comma-separated list of FQDN hostnames</li> <li><code>DDEV_MUTAGEN_ENABLED</code>: <code>true</code> if Mutagen is enabled</li> <li><code>DDEV_PHP_VERSION</code>: Current PHP version</li> <li><code>DDEV_PRIMARY_URL</code>: Primary URL for the project</li> <li><code>DDEV_PROJECT</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_PROJECT_TYPE</code>: <code>drupal8</code>, <code>typo3</code>, <code>backdrop</code>, <code>wordpress</code>, etc.</li> <li><code>DDEV_ROUTER_HTTP_PORT</code>: Router port for HTTP</li> <li><code>DDEV_ROUTER_HTTPS_PORT</code>: Router port for HTTPS</li> <li><code>DDEV_SITENAME</code>: Project name, like <code>d8composer</code></li> <li><code>DDEV_TLD</code>: Top-level project domain, like <code>ddev.site</code></li> <li><code>DDEV_WEBSERVER_TYPE</code>: <code>nginx-fpm</code>, <code>apache-fpm</code>, or <code>nginx-gunicorn</code></li> <li><code>IS_DDEV_PROJECT</code>: If <code>true</code>, PHP is running under DDEV</li> </ul>"},{"location":"users/extend/custom-commands/#annotations-supported","title":"Annotations Supported","text":"<p>Custom commands support various annotations in the header for providing additional information to the user.</p>"},{"location":"users/extend/custom-commands/#description-annotation","title":"\u201cDescription\u201d Annotation","text":"<p><code>Description</code> should briefly describe the command in its help message.</p> <p>Usage: <code>## Description: &lt;command-description&gt;</code></p> <p>Example: <code>## Description: my great custom command</code></p>"},{"location":"users/extend/custom-commands/#usage-annotation","title":"\u201cUsage\u201d Annotation","text":"<p><code>Usage</code> should explain how to use the command in its help message.</p> <p>Usage: <code>## Usage: &lt;command-usage&gt;</code></p> <p>Example: <code>## Usage: commandname [flags] [args]</code></p>"},{"location":"users/extend/custom-commands/#example-annotation","title":"\u201cExample\u201d Annotation","text":"<p><code>Example</code> should demonstrate how the command might be used. Use <code>\\n</code> to force a line break.</p> <p>Usage: <code>## Example: &lt;command-example&gt;</code></p> <p>Example: <code>## Example: commandname\\ncommandname -h</code></p>"},{"location":"users/extend/custom-commands/#flags-annotation","title":"\u201cFlags\u201d Annotation","text":"<p><code>Flags</code> should explain any available flags, including their shorthand when relevant, for the help message. It has to be encoded according the following definition:</p> <p>If no flags are specified, the command will have its flags parsing disabled. Global flags like <code>--help</code> will not work unless the command supports them.</p> <p>You can still do <code>ddev help &lt;command&gt;</code> to see the command\u2019s provided usage help.</p> <p>Usage: <code>## Flags: &lt;json-definition&gt;</code></p> <p>This is the minimal usage of a flags definition:</p> <p>Example: <code>## Flags: [{\"Name\":\"flag\",\"Usage\":\"sets the flag option\"}]</code></p> <p>Output:</p> <pre><code>Flags:\n  -h, --help          help for ddev\n  -f, --flag          sets the flag option\n</code></pre> <p>Multiple flags are separated by a comma:</p> <p>Example: <code>## Flags: [{\"Name\":\"flag1\",\"Shorthand\":\"f\",\"Usage\":\"flag1 usage\"},{\"Name\":\"flag2\",\"Usage\":\"flag2 usage\"}]</code></p> <p>Output:</p> <pre><code>Flags:\n  -h, --help          help for ddev\n  -f, --flag1         flag1 usage\n      --flag2         flag2 usage\n</code></pre> <p>The following fields can be used for a flag definition:</p> <ul> <li><code>Name</code>: the name as it appears on command line</li> <li><code>Shorthand</code>: one-letter abbreviated flag</li> <li><code>Usage</code>: help message</li> <li><code>Type</code>: possible values are <code>bool</code>, <code>string</code>, <code>int</code>, <code>uint</code> (defaults to <code>bool</code>)</li> <li><code>DefValue</code>: default value for usage message</li> <li><code>NoOptDefVal</code>: default value, if the flag is on the command line without any options</li> <li><code>Annotations</code>: used by cobra.Command Bash autocomplete code (see https://github.com/spf13/cobra/blob/main/site/content/completions/bash.md)</li> </ul>"},{"location":"users/extend/custom-commands/#projecttypes-annotation","title":"\u201cProjectTypes\u201d Annotation","text":"<p>If your command should only be visible for a specific project type, <code>ProjectTypes</code> will allow you to define the supported types. This is especially useful for global custom commands. See Quickstart for many CMSes for more information about the supported project types. Multiple types are separated by a comma.</p> <p>Usage: <code>## ProjectTypes: &lt;list-of-project-types&gt;</code></p> <p>Example: <code>## ProjectTypes: drupal7,drupal8,drupal9,backdrop</code></p>"},{"location":"users/extend/custom-commands/#ostypes-annotation-host-commands-only","title":"\u201cOSTypes\u201d Annotation (Host Commands Only)","text":"<p>If your host command should only run on one or more operating systems, add the <code>OSTypes</code> annotation. Multiple types are separated by a comma. Valid types are:</p> <ul> <li><code>darwin</code> for macOS</li> <li><code>windows</code> for Windows</li> <li><code>linux</code> for Linux</li> </ul> <p>Usage: <code>## OSTypes: &lt;list-of-os-types&gt;</code></p> <p>Example: <code>## OSTypes: darwin,linux</code></p>"},{"location":"users/extend/custom-commands/#hostbinaryexists-annotation-host-commands-only","title":"\u201cHostBinaryExists\u201d Annotation (Host Commands Only)","text":"<p>If your host command should only run if a particular file exists, add the <code>HostBinaryExists</code> annotation.</p> <p>Usage: <code>## HostBinaryExists: &lt;path/to/file&gt;</code></p> <p>Example: <code>## HostBinaryExists: /Applications/Sequel ace.app</code></p>"},{"location":"users/extend/custom-commands/#dbtypes-annotation","title":"\u201cDBTypes\u201d Annotation","text":"<p>If your command should only be available for a particular database type, add the <code>DBTypes</code> annotation. Multiple types are separated by a comma. Valid types the available database types.</p> <p>Usage: <code>## DBTypes: &lt;type&gt;</code></p> <p>Example: <code>## DBTypes: postgres</code></p>"},{"location":"users/extend/custom-commands/#hostworkingdir-annotation-container-commands-only","title":"\u201cHostWorkingDir\u201d Annotation (Container Commands Only)","text":"<p>If your container command should run from the directory you are running the command in the host, add the <code>HostWorkingDir</code> annotation.</p> <p>Example: <code>## HostWorkingDir: true</code></p>"},{"location":"users/extend/custom-commands/#execraw-annotation-container-commands-only","title":"\u201cExecRaw\u201d Annotation (Container Commands Only)","text":"<p>Use <code>ExecRaw: true</code> to pass command arguments directly to the container as-is.</p> <p>For example, when <code>ExecRaw</code> is true, <code>ddev yarn --help</code> returns the help for <code>yarn</code>, not DDEV\u2019s help for the <code>ddev yarn</code> command.</p> <p>We recommend  using this annotation for all container commands. The default behavior is retained to avoid breaking existing commands.</p> <p>Example: <code>## ExecRaw: true</code></p>"},{"location":"users/extend/custom-commands/#known-windows-issues","title":"Known Windows Issues","text":""},{"location":"users/extend/custom-commands/#line-endings","title":"Line Endings","text":"<p>If you\u2019re editing a custom command to be run in a container, it must have LF line endings and not traditional Windows CRLF line endings. Remember that a custom command in a container is a script that must execute in a Linux environment.</p>"},{"location":"users/extend/custom-commands/#bash","title":"Bash","text":"<p>Commands can\u2019t be executed if DDEV can\u2019t find <code>bash</code>. If you\u2019re running inside Git Bash in most any terminal, this shouldn\u2019t be an issue, and DDEV should be able to find <code>git-bash</code> if it\u2019s in <code>C:\\Program Files\\Git\\bin</code> as well. But if neither of those is true, add the directory of <code>bash.exe</code> to your <code>PATH</code> environment variable.</p>"},{"location":"users/extend/custom-compose-files/","title":"Defining Additional Services with Docker Compose","text":""},{"location":"users/extend/custom-compose-files/#prerequisite","title":"Prerequisite","text":"<p>Much of DDEV\u2019s customization ability and extensibility comes from leveraging features and functionality provided by Docker and Docker Compose. Some working knowledge of these tools is required in order to customize or extend the environment DDEV provides.</p> <p>There are many examples of custom docker-compose files available on ddev-contrib.</p>"},{"location":"users/extend/custom-compose-files/#background","title":"Background","text":"<p>Under the hood, DDEV uses a private copy of docker-compose to define and run the multiple containers that make up the local environment for a project. docker-compose supports defining multiple compose files to facilitate sharing Compose configurations between files and projects, and DDEV is designed to leverage this ability.</p> <p>To add custom configuration or additional services to your project, create docker-compose files in the <code>.ddev</code> directory. DDEV will process any files with the <code>docker-compose.[servicename].yaml</code> naming convention and include them in executing docker-compose functionality. You can optionally create a <code>docker-compose.override.yaml</code> to override any configurations from the main <code>.ddev/.ddev-docker-compose-base.yaml</code> or any additional docker-compose files added to your project.</p> <p>Don\u2019t modify <code>.ddev-docker-compose-base.yaml</code> or <code>.ddev-docker-compose-full.yaml</code>!</p> <p>The main docker-compose file is <code>.ddev/.ddev-docker-compose-base.yaml</code>, reserved exclusively for DDEV\u2019s use. It\u2019s overwritten every time a project is started, so any edits will be lost. If you need to override configuration provided by <code>.ddev/.ddev-docker-compose-base.yaml</code>, use an additional <code>docker-compose.&lt;whatever&gt;.yaml</code> file instead.</p>"},{"location":"users/extend/custom-compose-files/#docker-composeyaml-examples","title":"<code>docker-compose.*.yaml</code> Examples","text":"<ul> <li>Expose an additional port 9999 to host port 9999, in a file perhaps called <code>docker-compose.ports.yaml</code>:</li> </ul> <pre><code>services:\n  someservice:\n    ports:\n    - \"9999:9999\"\n</code></pre> <p>That approach usually isn\u2019t sustainable because two projects might want to use the same port, so we expose the additional port to the Docker network and then use <code>ddev-router</code> to bind it to the host. This works only for services with an HTTP API, but results in having both HTTP and HTTPS ports (9998 and 9999).</p> <pre><code>services:\n  someservice:\n    container_name: \"ddev-${DDEV_SITENAME}-someservice\"\n    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n    expose:\n      - \"9999\"\n    environment:\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n      - HTTP_EXPOSE=9998:9999\n      - HTTPS_EXPOSE=9999:9999\n</code></pre>"},{"location":"users/extend/custom-compose-files/#confirming-docker-compose-configurations","title":"Confirming docker-compose Configurations","text":"<p>To better understand how DDEV parses your custom docker-compose files, run <code>ddev debug compose-config</code>. This prints the final, DDEV-generated docker-compose configuration when starting your project.</p>"},{"location":"users/extend/custom-compose-files/#conventions-for-defining-additional-services","title":"Conventions for Defining Additional Services","text":"<p>When defining additional services for your project, we recommended following these conventions to ensure DDEV handles your service the same way DDEV handles default services.</p> <ul> <li>The container name should be <code>ddev-${DDEV_SITENAME}-&lt;servicename&gt;</code>.</li> <li> <p>Provide containers with required labels:</p> <pre><code>    labels:\n      com.ddev.site-name: ${DDEV_SITENAME}\n      com.ddev.approot: ${DDEV_APPROOT}\n</code></pre> </li> <li> <p>Exposing ports for service: you can expose the port for a service to be accessible as <code>projectname.ddev.site:portNum</code> while your project is running. This is achieved by the following configurations for the container(s) being added:</p> <ul> <li> <p>Define only the internal port in the <code>expose</code> section for docker-compose; use <code>ports:</code> only if the port will be bound directly to <code>localhost</code>, as may be required for non-HTTP services.</p> </li> <li> <p>To expose a web interface to be accessible over HTTP, define the following environment variables in the <code>environment</code> section for docker-compose:</p> <ul> <li><code>VIRTUAL_HOST=$DDEV_HOSTNAME</code></li> <li><code>HTTP_EXPOSE=portNum</code> The <code>hostPort:containerPort</code> convention may be used here to expose a container\u2019s port to a different external port. To expose multiple ports for a single container, define the ports as comma-separated values.</li> <li><code>HTTPS_EXPOSE=&lt;exposedPortNumber&gt;:portNum</code> This will expose an HTTPS interface on <code>&lt;exposedPortNumber&gt;</code> to the host (and to the <code>web</code> container) as <code>https://&lt;project&gt;.ddev.site:exposedPortNumber</code>. To expose multiple ports for a single container, use comma-separated definitions, as in <code>HTTPS_EXPOSE=9998:80,9999:81</code>, which would expose HTTP port 80 from the container as <code>https://&lt;project&gt;.ddev.site:9998</code> and HTTP port 81 from the container as <code>https://&lt;project&gt;.ddev.site:9999</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"users/extend/custom-compose-files/#interacting-with-additional-services","title":"Interacting with Additional Services","text":"<p><code>ddev exec</code>, <code>ddev ssh</code>, and <code>ddev logs</code> interact with containers on an individual basis.</p> <p>By default, these commands interact with the <code>web</code> container for a project. All of these commands, however, provide a <code>--service</code> or <code>-s</code> flag allowing you to specify the service name of the container to interact with. For example, if you added a service to provide Apache Solr, and the service was named <code>solr</code>, you would be able to run <code>ddev logs --service solr</code> to retrieve the Solr container\u2019s logs.</p>"},{"location":"users/extend/custom-compose-files/#third-party-services-may-need-to-trust-ddev-webserver","title":"Third Party Services May Need To Trust <code>ddev-webserver</code>","text":"<p>Sometimes a third-party service (<code>docker-compose.*.yaml</code>) may need to consume content from the <code>ddev-webserver</code> container. A PDF generator like Gotenberg, for example, might need to read in-container images or text in order to create a PDF. Or a testing service may need to read data in order to support tests.</p> <p>A third-party service is not configured to trust DDEV\u2019s <code>mkcert</code> certificate authority by default, so in cases like this you have to either use HTTP between the two containers, or make the third-party service ignore or trust the certificate authority.</p> <p>Using plain HTTP between the containers is the simplest technique. For example, the <code>ddev-selenium-standalone-chrome</code> service must consume content, so it conducts interactions with the <code>ddev-webserver</code> by accessing <code>http://web</code>. In this case, the <code>selenium-chrome</code> container accesses the <code>web</code> container via HTTP instead of HTTPS.</p> <p>A second technique is to tell the third-party service to ignore HTTPS/TLS errors. For example, if the third-party service uses cURL, it could use <code>curl --insecure https://web</code> or <code>curl --insecure https://&lt;project&gt;.ddev.site</code>.</p> <p>A third and more complex approach is to make the third-party container actually trust the self-signed certificate that the <code>ddev-webserver</code> container is using. This can be done in many cases using a custom Dockerfile and some extra configuration in the <code>ddev-config.*.yaml</code>. An example would be:</p> <pre><code>services:\n  example:\n    container_name: ddev-${DDEV_SITENAME}-example\n    command: \"bash -c 'mkcert -install &amp;&amp; original-start-command-from-image'\"\n    # Add a build stage so we can add `mkcert`, etc.\n    # The Dockerfile for the build stage goes in the `.ddev/example directory` here\n    build:\n      context: example\n    environment:\n      - HTTP_EXPOSE=3001:3000\n      - HTTPS_EXPOSE=3000:3000\n      - VIRTUAL_HOST=$DDEV_HOSTNAME\n    # Adding external_links allows connections to `https://example.ddev.site`,\n    # which then can go through `ddev-router`\n    external_links:\n      - ddev-router:${DDEV_SITENAME}.${DDEV_TLD}\n    labels:\n      com.ddev.approot: $DDEV_APPROOT\n      com.ddev.site-name: ${DDEV_SITENAME}\n    restart: 'no'\n    volumes:\n      - .:/mnt/ddev_config\n      # `ddev-global-cache` gets mounted so we have the CAROOT\n      # This is required so that the CA is available for `mkcert` to install\n      - ddev-global-cache:/mnt/ddev-global-cache\n</code></pre> <pre><code>FROM example/example\n\n# CAROOT for `mkcert` to use, has the CA config\nENV CAROOT=/mnt/ddev-global-cache/mkcert\n\n# If the image build does not run as the default `root` user,\n# temporarily change to root. If the image already has the default setup\n# where it builds as `root`, then\n# there is no need to change user here.\nUSER root\n# Give the `example` user full `sudo` privileges\nRUN echo \"example ALL=(ALL) NOPASSWD: ALL\" &gt;&gt; /etc/sudoers.d/example &amp;&amp; chmod 0440 /etc/sudoers.d/example\n# Install the correct architecture binary of `mkcert`\nRUN export TARGETPLATFORM=linux/$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/') &amp;&amp; mkdir -p /usr/local/bin &amp;&amp; curl --fail -JL -s -o /usr/local/bin/mkcert \"https://dl.filippo.io/mkcert/latest?for=${TARGETPLATFORM}\"\nRUN chmod +x /usr/local/bin/mkcert\nUSER original_user\n</code></pre>"},{"location":"users/extend/custom-tls-certificates/","title":"Custom TLS Certificates","text":"<p>It\u2019s possible to use \u201creal\u201d TLS certificates issued by a CA rather than the local-development-oriented <code>mkcert</code> command.</p> <ol> <li>Obtain a certificate and key from Let\u2019s Encrypt or another source.</li> <li>Install the certificate and key in your project\u2019s <code>.ddev/custom_certs</code> directory.</li> <li>If you\u2019re using the default Traefik (<code>router: traefik</code>), the files should be named <code>&lt;projectname&gt;.crt</code> and <code>&lt;projectname&gt;.key</code>, for example <code>exampleproj.crt</code> and <code>exampleproj.key</code>.</li> <li>If you\u2019re using the legacy nginx-proxy router (<code>router: nginx-proxy</code>) , each certificate must be named with the pattern <code>fqdn.crt</code> and <code>fqdn.key</code>. A project named <code>example.ddev.site</code>, for example, would need <code>example.ddev.site.crt</code> and <code>example.ddev.site.key</code> in <code>.ddev/custom_certs</code>. There must be one cert-set for each FQDN handled by the project.</li> <li>Run <code>ddev start</code> and verify using a browser that you\u2019re using the right certificate.</li> </ol>"},{"location":"users/extend/customization-extendibility/","title":"Extending and Customizing Environments","text":"<p>DDEV provides several ways to customize and extend project environments.</p>","boost":2},{"location":"users/extend/customization-extendibility/#changing-php-version","title":"Changing PHP Version","text":"<p>The project\u2019s <code>.ddev/config.yaml</code> file defines the PHP version to use. The <code>php_version</code> can be changed to <code>5.6</code>, <code>7.0</code>, <code>7.1</code>, <code>7.2</code>,  <code>7.3</code>, <code>7.4</code>, <code>8.0</code>, <code>8.1</code>, <code>8.2</code>, or <code>8.3</code>. The current default is <code>8.1</code>.</p>","boost":2},{"location":"users/extend/customization-extendibility/#older-versions-of-php","title":"Older Versions of PHP","text":"<p>Support for older versions of PHP is available on ddev-contrib via custom docker-compose files.</p>","boost":2},{"location":"users/extend/customization-extendibility/#changing-web-server-type","title":"Changing Web Server Type","text":"<p>DDEV supports nginx with php-fpm by default (<code>nginx-fpm</code>), and Apache with php-fpm (<code>apache-fpm</code>). You can change this with the <code>webserver_type</code> config option, or using the <code>ddev config</code> command with the <code>--webserver-type</code> flag.</p>","boost":2},{"location":"users/extend/customization-extendibility/#adding-services-to-a-project","title":"Adding Services to a Project","text":"<p>DDEV provides everything you need to build a modern PHP application on your local machine. More complex web applications, however, often require integration with services beyond the usual requirements of a web and database server\u2014maybe Apache Solr, Redis, Varnish, or many others. While DDEV likely won\u2019t ever provide all of these additional services out of the box, it\u2019s designed to provide simple ways to customize the environment and meet your project\u2019s needs without reinventing the wheel.</p> <p>A collection of vetted service configurations is available in the Additional Services Documentation.</p> <p>If you need to create a service configuration for your project, see Defining Additional Services with Docker Compose.</p>","boost":2},{"location":"users/extend/customization-extendibility/#using-nodejs-with-ddev","title":"Using Node.js with DDEV","text":"<p>There are many ways to deploy Node.js in any project, so DDEV tries to let you set up any possibility you can come up with.</p> <ul> <li>You can choose any Node.js version you want (including minor and older versions) in <code>.ddev/config.yaml</code> with <code>nodejs_version</code>.</li> <li><code>ddev nvm</code> gives you the full capabilities of Node Version Manager.</li> <li><code>ddev npm</code> and <code>ddev yarn</code> provide shortcuts to the <code>npm</code> and <code>yarn</code> commands inside the container, and their caches are persistent.</li> <li>You can run Node.js daemons using <code>web_extra_daemons</code>.</li> <li>You can expose Node.js ports via <code>ddev-router</code> by using <code>web_extra_exposed_ports</code>.</li> <li>You can manually run Node.js scripts using <code>ddev exec &lt;script&gt;</code> or <code>ddev exec nodejs &lt;script&gt;</code>.</li> </ul> <p>Please share your techniques!</p> <p>There are several ways to share your favorite Node.js tips and techniques. Best are ddev-get add-ons, Stack Overflow, and ddev-contrib.</p>","boost":2},{"location":"users/extend/customization-extendibility/#running-extra-daemons-in-the-web-container","title":"Running Extra Daemons in the Web Container","text":"<p>There are several ways to run processes inside the <code>web</code> container.</p> <ol> <li>Manually execute them as needed, with <code>ddev exec</code>, for example.</li> <li>Run them with a <code>post-start</code> hook.</li> <li>Run them automatically using <code>web_extra_daemons</code>.</li> </ol>","boost":2},{"location":"users/extend/customization-extendibility/#running-extra-daemons-with-post-start-hook","title":"Running Extra Daemons with <code>post-start</code> Hook","text":"<p>Daemons can be run with a <code>post-start</code> <code>exec</code> hook or automatically started using <code>supervisord</code>.</p> <p>A simple <code>post-start</code> exec hook in <code>.ddev/config.yaml</code> might look like:</p> <pre><code>hooks:\n  post-start:\n    - exec: \"nohup php --docroot=/var/www/html/something -S 0.0.0.0:6666 &amp;\"\n</code></pre>","boost":2},{"location":"users/extend/customization-extendibility/#running-extra-daemons-using-web_extra_daemons","title":"Running Extra Daemons Using <code>web_extra_daemons</code>","text":"<p>If you need extra daemons to start up automatically inside the web container, you can easily add them using <code>web_extra_daemons</code> in <code>.ddev/config.yaml</code>.</p> <p>You might be running Node.js daemons that serve a particular purpose, like <code>browsersync</code>, or more general daemons like a <code>cron</code> daemon.</p> <p>For example, you could use this configuration to run two instances of the Node.js HTTP server for different directories:</p> <pre><code>web_extra_daemons:\n  - name: \"http-1\"\n    command: \"/var/www/html/node_modules/.bin/http-server -p 3000\"\n    directory: /var/www/html\n  - name: \"http-2\"\n    command: \"/var/www/html/node_modules/.bin/http-server /var/www/html/sub -p 3000\"\n    directory: /var/www/html\n</code></pre> <ul> <li><code>directory</code> should be the absolute path inside the container to the directory where the daemon should run.</li> <li><code>command</code> is best as a simple binary with its arguments, but Bash features like <code>cd</code> or <code>&amp;&amp;</code> work. If the program to be run is not in the <code>ddev-webserver</code> <code>$PATH</code> then it should have the absolute in-container path to the program to be run, like <code>/var/www/html/node_modules/.bin/http-server</code>.</li> <li><code>web_extra_daemons</code> is a shortcut for adding a configuration to <code>supervisord</code>, which organizes daemons inside the web container. If the default settings are inadequate for your use, you can write a complete config file for your daemon.</li> <li>Your daemon is expected to run in the foreground, not to daemonize itself, <code>supervisord</code> will take care of that.</li> <li>To see the results of the attempt to start your daemon, see <code>ddev logs</code> or <code>docker logs ddev-&lt;project&gt;-web</code>.</li> </ul>","boost":2},{"location":"users/extend/customization-extendibility/#exposing-extra-ports-via-ddev-router","title":"Exposing Extra Ports via <code>ddev-router</code>","text":"<p>If your <code>web</code> container has additional HTTP servers running inside it on different ports, those can be exposed using <code>web_extra_exposed_ports</code> in <code>.ddev/config.yaml</code>. For example, this configuration would expose a <code>node-vite</code> HTTP server running on port 3000 inside the <code>web</code> container, via <code>ddev-router</code>, to ports 9998 (HTTP) and 9999 (HTTPS), so it could be accessed via <code>https://&lt;project&gt;.ddev.site:9999</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: node-vite\n    container_port: 3000\n    http_port: 9998\n    https_port: 9999\n</code></pre> <p>The configuration below would expose a Node.js server running in the <code>web</code> container on port 3000 as <code>https://&lt;project&gt;.ddev.site:3000</code> and a \u201csomething\u201d server running in the web container on port 4000 as <code>https://&lt;project&gt;.ddev.site:4000</code>:</p> <pre><code>web_extra_exposed_ports:\n  - name: nodejs\n    container_port: 3000\n    http_port: 2999\n    https_port: 3000\n  - name: something\n    container_port: 4000\n    https_port: 4000\n    http_port: 3999\n</code></pre> <p>Fill in all three fields even if you don\u2019t intend to use the <code>https_port</code>!</p> <p>If you don\u2019t add <code>https_port</code>, then it defaults to <code>0</code> and <code>ddev-router</code> will fail to start.</p>","boost":2},{"location":"users/extend/customization-extendibility/#exposing-extra-non-http-ports","title":"Exposing Extra Non-HTTP Ports","text":"<p>While the <code>web_extra_exposed_ports</code> gracefully handles running multiple DDEV projects at the same time, it can\u2019t forward ports for non-HTTP TCP or UDP daemons. Instead, ports can be added in a <code>docker-compose.*.yaml</code> file. This file does not need to specify an additional services. For example, this configuration exposes port 5900 for a VNC server.</p> <p>In <code>.ddev/docker-compose.vnc.yaml</code>:</p> <pre><code>services:\n  web:\n    ports:\n      - \"5900:5900\"\n</code></pre> <p>If multiple projects declare the same port, only the first project will be able to start successfully. Consider making services like this disabled by default, especially if they aren\u2019t needed in day to day use.</p>","boost":2},{"location":"users/extend/customization-extendibility/#providing-custom-environment-variables-to-a-container","title":"Providing Custom Environment Variables to a Container","text":"<p>You can set custom environment variables in several places:</p> <ul> <li> <p>The project\u2019s <code>web_environment</code> setting in <code>.ddev/config.yaml</code> or <code>.ddev/config.*.yaml</code>:</p> <pre><code>web_environment:\n- MY_ENV_VAR=someval\n- MY_OTHER_ENV_VAR=someotherval\n</code></pre> </li> <li> <p>The global <code>web_environment</code> setting in <code>.ddev/global_config.yaml</code>.</p> </li> <li> <p>An optional, project-level <code>.ddev/.env</code> file, which could look something like this:</p> <pre><code>MY_ENV_VAR='someval'\nMY_OTHER_ENV_VAR='someotherval'\n</code></pre> </li> </ul> <p>If you\u2019d rather use the CLI to set the project or global <code>web_environment</code> value, you can use the <code>ddev config</code> command:</p> <pre><code># Set MY_ENV_VAR for the project\nddev config --web-environment-add=\"MY_ENV_VAR=someval\"\n\n# Set MY_ENV_VAR globally\nddev config global --web-environment-add=\"MY_ENV_VAR=someval\n</code></pre> <p>You can use the <code>--web-environment</code> flag to overwrite existing values rather than adding them.</p> <p>Don\u2019t check in sensitive values!</p> <p>Sensitive variables like API keys should not be checked in with your project. Typically you might use an <code>.env</code> file and not check that in, but offer <code>.env.example</code> with expected keys that don\u2019t have values. Some use global configuration for sensitive values, as that\u2019s not normally checked in either.</p>","boost":2},{"location":"users/extend/customization-extendibility/#altering-the-in-container-path","title":"Altering the In-Container <code>$PATH</code>","text":"<p>Sometimes it\u2019s easiest to put the command you need into the existing <code>$PATH</code> using a symbolic link rather than changing the in-container <code>$PATH</code>. For example, the project <code>bin</code> directory is already included the <code>$PATH</code>. So if you have a command you want to run that\u2019s not already in the <code>$PATH</code>, you can add a symlink.</p> <p>Examples:</p> <ul> <li>On Craft CMS, the <code>craft</code> script is often in the project root, which is not in the <code>$PATH</code>. But if you <code>mkdir bin &amp;&amp; ln -s craft bin/craft</code> you should be able to run <code>ddev exec craft</code>. (Note however that <code>ddev craft</code> takes care of this for you.)</li> <li>On projects where the <code>vendor</code> directory is not in the project root (Acquia projects, for example, have <code>composer.json</code> and <code>vendor</code> in the <code>docroot</code> directory), you can <code>mkdir bin &amp;&amp; ln -s docroot/vendor/bin/drush bin/drush</code> to put <code>drush</code> in your <code>$PATH</code>. (With projects like this, make sure to set <code>composer_root: docroot</code> so that <code>ddev composer</code> works properly.)</li> </ul> <p>You can also modify the <code>PATH</code> environment variable by adding a script to <code>&lt;project&gt;/.ddev/homeadditions/.bashrc.d/</code> or (global) <code>~/.ddev/homeadditions/.bashrc.d/</code>. For example, if your project vendor directory is not in the expected place (<code>/var/www/html/vendor/bin</code>) you can add a <code>&lt;project&gt;/.ddev/homeadditions/.bashrc.d/path.sh</code>:</p> <pre><code>export PATH=$PATH:/var/www/html/somewhereelse/vendor/bin\n</code></pre>","boost":2},{"location":"users/extend/customization-extendibility/#custom-nginx-configuration","title":"Custom nginx Configuration","text":"<p>When you run <code>ddev restart</code> using <code>nginx-fpm</code>, DDEV creates a configuration customized to your project type in <code>.ddev/nginx_full/nginx-site.conf</code>. You can edit and override the configuration by removing the <code>#ddev-generated</code> line and doing whatever you need with it. After each change, run <code>ddev restart</code>. (For updates without restart, see Troubleshooting nginx Configuration.)</p> <p>You can also have more than one config file in the <code>.ddev/nginx_full</code> directory, and each will be loaded when DDEV starts. This can be used for serving multiple docroots and other techniques.</p>","boost":2},{"location":"users/extend/customization-extendibility/#troubleshooting-nginx-configuration","title":"Troubleshooting nginx Configuration","text":"<ul> <li>Any errors in your configuration may cause the <code>web</code> container to fail and try to restart. If you see that behavior, use <code>ddev logs</code> to diagnose.</li> <li>The configuration is copied into the container during restart. Therefore it is not possible to edit the host file for the changes to take effect. You may want to edit the file directly inside the container at <code>/etc/nginx/sites-enabled/</code>. (For example, run <code>ddev ssh</code> to get into the container.)</li> <li>You can run <code>ddev exec nginx -t</code> to test whether your configuration inside the container is valid. (Or run <code>ddev ssh</code> and run <code>nginx -t</code>.)</li> <li>You can reload the nginx configuration by running either <code>ddev restart</code> or editing the configuration inside the container at <code>/etc/nginx/sites-enabled/</code> and running <code>ddev exec nginx -s reload</code> on the host system (inside the container run <code>nginx -s reload</code>).</li> <li>The alias <code>Alias \"/phpstatus\" \"/var/www/phpstatus.php\"</code> is required for the health check script to work.</li> </ul>","boost":2},{"location":"users/extend/customization-extendibility/#multiple-docroots-in-nginx-advanced","title":"Multiple Docroots in nginx (Advanced)","text":"<p>It\u2019s easiest to have different web servers in different DDEV projects, and DDEV projects can easily communicate with each other, but some sites require more than one docroot for a single project codebase. Sometimes this is because there\u2019s an API in the same codebase but using different code, or different code for different languages, etc.</p> <p>The generated <code>.ddev/nginx_full/seconddocroot.conf.example</code> demonstrates how to do this. You can create as many of these as you want: change the <code>servername</code> and the <code>root</code> and customize as needed.</p>","boost":2},{"location":"users/extend/customization-extendibility/#nginx-snippets","title":"nginx Snippets","text":"<p>To add an nginx snippet to the default config, add an nginx config file as <code>.ddev/nginx/&lt;something&gt;.conf</code>.</p> <p>For example, to make all HTTP URLs redirect to their HTTPS equivalents you might add <code>.ddev/nginx/redirect.conf</code> with this stanza:</p> <pre><code>    if ($http_x_forwarded_proto = \"http\") {\n      return 301 https://$host$request_uri;\n    }\n</code></pre> <p>After adding a snippet, run <code>ddev restart</code> to make it take effect.</p>","boost":2},{"location":"users/extend/customization-extendibility/#custom-apache-configuration","title":"Custom Apache Configuration","text":"<p>If you\u2019re using <code>webserver_type: apache-fpm</code> in your <code>.ddev/config.yaml</code>, you can override the default site configuration by editing or replacing the DDEV-provided <code>.ddev/apache/apache-site.conf</code> configuration.</p> <ul> <li>Edit the <code>.ddev/apache/apache-site.conf</code>.</li> <li>Add your configuration changes.</li> <li>Save your configuration file and run <code>ddev restart</code>. If you encounter issues with your configuration or the project fails to start, use <code>ddev logs</code> to inspect the logs for possible Apache configuration errors.</li> <li>Use <code>ddev exec apachectl -t</code> to do a general Apache syntax check.</li> <li>The alias <code>Alias \"/phpstatus\" \"/var/www/phpstatus.php\"</code> is required for the health check script to work.</li> <li>Any errors in your configuration may cause the <code>web</code> container to fail. If you see that behavior, use <code>ddev logs</code> to diagnose.</li> </ul> <p>Important!</p> <p>Changes to <code>.ddev/apache/apache-site.conf</code> take place on a <code>ddev restart</code>. You can also <code>ddev exec apachectl -k graceful</code> to reload the Apache configuration.</p>","boost":2},{"location":"users/extend/customization-extendibility/#custom-php-configuration-phpini","title":"Custom PHP Configuration (<code>php.ini</code>)","text":"<p>You can provide additional PHP configuration for a project by creating a directory called <code>.ddev/php/</code> and adding any number of <code>*.ini</code> PHP configuration files.</p> <p>You should generally limit your override to any specific option(s) you need to customize. Every file in <code>.ddev/php/</code> will be copied into <code>/etc/php/[version]/(cli|fpm)/conf.d</code>, so it\u2019s possible to replace files that already exist in the container. Common usage is to put custom overrides in a file called <code>my-php.ini</code>. Make sure you include the section header that goes with each item (like <code>[PHP]</code>).</p> <p>One interesting implication of this behavior is that it\u2019s possible to disable extensions by replacing the configuration file that loads them. For instance, if you were to create an empty file at <code>.ddev/php/20-xdebug.ini</code>, it would replace the configuration that loads Xdebug, which would cause Xdebug to not be loaded!</p> <p>To load the new configuration, run <code>ddev restart</code>.</p> <p>An example file in <code>.ddev/php/my-php.ini</code> might look like this:</p> <pre><code>[PHP]\nmax_execution_time = 240;\n</code></pre>","boost":2},{"location":"users/extend/customization-extendibility/#custom-mysqlmariadb-configuration-mycnf","title":"Custom MySQL/MariaDB configuration (<code>my.cnf</code>)","text":"<p>You can provide additional MySQL/MariaDB configuration for a project by creating a directory called <code>.ddev/mysql/</code> and adding any number of <code>*.cnf</code> MySQL configuration files. These files will be automatically included when MySQL is started. Make sure that the section header is included in the file.</p> <p>An example file in <code>.ddev/mysql/no_utf8mb4.cnf</code> might be:</p> <pre><code>[mysqld]\ncollation-server = utf8_general_ci\ncharacter-set-server = utf8\ninnodb_large_prefix=false\n</code></pre> <p>To load the new configuration, run <code>ddev restart</code>.</p>","boost":2},{"location":"users/extend/customization-extendibility/#custom-postgresql-configuration","title":"Custom PostgreSQL Configuration","text":"<p>If you\u2019re using PostgreSQL, a default <code>posgresql.conf</code> is provided in <code>.ddev/postgres/postgresql.conf</code>. If you need to alter it, remove the <code>#ddev-generated</code> line and <code>ddev restart</code>.</p>","boost":2},{"location":"users/extend/customization-extendibility/#extending-configyaml-with-custom-configyaml-files","title":"Extending <code>config.yaml</code> with Custom <code>config.*.yaml</code> Files","text":"<p>You may add additional <code>config.*.yaml</code> files to organize additional commands as you see fit for your project and team.</p> <p>For example, many teams commit their <code>config.yaml</code> and share it throughout the team, but some team members may require overrides to the checked-in version specifically for their environment and not checked in. For example, a team member may want to use a <code>router_http_port</code> other than the team default due to a conflict in their development environment. In this case they could add <code>.ddev/config.ports.yaml</code>:</p> <pre><code># My machine can\u2019t use port 80 so override with port 8080, but don\u2019t check this in!\nrouter_http_port: 8080\n</code></pre> <p>Extra <code>config.*.yaml</code> files are loaded in lexicographic order, so <code>config.a.yaml</code> will be overridden by <code>config.b.yaml</code>.</p> <p>Team members may choose to use <code>config.local.yaml</code> for local non-committed config changes, for example. <code>config.local.yaml</code> is gitignored by default.</p> <p><code>config.*.yaml</code> update configuration according to these rules:</p> <ol> <li>Simple fields like <code>router_http_port</code> or <code>webserver_type</code> are overwritten.</li> <li>Lists of strings like <code>additional_hostnames</code> or <code>additional_fqdns</code> are merged.</li> <li>The list of environment variables in <code>web_environment</code> are \u201csmart merged\u201d: if you add the same environment variable with a different value, the value in the override file will replace the value from <code>config.yaml</code>.</li> <li>Hook specifications in the <code>hooks</code> variable are merged.</li> </ol> <p>If you need to override existing values, set <code>override_config: true</code> in the <code>config.*.yaml</code> where the override behavior should take place. Since <code>config.*.yaml</code> files are normally merged into the configuration, some things can\u2019t be overridden normally. For example, if you have <code>use_dns_when_possible: false</code> you can\u2019t override it with a merge and you can\u2019t erase existing hooks or all environment variables. However, with <code>override_config: true</code> in a particular <code>config.*.yaml</code> file,</p> <pre><code>override_config: true\nuse_dns_when_possible: false\n</code></pre> <p>can override the existing values, and</p> <pre><code>override_config: true\nhooks:\n  post-start: []\n</code></pre> <p>or</p> <pre><code>override_config: true\nadditional_hostnames: []\n</code></pre> <p>can have their intended affect.</p> <p><code>override_config</code> affects only behavior of the <code>config.*.yaml</code> file it exists in.</p> <p>To experiment with the behavior of a set of <code>config.*.yaml</code> files, use the <code>ddev debug configyaml</code> file; it\u2019s especially valuable with the <code>yq</code> command, for example <code>ddev debug configyaml | yq</code>.</p>","boost":2},{"location":"users/extend/customization-extendibility/#explicit-supervisord-configuration-for-additional-daemons","title":"Explicit <code>supervisord</code> Configuration for Additional Daemons","text":"<p>Although most extra daemons (like Node.js daemons, etc.) can be configured easily using web_extra_daemons, there may be situations where you want complete control of the <code>supervisord</code> configuration.</p> <p>In these case you can create a <code>.ddev/web-build/&lt;daemonname&gt;.conf</code> with configuration like:</p> <pre><code>[program:daemonname]\ncommand=/var/www/html/path/to/daemon\ndirectory=/var/www/html/\nautorestart=true\nstartretries=10\nstdout_logfile=/var/tmp/logpipe\nstdout_logfile_maxbytes=0\nredirect_stderr=true\n</code></pre> <p>And create a <code>.ddev/web-build/Dockerfile.&lt;daemonname&gt;</code> to install the config file:</p> <pre><code>ADD daemonname.conf /etc/supervisor/conf.d\n</code></pre> <p>Full details for advanced configuration possibilities are in Supervisor docs.</p>","boost":2},{"location":"users/extend/customizing-images/","title":"Customizing Docker Images","text":"<p>It\u2019s common to have a requirement for the <code>web</code> or <code>db</code> images which isn\u2019t bundled with them by default. There are two ways to extend these Docker images:</p> <ol> <li><code>webimage_extra_packages</code> and <code>dbimage_extra_packages</code> in <code>.ddev/config.yaml</code>.</li> <li>An add-on Dockerfile in your project\u2019s <code>.ddev/web-build</code> or <code>.ddev/db-build</code>.</li> </ol>"},{"location":"users/extend/customizing-images/#adding-extra-debian-packages-with-webimage_extra_packages-and-dbimage_extra_packages","title":"Adding Extra Debian Packages with <code>webimage_extra_packages</code> and <code>dbimage_extra_packages</code>","text":"<p>You can add extra Debian packages with lines like this in <code>.ddev/config.yaml</code>:</p> <pre><code>webimage_extra_packages: [php-yaml, php8.2-tidy]\ndbimage_extra_packages: [telnet, netcat]\n</code></pre> <p>Then the additional packages will be built into the containers during <code>ddev start</code>.</p>"},{"location":"users/extend/customizing-images/#determining-what-packages-you-need","title":"Determining What Packages You Need","text":"<p>The <code>web</code> container is a Debian image, and its PHP distributions are packaged (thank you!) by <code>deb.sury.org</code>.</p> <p>Most PHP extensions are built within the <code>deb.sury.org</code> distribution. You can Google the extension you want, or download and search the Packages list from the <code>sury</code> distribution. For example, the <code>bcmath</code> PHP extension is provided by <code>php-bcmath</code>. Many packages have version-specific names, like <code>php7.3-tidy</code>.</p> <p>If you need a package that is not a PHP package, you can view and search standard Debian packages at packages.debian.org/stable, or use Google.</p> <p>To test that a package will do what you want, you can <code>ddev ssh</code> and <code>sudo apt-get update &amp;&amp; sudo apt-get install &lt;package&gt;</code> to verify that you can install it and you get what you need. A PHP extension may require <code>killall -USR2 php-fpm</code> to take effect. After you\u2019ve tried that, you can add the package to <code>webimage_extra_packages</code>.</p>"},{"location":"users/extend/customizing-images/#adding-extra-dockerfiles-for-webimage-and-dbimage","title":"Adding Extra Dockerfiles for <code>webimage</code> and <code>dbimage</code>","text":"<p>For more complex requirements, you can add:</p> <ul> <li><code>.ddev/web-build/Dockerfile</code></li> <li><code>.ddev/web-build/Dockerfile.*</code></li> <li><code>.ddev/db-build/Dockerfile</code></li> <li><code>.ddev/db-build/Dockerfile.*</code></li> </ul> <p>These files\u2019 content will be inserted into the constructed Dockerfile for each image. They are inserted after most of the rest of the things that are done to build the image, and are done in alphabetical order, so <code>Dockerfile</code> is inserted first, followed by <code>Dockerfile.*</code> in alphabetical order.</p> <p>For certain use cases, you might need to add directives very early on the Dockerfile like proxy settings or SSL termination. You can use <code>pre.</code> variants for this that are inserted before everything else:</p> <ul> <li><code>.ddev/web-build/pre.Dockerfile.*</code></li> <li><code>.ddev/db-build/pre.Dockerfile.*</code></li> </ul> <p>Examine the resultant generated Dockerfile (which you will never edit directly), at <code>.ddev/.webimageBuild/Dockerfile</code>. You can force a rebuild with <code>ddev debug refresh</code>.</p> <p>Examples of possible Dockerfiles are <code>.ddev/web-build/Dockerfile.example</code> and <code>.ddev/db-build/Dockerfile.example</code>, created in your project when you run <code>ddev config</code>.</p> <p>You can use the <code>.ddev/*-build</code> directory as the Docker \u201ccontext\u201d directory as well. So for example, if a file named <code>README.txt</code> exists in <code>.ddev/web-build</code>, you can use <code>ADD README.txt /</code> in the Dockerfile.</p> <p>An example web image <code>.ddev/web-build/Dockerfile</code> might be:</p> <pre><code>RUN npm install -g gatsby-cli\n</code></pre> <p>Another example would be installing <code>phpcs</code> globally (see Stack Overflow answer):</p> <pre><code>ENV COMPOSER_HOME=/usr/local/composer\n\n# We try to avoid relying on Composer to download global, so in `phpcs` case we can use the PHAR.\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs &amp;&amp; chmod +x /usr/local/bin/phpcs\nRUN curl -L https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o /usr/local/bin/phpcbf &amp;&amp; chmod +x /usr/local/bin/phpcbf\n\n# If however we need to download a package, we use `cgr` for that.\nRUN composer global require consolidation/cgr\nRUN $COMPOSER_HOME/vendor/bin/cgr drupal/coder:^8.3.1\nRUN $COMPOSER_HOME/vendor/bin/cgr dealerdirect/phpcodesniffer-composer-installer\n\n# Register Drupal\u2019s code sniffer rules.\nRUN phpcs --config-set installed_paths $COMPOSER_HOME/global/drupal/coder/vendor/drupal/coder/coder_sniffer --verbose\n# Make Codesniffer config file writable for ordinary users in container.\nRUN chmod 666 /usr/local/bin/CodeSniffer.conf\n# Make `COMPOSER_HOME` writable if regular users need to use it.\nRUN chmod -R ugo+rw $COMPOSER_HOME\n# Now turn it off, because ordinary users will want to be using the default.\nENV COMPOSER_HOME=\"\"\n</code></pre> <p>Remember that the Dockerfile is building a Docker image that will be used later with DDEV. At the time the Dockerfile is executing, your code is not mounted and the container is not running, the image is being built. So for example, an <code>npm install</code> in <code>/var/www/html</code> will not do anything to your project because the code is not there at image building time.</p>"},{"location":"users/extend/customizing-images/#build-time-environment-variables","title":"Build Time Environment Variables","text":"<p>The following environment variables are available for the web Dockerfile to use at build time:</p> <ul> <li><code>$BASE_IMAGE</code>: the base image, like <code>ddev/ddev-webserver:v1.21.4</code></li> <li><code>$username</code>: the username inferred from your host-side username</li> <li><code>$uid</code>: the user ID inferred from your host-side user ID</li> <li><code>$gid</code>: the group ID inferred from your host-side group ID</li> <li><code>$DDEV_PHP_VERSION</code>: the PHP version declared in your project configuration (provided in versions after v1.21.4)</li> </ul> <p>For example, a Dockerfile might want to build an extension for the configured PHP version like this:</p> <pre><code>ENV extension=xhprof\nENV extension_repo=https://github.com/longxinH/xhprof\nENV extension_version=v2.3.8\n# For versions &lt;= DDEV v1.21.4 you must also declare DDEV_PHP_VERSION yourself: ENV DDEV_PHP_VERSION=8.1\n\nRUN apt-get update &amp;&amp; DEBIAN_FRONTEND=noninteractive apt-get install -y -o Dpkg::Options::=\"--force-confnew\" --no-install-recommends --no-install-suggests autoconf build-essential libc-dev php-pear php${DDEV_PHP_VERSION}-dev pkg-config zlib1g-dev\nRUN mkdir -p /tmp/php-${extension} &amp;&amp; cd /tmp/php-${extension} &amp;&amp; git clone ${extension_repo} .\nWORKDIR /tmp/php-${extension}/extension\nRUN git checkout ${extension_version}\nRUN phpize\nRUN ./configure\nRUN make install\nRUN echo \"extension=${extension}.so\" &gt; /etc/php/${DDEV_PHP_VERSION}/mods-available/${extension}.ini\n</code></pre>"},{"location":"users/extend/customizing-images/#installing-into-the-home-directory","title":"Installing into the home directory","text":"<p>The in-container home directory is rebuilt when you run <code>ddev restart</code>, so if you have something that installs into the home directory (like <code>~/.cache</code>) you\u2019ll want to switch users in the Dockerfile. In this example, <code>npx playwright install</code> installs a number of things into <code>~/.cache</code>, so we\u2019ll switch to the proper user before executing it, and switch back to the <code>root</code> user after installation to avoid surprises with any other Dockerfile that may follow.</p> <pre><code>USER $username\n# This is an example of creating a file in the home directory\nRUN touch ~/${username}-was-here\n# `npx playwright` installs lots of things in ~/.cache\nRUN npx playwright install\nRUN npx playwright install-deps\nUSER root\n</code></pre>"},{"location":"users/extend/customizing-images/#debugging-the-dockerfile-build","title":"Debugging the Dockerfile Build","text":"<p>It can be complicated to figure out what\u2019s going on when building a Dockerfile, and even more complicated when you\u2019re seeing it go by as part of <code>ddev start</code>.</p> <ol> <li>Use <code>ddev ssh</code> first of all to pioneer the steps you want to take. You can do all the things you need to do there and see if it works. If you\u2019re doing something that affects PHP, you may need to <code>sudo killall -USR2 php-fpm</code> for it to take effect.</li> <li>Put the steps you pioneered into <code>.ddev/web-build/Dockerfile</code> as above.</li> <li>If you can\u2019t figure out what\u2019s failing or why, running <code>ddev debug refresh</code> will show the full output of the build process. You can also run <code>export DDEV_VERBOSE=true &amp;&amp; ddev start</code> to see what\u2019s happening during the <code>ddev start</code> Dockerfile build.</li> </ol>"},{"location":"users/extend/database-types/","title":"Database Server Types","text":"<p>DDEV supports many versions of the MariaDB, MySQL, and PostgreSQL database servers.</p> <p>The default database type is MariaDB, and the default version is currently 10.4, but you can use MariaDB versions 5.5-10.8 and 10.11, MySQL 5.5-8.0, and Postgres 9-16. (New LTS versions of each of these are typically added soon after release. The very old versions are kept for compatibility with older projects.)</p> <p>You could set these using the <code>ddev config</code> command like this:</p> <ul> <li><code>ddev config --database=mysql:5.7</code></li> <li><code>ddev config --database=mariadb:10.11</code></li> <li><code>ddev config --database=postgres:14</code>.</li> </ul> <p>Or by editing the <code>database</code> setting in <code>.ddev/config.yaml</code>:</p> <pre><code>database:\n  type: mysql\n  version: 5.7\n</code></pre> <pre><code>database:\n  type: mariadb\n  version: 10.11\n</code></pre> <pre><code>database:\n  type: postgres\n  version: 14\n</code></pre>"},{"location":"users/extend/database-types/#checking-the-existing-database-andor-migrating","title":"Checking the Existing Database and/or Migrating","text":"<p>Since the existing binary database may not be compatible with changes to your configuration, you need to check and/or migrate your database.</p> <ul> <li><code>ddev debug get-volume-db-version</code> will show the current binary database type.</li> <li><code>ddev debug check-db-match</code> will show if your configured project matches the binary database type.</li> <li><code>ddev debug migrate-database</code> allows an automated attempt at migrating your database to a different type/version.<ul> <li>This only works with databases of type <code>mysql</code> or <code>mariadb</code>.</li> <li>MySQL 8.0 has diverged in syntax from most of its predecessors, including earlier MySQL and all MariaDB versions. As a result, you may not be able to migrated from databases of type <code>mysql:8.0</code> because dumps from MySQL 8.0 often have keywords or other features not supported elsewhere.</li> <li>Examples: <code>ddev debug migrate-database mariadb:10.7</code>, <code>ddev debug migrate-database mysql:8.0</code>.</li> </ul> </li> </ul>"},{"location":"users/extend/database-types/#caveats","title":"Caveats","text":"<ul> <li>If you change the database type or version in an existing project, the existing database will not be compatible with your change, so you\u2019ll want to use <code>ddev export-db</code> to save a dump first.</li> <li>When you change database type, destroy the existing database using <code>ddev delete --omit-snapshot</code> before changing, then after <code>ddev start</code> use <code>ddev import-db</code> to import the dump you saved.</li> <li>Snapshots are always per database type and database version. So if you have snapshots from MariaDB 10.2 and you switch to MariaDB 10.5, don\u2019t expect to be able to restore the old snapshot.</li> </ul>"},{"location":"users/extend/in-container-configuration/","title":"In-Container Home Directory and Shell Configuration","text":"<p>Custom shell configuration (Bash or your preferred shell), your usual Git configuration, a Composer <code>auth.json</code> and more can be achieved within your containers.</p> <p>Place all your dotfiles in your global<code>~/.ddev/homeadditions</code> or your project\u2019s <code>.ddev/homeadditions</code> directory and DDEV will use these in your project\u2019s <code>web</code> containers.</p> <p>Ignore <code>.ddev/.homeadditions</code>!</p> <p>A hidden/transient <code>.ddev/.homeadditions</code>\u2014emphasis on the leading <code>.</code>\u2014is used for processing global <code>homeadditions</code> and should be ignored.</p> <p>On <code>ddev start</code>, DDEV attempts to create a user inside the <code>web</code> and <code>db</code> containers with the same name and user ID as the one you have on the host machine.</p> <p>DDEV looks for the <code>homeadditions</code> directory both in the global <code>~/.ddev/homeadditions</code> directory and the project-level <code>.ddev/homeadditions</code> directory, and will copy their contents recursively into the in-container home directory during <code>ddev start</code>. Project <code>homeadditions</code> contents override the global <code>homeadditions</code>.</p> <p>Usage examples:</p> <ul> <li>If you use Git inside the container, you may want to symlink your <code>~/.gitconfig</code> into <code>~/.ddev/homeadditions</code> or the project\u2019s <code>.ddev/homeadditions</code> so that in-container <code>git</code> commands use whatever username and email you\u2019ve configured on your host machine. For example, <code>ln -s ~/.gitconfig ~/.ddev/homeadditions/.gitconfig</code>.</li> <li> <p>If you use SSH inside the container and want to use your <code>.ssh/config</code>, consider <code>mkdir -p ~/.ddev/homeadditions/.ssh &amp;&amp; ln -s ~/.ssh/config ~/.ddev/homeadditions/.ssh/config</code>. Some people will be able to symlink their entire <code>.ssh</code> directory, <code>ln -s ~/.ssh ~/.ddev/homeadditions/.ssh</code>. If you provide your own <code>.ssh/config</code> though, please make sure it includes these lines:</p> <pre><code>UserKnownHostsFile=/home/.ssh-agent/known_hosts\nStrictHostKeyChecking=accept-new\n</code></pre> </li> <li> <p>If you need to add a script or other executable component into the project (or global configuration), you can put it in the project or global <code>.ddev/homeadditions/bin</code> directory and <code>~/bin/&lt;script</code> will be created inside the container. This is useful for adding a script to one project or every project, or for overriding standard scripts, as <code>~/bin</code> is first in the <code>$PATH</code> in the <code>web</code> container.</p> </li> <li>If you use private, password-protected Composer repositories with Satis, for example, and use a global <code>auth.json</code>, you might want to <code>mkdir -p ~/.ddev/homeadditions/.composer &amp;&amp; ln -s ~/.composer/auth.json ~/.ddev/homeadditions/.composer/auth.json</code>, but be careful that you exclude it from getting checked in by using a <code>.gitignore</code> or equivalent.</li> <li>You can add small scripts to the <code>.bashrc.d</code> directory and they will be executed on <code>ddev ssh</code>. For example, add a <code>~/.ddev/homeadditions/.bashrc.d/whereami</code> containing <code>echo \"I am in the $(hostname) container\"</code> and (after <code>ddev restart</code>) when you <code>ddev ssh</code> that will be executed.</li> <li>If you have a favorite <code>.bashrc</code>, copy it into either the global or project <code>homeadditions</code>.</li> <li> <p>If you like the traditional <code>ll</code> Bash alias for <code>ls -l</code>, add a <code>.ddev/homeadditions/.bash_aliases</code> with these contents:</p> <pre><code>alias ll=\"ls -lhA\"\n</code></pre> </li> </ul>"},{"location":"users/extend/traefik-router/","title":"Router Customization and Debugging (Traefik)","text":"<p>Traefik is the default router in DDEV v1.22+.</p> <p>DDEV\u2019s router plays an important role in its container architecture, receiving most HTTP and HTTPS traffic for requests like <code>*.ddev.site</code> and delivering them to the relevant project\u2019s web container.</p> <p>DDEV uses Traefik by default unless you configure the traditional router by running <code>ddev poweroff &amp;&amp; ddev config global --router=nginx-proxy</code>.</p>"},{"location":"users/extend/traefik-router/#traefik-configuration","title":"Traefik Configuration","text":"<p>You can fully customize the router\u2019s Traefik configuration.</p> <p>All Traefik configuration uses the file provider, not the Docker provider. Even though the Traefik daemon itself is running inside the <code>ddev-router</code> container, it uses mounted files for configuration, rather than listening to the Docker socket.</p> <p>Tip</p> <p>Like other DDEV configuration, any file with <code>#ddev-generated</code> will be overwritten unless you choose to \u201ctake over\u201d it yourself. You can do this by removing the <code>#ddev-generated</code> line. DDEV will stop making changes to that file and you\u2019ll be responsible for updating it.</p>"},{"location":"users/extend/traefik-router/#global-traefik-configuration","title":"Global Traefik Configuration","text":"<p>Global configuration is automatically generated in the <code>~/.ddev/traefik</code> directory:</p> <ul> <li><code>static_config.yaml</code> is the base configuration.</li> <li><code>certs/default_cert.*</code> files are the default DDEV-generated certificates.</li> <li><code>config/default_config.yaml</code> contains global dynamic configuration, including pointers to the default certificates.</li> </ul>"},{"location":"users/extend/traefik-router/#project-traefik-configuration","title":"Project Traefik Configuration","text":"<p>Project configuration is automatically generated in the project\u2019s <code>.ddev/traefik</code> directory.</p> <ul> <li>The <code>certs</code> directory contains the <code>&lt;projectname&gt;.crt</code> and <code>&lt;projectname&gt;.key</code> certificate generated for the project.</li> <li>The <code>config/&lt;projectname&gt;.yaml</code> file contains the configuration for the project, including information about routers, services, and certificates.</li> </ul>"},{"location":"users/extend/traefik-router/#debugging-traefik-routing","title":"Debugging Traefik Routing","text":"<p>Traefik provides a dynamic description of its configuration you can visit at <code>http://localhost:10999</code>. When things seem to be going wrong, run <code>ddev poweroff</code> and then start your project again by running <code>ddev start</code>. Examine the router\u2019s logs to see what the Traefik daemon is doing (or failing at) by running <code>docker logs ddev-router</code> or <code>docker logs -f ddev-router</code>.</p>"},{"location":"users/install/","title":"Installation","text":"<p>Whatever system you\u2019re on, you\u2019ll first need to Install Docker or Colima, then Install DDEV.</p> <p>For the best experience, consider performance tuning and enabling shell completion.</p>"},{"location":"users/install/ddev-installation/","title":"DDEV Installation","text":"<p>Once you\u2019ve installed a Docker provider, you\u2019re ready to install DDEV!</p> macOSLinuxWindowsGitpodCodespacesManual"},{"location":"users/install/ddev-installation/#macos","title":"macOS","text":""},{"location":"users/install/ddev-installation/#homebrew","title":"Homebrew","text":"<p>Homebrew is the easiest and most reliable way to install and upgrade DDEV:</p> <pre><code># Install DDEV\nbrew install ddev/ddev/ddev\n\n# Initialize mkcert\nmkcert -install\n</code></pre>"},{"location":"users/install/ddev-installation/#install-script","title":"Install Script","text":"<p>The install script is another option. It downloads, verifies, and sets up the <code>ddev</code> binary:</p> <pre><code># Download and run the install script\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to install DDEV v1.21.4\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.21.4\n</code></pre>"},{"location":"users/install/ddev-installation/#linux","title":"Linux","text":""},{"location":"users/install/ddev-installation/#locally-trusted-certificate-with-mkcert","title":"Locally-trusted certificate with mkcert","text":"<p>Modern browsers require valid certificates, which mkcert can create. Install mkcert, and then run this:</p> <pre><code># Initialize mkcert\nmkcert -install\n</code></pre> <p>Some versions of Firefox (Developer Edition, Flatpak) may need some extra work, see also this issue.</p>"},{"location":"users/install/ddev-installation/#debianubuntu","title":"Debian/Ubuntu","text":"<p>DDEV\u2019s Debian and RPM packages work with <code>apt</code> and <code>yum</code> repositories and most variants that use them, including Windows WSL2:</p> <pre><code># Add DDEV\u2019s GPG key to your keyring\nsudo sh -c 'echo \"\"'\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg &gt; /dev/null\nsudo chmod a+r /etc/apt/keyrings/ddev.gpg\n\n# Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list &gt;/dev/null\n\n# Update package information and install DDEV\nsudo sh -c 'echo \"\"'\nsudo apt update &amp;&amp; sudo apt install -y ddev\n</code></pre> Need to remove a previously-installed variant? <p>If you previously used DDEV\u2019s install script, you can remove that version:</p> <pre><code>sudo rm -f /usr/local/bin/ddev /usr/local/bin/mkcert /usr/local/bin/*ddev_nfs_setup.sh\n</code></pre> <p>If you previously installed DDEV with Homebrew, you can run <code>brew unlink ddev</code> to get rid of the Homebrew version.</p>"},{"location":"users/install/ddev-installation/#fedora-red-hat-etc","title":"Fedora, Red Hat, etc.","text":"<pre><code># Add DDEV releases to your package repository\nsudo sh -c 'echo \"\"'\necho '[ddev]\nname=ddev\nbaseurl=https://pkg.ddev.com/yum/\ngpgcheck=0\nenabled=1' | perl -p -e 's/^ +//' | sudo tee /etc/yum.repos.d/ddev.repo &gt;/dev/null\n\n# Install DDEV\nsudo sh -c 'echo \"\"'\nsudo dnf install --refresh ddev\n</code></pre> <p>Signed yum repository support will be added in the future.</p>"},{"location":"users/install/ddev-installation/#arch-linux","title":"Arch Linux","text":"<p>We maintain the ddev-bin package in AUR for Arch-based systems including Arch Linux, EndeavourOS and Manjaro. Install with <code>yay</code> or your AUR tool of choice.</p> <pre><code># Install DDEV\nyay -S ddev-bin\n</code></pre>"},{"location":"users/install/ddev-installation/#homebrew-amd64-only","title":"Homebrew (AMD64 only)","text":"<pre><code># Install DDEV using Homebrew\nbrew install ddev/ddev/ddev\n</code></pre> <p>The install script is another option. It downloads, verifies, and sets up the <code>ddev</code> binary:</p> <pre><code># Download and run the install script\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to install DDEV v1.21.4\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.21.4\n</code></pre>"},{"location":"users/install/ddev-installation/#install-script-linux","title":"Install Script","text":""},{"location":"users/install/ddev-installation/#windows","title":"Windows","text":"<p>You can install DDEV on Windows three ways:</p> <ol> <li>Using WSL2 with Docker inside</li> <li>Using WSL2 with Docker Desktop</li> <li>Installing directly on traditional Windows with an installer</li> </ol> <p>We strongly recommend using WSL2. While its Linux experience may be new for some Windows users, it\u2019s worth the performance benefit and common experience of working with Ubuntu and Bash.</p>"},{"location":"users/install/ddev-installation/#important-considerations-for-wsl2-and-ddev","title":"Important Considerations for WSL2 and DDEV","text":"<ul> <li>WSL2 is supported on Windows 10 and 11.   All Windows 10/11 editions, including Windows 10 Home support WSL2.</li> <li> <p>WSL2 offers a faster, smoother experience.   It\u2019s vastly more performant, and you\u2019re less likely to have obscure Windows problems.</p> </li> <li> <p>Execute DDEV commands inside WSL2.    You\u2019ll want to run DDEV commands inside Ubuntu, for example, and never on the Windows side in PowerShell or Git Bash.</p> </li> <li>Projects should live in the Linux filesystem.   WSL2\u2019s Linux filesystem (e.g. <code>/home/&lt;your_username&gt;</code>) is much faster, so keep your projects there and not in the slower Windows filesystem (<code>/mnt/c</code>).</li> <li>Custom hostnames are managed via the Windows hosts file, not within WSL2.   DDEV attempts to manage custom hostnames via the Windows-side hosts file\u2014usually at <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code>\u2014and it can only do this if it\u2019s installed on the Windows side. (DDEV inside WSL2 uses <code>ddev.exe</code> on the Windows side as a proxy to update the Windows hosts file.) If <code>ddev.exe --version</code> shows the same version as <code>ddev --version</code> you\u2019re all set up. Otherwise, install DDEV on Windows using <code>choco upgrade -y ddev</code> or by downloading and running the Windows installer. (The WSL2 scripts below install DDEV on the Windows side, taking care of that for you.) If you frequently run into Windows UAC Escalation, you can calm it down by running <code>gsudo.exe cache on</code> and <code>gsudo.exe config CacheMode auto</code>, see gsudo docs.</li> <li>WSL2 is not the same as Docker Desktop\u2019s WSL2 engine.   Using WSL2 to install and run DDEV is not the same as using Docker Desktop\u2019s WSL2 engine, which itself runs in WSL2, but can serve applications running in both traditional Windows and inside WSL2.</li> </ul> <p>The WSL2 install process involves:</p> <ul> <li>Installing Chocolatey package manager (optional).</li> <li>One time initialization of mkcert.</li> <li>Installing WSL2 and installing a distro like Ubuntu.</li> <li>Optionally installing Docker Desktop for Windows and enabling WSL2 integration with the distro (if you\u2019re using the Docker Desktop approach).</li> <li>Installing DDEV inside your distro; this is normally done by running one of the two scripts below, but can be done manually step-by-step as well.</li> </ul>"},{"location":"users/install/ddev-installation/#wsl2-docker-ce-inside-install-script","title":"WSL2 + Docker CE Inside Install Script","text":"<p>This prepares your default WSL2 Ubuntu distro and doesn\u2019t require Docker Desktop, and you can run the script multiple times without breaking anything.</p> <p>In all cases:</p> <ol> <li> <p>Install WSL2 with an Ubuntu distro.</p> <ul> <li> <p>Install WSL:     <pre><code>wsl --install\n</code></pre></p> </li> <li> <p>Reboot if required. (Usually required.)</p> </li> <li> <p>Verify that you have an Ubuntu distro set as default by running <code>wsl.exe -l -v</code>.   If you have WSL2 but not an Ubuntu distro, install one by running <code>wsl.exe --install Ubuntu</code>. If this doesn\u2019t work, see manual installation and troubleshooting.</p> </li> </ul> </li> <li> <p>In an administrative PowerShell run this PowerShell script by executing:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ddev/ddev/master/scripts/install_ddev_wsl2_docker_inside.ps1'))\n</code></pre> </li> <li> <p>In Windows Update Settings \u2192 Advanced Options enable Receive updates for other Microsoft products. You may want to occasionally run <code>wsl.exe --update</code> as well.</p> </li> </ol> <p>Now you can use the \u201cUbuntu\u201d terminal app or Windows Terminal to access your Ubuntu distro, which has DDEV and Docker working inside it.</p>"},{"location":"users/install/ddev-installation/#wsl2-docker-desktop-install-script","title":"WSL2 + Docker Desktop Install Script","text":"<p>This prepares your default WSL2 Ubuntu distro for use with Docker Desktop, and you can run the script multiple times without breaking anything.</p> <p>In all cases:</p> <ol> <li> <p>Install WSL2 with an Ubuntu distro. On a system without WSL2, run:     <pre><code>wsl --install\n</code></pre></p> <ul> <li> <p>Verify that you have an Ubuntu distro set as the default default with <code>wsl -l -v</code>.</p> </li> <li> <p>If you have WSL2 but not an Ubuntu distro, install one with <code>wsl --install Ubuntu</code>.   If that doesn\u2019t work for you, see manual installation and troubleshooting.</p> </li> </ul> <p>If you prefer to use another Ubuntu distro, install it and set it as default. For example, <code>wsl --set-default Ubuntu-22.04</code>.</p> </li> <li> <p>In Windows Update Settings \u2192 Advanced Options enable Receive updates for other Microsoft products. You may want to occasionally run <code>wsl.exe --update</code> as well.</p> </li> <li> <p>Install Docker Desktop. If you already have Chocolatey, run <code>choco install -y docker-desktop</code>. Otherwise download Docker Desktop from Docker.</p> </li> <li>Start Docker Desktop. You should now be able to run <code>docker ps</code> in PowerShell or Git Bash.</li> <li>In Docker Desktop \u2192 Settings \u2192 Resources \u2192 WSL2 Integration, verify that Docker Desktop is integrated with your distro.</li> <li> <p>In an administrative PowerShell run this PowerShell script by executing:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ddev/ddev/master/scripts/install_ddev_wsl2_docker_desktop.ps1'))\n</code></pre> </li> <li> <p>In Windows Update Settings \u2192 Advanced Options enable Receive updates for other Microsoft products. You may want to occasionally run <code>wsl.exe --update</code> as well.</p> </li> </ol> <p>Now you can use the \u201cUbuntu\u201d terminal app or Windows Terminal to access your Ubuntu distro, which has DDEV and Docker Desktop integrated with it.</p>"},{"location":"users/install/ddev-installation/#wsl2docker-desktop-manual-installation","title":"WSL2/Docker Desktop Manual Installation","text":"<p>You can manually step through the process the install script attempts to automate:</p> <ol> <li>Install Chocolatey:     <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;\niex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))`\n</code></pre></li> <li>In an administrative PowerShell, run <code>choco install -y ddev mkcert</code>.</li> <li>In an administrative PowerShell, run <code>mkcert -install</code> and follow the prompt to install the Certificate Authority.</li> <li>In an administrative PowerShell, run <code>$env:CAROOT=\"$(mkcert -CAROOT)\"; setx CAROOT $env:CAROOT; If ($Env:WSLENV -notlike \"*CAROOT/up:*\") { $env:WSLENV=\"CAROOT/up:$env:WSLENV\"; setx WSLENV $Env:WSLENV }</code>. This will set WSL2 to use the Certificate Authority installed on the Windows side. In some cases it takes a reboot to work correctly.</li> <li>In administrative PowerShell, run <code>wsl --install</code>. This will install WSL2 and Ubuntu for you. Reboot when this is done.</li> <li>Docker Desktop for Windows: If you already have the latest Docker Desktop, configure it in the General Settings to use the WSL2-based engine. Otherwise install the latest Docker Desktop for Windows and select the WSL2-based engine (not legacy Hyper-V) when installing. Install with Chocolatey by running <code>choco install docker-desktop</code>, or download the installer from desktop.docker.com.  Start Docker. It may prompt you to log out and log in again, or reboot.</li> <li>Go to Docker Desktop\u2019s Settings \u2192 Resources \u2192 WSL integration \u2192 enable integration for your distro. Now <code>docker</code> commands will be available from within your WSL2 distro.</li> <li>Double-check in PowerShell: <code>wsl -l -v</code> should show three distros, and your Ubuntu should be the default. All three should be WSL version 2.</li> <li>Double-check in Ubuntu (or your distro): <code>echo $CAROOT</code> should show something like <code>/mnt/c/Users/&lt;you&gt;/AppData/Local/mkcert</code></li> <li>Check that Docker is working inside Ubuntu (or your distro) by running <code>docker ps</code>.</li> <li>Open the WSL2 terminal, for example <code>Ubuntu</code> from the Windows start menu.</li> <li> <p>Install DDEV:</p> <pre><code>sudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg &gt; /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list &gt;/dev/null\nsudo apt update &amp;&amp; sudo apt install -y ddev\n</code></pre> </li> <li> <p>In WSL2, run <code>mkcert -install</code>.</p> </li> </ol> <p>You have now installed DDEV on WSL2. If you\u2019re using WSL2 for DDEV, remember to run all <code>ddev</code> commands inside the WSL2 distro.</p> <p>Path to certificates</p> <p>If you get the prompt <code>Installing to the system store is not yet supported on this Linux</code>, you may need to add <code>/usr/sbin</code> to the <code>$PATH</code> so that <code>/usr/sbin/update-ca-certificates</code> can be found.</p>"},{"location":"users/install/ddev-installation/#traditional-windows","title":"Traditional Windows","text":"<p>If you must use traditional Windows without WSL2, you\u2019ll probably want to enable Mutagen for the best performance.</p> <ul> <li>We recommend using Chocolatey. Once installed, you can run <code>choco install ddev docker-desktop git</code> from an administrative shell. You can upgrade by running <code>ddev poweroff &amp;&amp; choco upgrade ddev</code>.</li> <li>Each DDEV release includes a Windows installer (<code>ddev_windows_installer.&lt;version&gt;.exe</code>). After running that, you can open a new Git Bash, PowerShell, or cmd.exe window and start using DDEV.</li> </ul> <p>Most people interact with DDEV on Windows using Git Bash, part of the Windows Git suite. Although DDEV does work with cmd.exe and PowerShell, it\u2019s more at home in Bash. You can install Git Bash with Chocolatey by running <code>choco install -y git</code>.</p> <p>Windows Firefox Trusted CA</p> <p>The <code>mkcert -install</code> step on Windows isn\u2019t enough for Firefox. You need to add the created root certificate authority to the security configuration yourself:</p> <ul> <li>Run <code>mkcert -install</code> (you can use the shortcut from the Start Menu for that)</li> <li>Run <code>mkcert -CAROOT</code> to see the local folder used for the newly-created root certificate authority</li> <li>Open Firefox Preferences (<code>about:preferences#privacy</code>)</li> <li>Enter \u201ccertificates\u201d into the search box on the top</li> <li>Click View Certificates\u2026</li> <li>Select Authorities tab</li> <li>Click to Import\u2026</li> <li>Navigate to the folder where your root certificate authority was stored</li> <li>Select the <code>rootCA.pem</code> file</li> <li>Click to Open</li> </ul> <p>You should now see your CA under <code>mkcert development CA</code>.</p>"},{"location":"users/install/ddev-installation/#gitpod","title":"Gitpod","text":"<p>Choose any of the following methods to launch your project with Gitpod:</p> <ol> <li> <p>Open any repository using Gitpod and run the following:     <pre><code># Add DDEV\u2019s GPG key to your keyring\ncurl -fsSL https://pkg.ddev.com/apt/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/ddev.gpg &gt; /dev/null\n\n# Add DDEV releases to your package repository\necho \"deb [signed-by=/etc/apt/keyrings/ddev.gpg] https://pkg.ddev.com/apt/ * *\" | sudo tee /etc/apt/sources.list.d/ddev.list &gt;/dev/null\n\n\n# Update package information and install DDEV\nsudo apt update &amp;&amp; sudo apt install -y ddev\n</code></pre></p> <ul> <li>You can install your web app there, or import a database.</li> <li>You may want to implement one of the <code>ddev pull</code> provider integrations to pull from a hosting provider or an upstream source.</li> </ul> </li> <li> <p>Use the ddev-gitpod-launcher form to launch a repository.     You\u2019ll provide a source repository and click a button to open a newly-established environment. You can specify a companion artifacts repository and automatically load <code>db.sql.gz</code> and <code>files.tgz</code> from it. (More details in the repository\u2019s README.)</p> </li> <li>Save the following link to your bookmark bar: Open in ddev-gitpod.     It\u2019s easiest to drag the link into your bookmarks. When you\u2019re on a Git repository, click the bookmark to open it with DDEV in Gitpod. It does the same thing as the second option, but it works on non-Chrome browsers and you can use native browser keyboard shortcuts.</li> </ol> <p>It can be complicated to get private databases and files into Gitpod, so in addition to the launchers, the <code>git</code> provider example demonstrates pulling a database and files without complex setup or permissions. This was created explicitly for Gitpod integration, because in Gitpod you typically already have access to private Git repositories, which are a fine place to put a starter database and files. Although ddev-gitpod-launcher and the web extension provide the capability, you may want to integrate a Git provider\u2014or one of the other providers\u2014for each project.</p>"},{"location":"users/install/ddev-installation/#github-codespaces","title":"GitHub Codespaces","text":"<p>You can use DDEV in remote GitHub Codespaces without having to run Docker locally; you only need a browser and an internet connection.</p> <p>Start by creating a <code>.devcontainer/devcontainer.json</code> file in your GitHub repository:</p> <pre><code>{\n  \"image\": \"mcr.microsoft.com/devcontainers/universal:2\",\n  \"features\": {\n    \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n  },\n}\n</code></pre> <p>Launch your repository in Codespaces:</p> <p></p> <p></p> <p>DDEV is now available within your new codespace instance:  </p> <p></p> <p>Run <code>ddev config</code> to start a new blank project - or install a CMS.</p> <p>Run <code>ddev start</code> if there is already a configured DDEV project in your repository.</p> <p>Troubleshooting:</p> <p>If there are errors after restarting a codespace, use <code>ddev restart</code> or <code>ddev poweroff</code>.</p> <p>You can also use the commands</p> <ul> <li>\u201cCodespaces: Rebuild container\u201d</li> <li>\u201cCodespaces: Full rebuild container\u201d (Beware: database will be deleted)</li> </ul> <p>via the Visual Studio Code Command Palette:  </p> <ul> <li>\u2318 + SHIFT + P on a Mac</li> <li>CTRL + SHIFT + P on Windows/Linux</li> <li>from the Application Menu, click View &gt; Command Palette (Firefox)</li> </ul> <p>If you need DDEV-specific assistance or have further questions, see support.</p> <p>Your updated <code>devcontainer.json</code> file may differ depending on your project, but you should have <code>install-ddev</code> in the <code>features</code> section. </p> <p>Normal Linux installation also works</p> <p>You can also install DDEV as if it were on any normal Linux installation.</p>"},{"location":"users/install/ddev-installation/#docker-integration","title":"Docker integration","text":"<p>DDEV in Codespaces relies on <code>docker-in-docker</code>, which is installed by default when you use the image <code>\"mcr.microsoft.com/devcontainers/universal:2\"</code>. Please be aware: GitHub Codespaces and its Docker-integration (docker-in-docker) are relatively new. See devcontainers/features for general support and issues regarding Docker-support.  </p>"},{"location":"users/install/ddev-installation/#ddevs-router-is-not-used","title":"DDEV\u2019s router is not used","text":"<p>Since Codespaces handles all the routing, the internal DDEV router will not be used on Codespaces. Therefore config settings like <code>web_extra_exposed_ports</code> will have no effect. </p> <p>You can expose ports via the <code>ports</code> setting, which is usually not recommended if you work locally due to port conflicts. But you can load these additional Docker compose files only when Codespaces is detected. See Defining Additional Services for more information. </p> <pre><code>services:\n    web:\n        ports:\n        - \"5174:5174\"\n</code></pre>"},{"location":"users/install/ddev-installation/#default-environment-variables","title":"Default environment variables","text":"<p>Codespace instances already provide some default environment values. You can inherit and inject them in your <code>.ddev/config.yaml</code>:</p> <pre><code>web_environment: \n    - CODESPACES\n    - CODESPACE_NAME\n    - GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN\n</code></pre>"},{"location":"users/install/ddev-installation/#advanced-usage-via-devcontainerjson","title":"Advanced usage via devcontainer.json","text":"<p>A lot more customization is possible via the <code>devcontainer.json</code>-configuration. You can install Visual Studio Code extensions by default or run commands automatically. </p>"},{"location":"users/install/ddev-installation/#postcreatecommand","title":"postCreateCommand","text":"<p>The <code>postCreateCommand</code> lets you run commands automatically when a new codespace is launched. DDEV commands are available here.</p> <p>The event is triggered on: fresh creation, rebuilds and full rebuilds. <code>ddev poweroff</code> is used in this example to avoid errors on rebuilds since some Docker containers are kept. </p> <p>You usually want to use a separate bash script to do this, as docker might not yet be available when the command starts to run.</p> <pre><code>{\n    \"image\": \"mcr.microsoft.com/devcontainers/universal:2\",\n    \"features\": {\n        \"ghcr.io/ddev/ddev/install-ddev:latest\": {}\n    },\n    \"portsAttributes\": {\n        \"3306\": {\n            \"label\": \"database\"\n        },\n        \"8027\": {\n            \"label\": \"mailpit\"\n        },\n        \"8080\": {\n            \"label\": \"web http\"\n        },\n        \"8443\": {\n            \"label\": \"web https\"\n        }\n    },\n    \"postCreateCommand\": \"chmod +x .devcontainer/setup_project.sh &amp;&amp; .devcontainer/setup_project.sh\"\n}\n</code></pre> <pre><code>#!/bin/bash\nset -ex\n\nwait_for_docker() {\n  while true; do\n    docker ps &gt; /dev/null 2&gt;&amp;1 &amp;&amp; break\n    sleep 1\n  done\n  echo \"Docker is ready.\"\n}\n\nwait_for_docker\n\n# download images beforehand, optional\nddev debug download-images\n\n# avoid errors on rebuilds\nddev poweroff\n\n# start ddev project automatically\nddev start -y\n\n# further automated install / setup steps, e.g. \nddev composer install \n</code></pre> <p>To check for errors during the <code>postCreateCommand</code> action, use the command </p> <ul> <li>\u201cCodespaces: View creation log\u201d </li> </ul> <p>via the Visual Studio Code Command Palette:  </p> <ul> <li>\u2318 + SHIFT + P on a Mac</li> <li>CTRL + SHIFT + P on Windows/Linux</li> <li>from the Application Menu, click View &gt; Command Palette (Firefox)</li> </ul> <p></p>"},{"location":"users/install/ddev-installation/#manual","title":"Manual","text":"<p>DDEV is a single executable, so installation on any OS is a matter of copying the <code>ddev</code> binary for your architecture into the appropriate system path on your machine.</p> <ul> <li>Download and extract the latest DDEV release for your architecture.</li> <li>Move <code>ddev</code> to <code>/usr/local/bin</code> with <code>mv ddev /usr/local/bin/</code> (may require <code>sudo</code>), or another directory in your <code>$PATH</code> as preferred.</li> <li>Run <code>ddev</code> to test your installation. You should see DDEV\u2019s command usage output.</li> <li> <p>As a one-time initialization, run <code>mkcert -install</code>, which may require your <code>sudo</code> password.</p> <p>If you don\u2019t have <code>mkcert</code> installed, download the latest release for your architecture and <code>sudo mv &lt;downloaded_file&gt; /usr/local/bin/mkcert &amp;&amp; sudo chmod +x /usr/local/bin/mkcert</code>.</p> </li> </ul>"},{"location":"users/install/ddev-upgrade/","title":"Upgrading DDEV","text":"<p>Installing and upgrading DDEV are nearly the same thing, because you\u2019re upgrading the <code>ddev</code> binary that talks with Docker. You can update this file like other software on your system, whether it\u2019s with a package manager or traditional installer.</p> macOSLinuxWindowsGitpodCodespacesManual"},{"location":"users/install/ddev-upgrade/#macos","title":"macOS","text":""},{"location":"users/install/ddev-upgrade/#homebrew","title":"Homebrew","text":"<pre><code># Upgrade DDEV to the latest version\nbrew upgrade ddev/ddev/ddev\n</code></pre>"},{"location":"users/install/ddev-upgrade/#install-script","title":"Install Script","text":"<pre><code># Download and run the script to replace the DDEV binary\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre> Need a specific version? <p>Use the <code>-s</code> argument to specify a specific stable or prerelease version:</p> <pre><code># Download and run the script to update to DDEV v1.21.4\ncurl -fsSL https://ddev.com/install.sh | bash -s v1.21.4\n</code></pre>"},{"location":"users/install/ddev-upgrade/#linux","title":"Linux","text":""},{"location":"users/install/ddev-upgrade/#debianubuntu","title":"Debian/Ubuntu","text":"<pre><code># Update package information and all packages including DDEV\nsudo apt update &amp;&amp; sudo apt upgrade\n</code></pre>"},{"location":"users/install/ddev-upgrade/#fedora-red-hat-etc","title":"Fedora, Red Hat, etc.","text":"<pre><code># Upgrade the DDEV package\nsudo dnf upgrade ddev\n</code></pre>"},{"location":"users/install/ddev-upgrade/#arch-linux","title":"Arch Linux","text":"<pre><code># Upgrade the DDEV package\nyay -Syu ddev-bin\n</code></pre>"},{"location":"users/install/ddev-upgrade/#windows","title":"Windows","text":""},{"location":"users/install/ddev-upgrade/#wsl2-docker","title":"WSL2 + Docker","text":"<p>If you\u2019re using WSL2, the upgrade process is the same regardless of how you installed DDEV.</p> <p>Open the WSL2 terminal, for example \u201cUbuntu\u201d from the Windows start menu, and run the following:</p> <pre><code># Upgrade the DDEV package\nsudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"users/install/ddev-upgrade/#traditional-windows","title":"Traditional Windows","text":""},{"location":"users/install/ddev-upgrade/#chocolatey","title":"Chocolatey","text":"<pre><code># Turn off DDEV and upgrade it\nddev poweroff &amp;&amp; choco upgrade ddev\n</code></pre>"},{"location":"users/install/ddev-upgrade/#installer","title":"Installer","text":"<p>Download and run the Windows installer for the latest DDEV release (<code>ddev_windows_installer.&lt;version&gt;.exe</code>).</p>"},{"location":"users/install/ddev-upgrade/#gitpod","title":"Gitpod","text":"<pre><code># Update package information and all packages including DDEV\nsudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"users/install/ddev-upgrade/#github-codespaces","title":"GitHub Codespaces","text":"<pre><code># Update package information and all packages including DDEV\nsudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"users/install/ddev-upgrade/#manual","title":"Manual","text":"<p>Upgrade using the exact same manual install process:</p> <ul> <li>Download and extract the latest DDEV release for your architecture.</li> <li>Move <code>ddev</code> to <code>/usr/local/bin</code> with <code>mv ddev /usr/local/bin/</code> (may require <code>sudo</code>), or another directory in your <code>$PATH</code> as preferred.</li> <li>Run <code>ddev --version</code> to confirm you\u2019re running the expected version.</li> </ul>"},{"location":"users/install/docker-installation/","title":"Docker Installation","text":"<p>You\u2019ll need a Docker provider on your system before you can install DDEV.</p> macOSLinuxWindowsGitpodCodespaces <p></p>"},{"location":"users/install/docker-installation/#macos","title":"macOS","text":"<p>Install one of the supported Docker providers. OrbStack is the easiest to set up.</p> <ul> <li>OrbStack</li> <li>Colima</li> <li>Docker Desktop</li> <li>Rancher Desktop</li> </ul>"},{"location":"users/install/docker-installation/#orbstack","title":"OrbStack","text":"<p>OrbStack is a new Docker provider that is very popular with DDEV users because it\u2019s fast, lightweight, and easy to install. It\u2019s a good choice for most users. It is not open-source, and it is not free for professional use.</p> <ol> <li>Install OrbStack with <code>brew install orbstack</code> or download it directly.</li> <li>Run the OrbStack app (from Applications) to finish setup, choosing \u201cDocker\u201d as the option. Answer any prompts to allow OrbStack access.</li> </ol>"},{"location":"users/install/docker-installation/#colima","title":"Colima","text":"<p>Colima is a free and open-source project that bundles a container management tool called Lima with a Docker (Linux) backend.</p> <ol> <li>Run <code>docker help</code> to make sure you\u2019ve got the Docker client installed. If you get an error, install it with Homebrew by running <code>brew install docker</code>.</li> <li>Install Colima with <code>brew install colima</code>.</li> <li>Start Colima with 4 CPUs, 6GB memory, 100GB storage, and Cloudflare DNS, adjusting as needed: <pre><code>colima start --cpu 4 --memory 6 --disk 100 --vm-type=qemu --mount-type=sshfs --dns=1.1.1.1\n</code></pre> (On macOS versions before Ventura, omit the <code>--vm-type=qemu</code> flag as it doesn\u2019t work on older OS versions.)</li> </ol> <p>After the initial run above, you can use <code>colima start</code> or use <code>colima start -e</code> to edit the configuration file. Run <code>colima status</code> at any time to check Colima\u2019s status.</p> <p>When your computer restarts, you\u2019ll need to <code>colima start</code> again. If you prefer to start Colima automatically on reboot, use <code>brew services start colima</code> in Colima version 0.6+ to configure auto-start.</p> <p>Colima disk allocation</p> <p>In Colima versions starting with 0.5.4 you can increase\u2014but not decrease\u2014the disk allocation by editing <code>~/.colima/default/colima.yaml</code> to change the <code>disk</code> setting to a higher value. For example, <code>disk: 200</code> will increase allocation to 200 gigabytes. Then <code>colima restart</code> will result in the new disk allocation.</p> <p>Docker contexts let the Docker client point at the right Docker server</p> <p>Colima activates its own Docker context to prevent conflicts with Docker Desktop. If you run <code>docker context ls</code>, you\u2019ll see a list of available contexts where the currently-active one is indicated with a <code>*</code>\u2014which will be <code>colima</code> after you\u2019ve started it. You can change to the default (Docker Desktop) with <code>docker context use default</code> or change back with <code>docker context use colima</code>. This means you can run Docker Desktop and Colima at the same time, but be mindful of which context you\u2019re pointing at!</p> <p>Colima can only work in your home directory unless you do further configuration</p> <p>By default, Colima only mounts your home directory, so it\u2019s easiest to use it in a subdirectory there. See the <code>~/.colima/default/colima.yaml</code> for more information, or notes in colima.yaml.</p>"},{"location":"users/install/docker-installation/#docker-desktop-for-mac","title":"Docker Desktop for Mac","text":"<p>Docker Desktop for Mac can be installed via Homebrew (<code>brew install --cask docker</code>) or can be downloaded from docker.com. It has long been supported by DDEV and has extensive automated testing.</p> <p>Ports unavailable?</p> <p>If you get messages like <code>Ports are not available... exposing port failed... is vmnetd running?</code> it means you need to check the \u201cAllow privileged port mapping (requires password)\u201d checkbox in the \u201cAdvanced\u201d section of the Docker Desktop configuration. You may have to stop and restart Docker Desktop.</p>"},{"location":"users/install/docker-installation/#rancher-desktop","title":"Rancher Desktop","text":"<p>Rancher Desktop is another free and open-source Docker provider. Install from Rancher Desktop.io. It has automated testing with DDEV. When installing, choose only the Docker option and turn off Kubernetes.</p>"},{"location":"users/install/docker-installation/#migrating-projects-between-docker-providers","title":"Migrating Projects Between Docker Providers","text":"<ul> <li>OrbStack has built-in migration of images and volumes from Docker Desktop.</li> <li>Move projects between other Docker providers using How can I migrate from one Docker provider to another?.</li> </ul>"},{"location":"users/install/docker-installation/#linux","title":"Linux","text":"<p>Avoid Docker Desktop for Linux</p> <p>Current releases of Docker Desktop for Linux are not usable with DDEV for a number of reasons, and also exhibit some of the problems Docker Desktop has on other platforms. Please use the normal <code>docker-ce</code> installation described here.</p> <p>Docker installation on Linux depends on what flavor you\u2019re using. It\u2019s best to use your native package repository (<code>apt</code>, <code>yum</code>, etc.):</p> <ul> <li>Ubuntu</li> <li>CentOS</li> <li>Debian</li> <li>Fedora</li> <li>binaries</li> </ul> <p>Linux installation absolutely requires adding your Linux user to the <code>docker</code> group, and configuring the Docker daemon to start at boot. See Post-installation steps for Linux.</p> <p>Don\u2019t <code>sudo</code> with <code>docker</code> or <code>ddev</code></p> <p>Don\u2019t use <code>sudo</code> with the <code>docker</code> command. If you find yourself needing it, you haven\u2019t finished the installation. You also shouldn\u2019t use <code>sudo</code> with <code>ddev</code> unless it\u2019s specifically for the <code>ddev hostname</code> command.</p> <p>On systems without <code>systemd</code> or its equivalent\u2014mostly if you\u2019re installing inside WSL2\u2014you\u2019ll need to manually start Docker with <code>service docker start</code> or the equivalent in your distro. You can add this to your shell profile.</p>"},{"location":"users/install/docker-installation/#windows","title":"Windows","text":"<p>If you\u2019re working inside WSL2, which we recommend, you can install Docker Engine (docker-ce) inside of it. Otherwise, you can install Docker Desktop, which works with both traditional Windows and WSL2.</p>"},{"location":"users/install/docker-installation/#docker-ce-inside-windows-wsl2","title":"Docker CE Inside Windows WSL2","text":"<p>Many have moved away from using Docker Desktop in favor of the Docker-provided open-source <code>docker-ce</code> package inside WSL2.</p> <p>The instructions for DDEV Installation in WSL2 include Docker CE setup and a script that does almost all the work. Please use those.</p>"},{"location":"users/install/docker-installation/#docker-desktop-for-windows","title":"Docker Desktop for Windows","text":"<p>Docker Desktop for Windows can be downloaded via Chocolatey with <code>choco install docker-desktop</code> or it can be downloaded from docker.com. It has extensive automated testing with DDEV, and works with DDEV both on traditional Windows and in WSL2.</p> <p>See WSL2 DDEV Installation for help installing DDEV with Docker Desktop on WSL2.</p>"},{"location":"users/install/docker-installation/#gitpod","title":"Gitpod","text":"<p>With Gitpod you don\u2019t have to install anything at all. Docker is all set up for you.</p>"},{"location":"users/install/docker-installation/#github-codespaces","title":"GitHub Codespaces","text":"<p>You can set up GitHub Codespaces following the instructions in the DDEV Installation section.</p>"},{"location":"users/install/docker-installation/#alternate-docker-providers","title":"Alternate Docker Providers","text":"<p>There are a number of alternate Docker providers that can be used with DDEV.</p>"},{"location":"users/install/docker-installation/#testing-and-troubleshooting-your-docker-installation","title":"Testing and Troubleshooting Your Docker Installation","text":"<p>Docker needs to be able to do a few things for DDEV to work:</p> <ul> <li>Mount the project code directory, typically a subdirectory of your home folder, from the host into the container.</li> <li>Access TCP ports on the host to serve HTTP and HTTPS. These are ports 80 and 443 by default, but they can be changed on a per-project basis.</li> </ul> <p>We can use a single Docker command to make sure Docker is set up to do what we want:</p> <p>In your project directory run the following (using Git Bash if you\u2019re on Windows!):</p> <pre><code>docker run --rm -t -p 80:80 -p 443:443 -v \"//$PWD:/tmp/projdir\" busybox sh -c \"echo ---- Project Directory &amp;&amp; ls /tmp/projdir\"\n</code></pre> <p>The result should be a list of the files in your project directory.</p> <p>If you get an error or don\u2019t see the contents of your project directory, you\u2019ll need to troubleshoot further:</p> <ul> <li>For a \u201cport is already allocated\u201d error, see the Troubleshooting page.</li> <li>\u201cinvalid mount config for type \u201cbind\u201d: bind mount source path does not exist: [some path]\u201d means the filesystem isn\u2019t successfully shared into the Docker container.</li> <li>If you\u2019re seeing \u201cThe path (\u2026) is not shared and is not known to Docker\u201d, find File sharing in your Docker settings make sure the appropriate path or drive is included.</li> <li>\u201cError response from daemon: Get registry-1.docker.io/v2/\u201d may mean Docker isn\u2019t running or you don\u2019t have internet access. Try starting or restarting Docker, and confirm you have a working internet connection.</li> <li>If you\u2019re seeing \u201c403 authentication required\u201d trying to <code>ddev start</code>, run <code>docker logout</code> and try again. Docker authentication is not required for any normal DDEV action.</li> </ul>"},{"location":"users/install/performance/","title":"Performance","text":"<p>DDEV is continually focused on quick project startup and fast responses to its web requests. DDEV\u2019s performance is mostly an issue of how Docker runs on your workstation.</p> <p>On Linux, including Windows WSL2 and Gitpod, Docker is fast. Most people are happy with Linux performance and don\u2019t need to change anything.</p> <p>On macOS and Windows with Docker Desktop, allocated resources and mounted filesystem performance can be significant bottlenecks. Taking a bit of time to optimize your setup can yield massive performance gains.</p>"},{"location":"users/install/performance/#filesystem-performance","title":"Filesystem Performance","text":"<p>Mutagen can offer a big performance boost on macOS and Windows. It\u2019s fast and doesn\u2019t need any setup; you only need to enable it. Before Mutagen, Mac and Windows users configured NFS for speed improvements\u2014though it requires setup and isn\u2019t as fast.</p> <p>Mutagen is enabled by default on Mac and traditional Windows, and it can be disabled per-project or globally.</p> MutagenNFS"},{"location":"users/install/performance/#mutagen","title":"Mutagen","text":""},{"location":"users/install/performance/#what-mutagen-does","title":"What Mutagen Does","text":"<p>The Mutagen asynchronous caching feature is the best way to improve DDEV\u2019s web-serving performance on macOS and Windows, and we recommend it for most projects. It can be significantly faster than NFS, massively faster than plain Docker or Colima, and it makes filesystem watchers (<code>fsnotify</code>/<code>inotify</code>) work correctly.</p> <p>Mutagen decouples in-container reads and writes from reads and writes on the host machine, so each can enjoy near-native speed. A change on the host gets changed \u201cpretty soon\u201d in the container, and a change in the container gets updated \u201cpretty soon\u201d on the host; neither filesystem is stuck waiting on the other one. This \u201cpretty soon\u201d means, however, that there\u2019s a brief window where files on the host may not exactly match the files inside the container\u2014so files that manage to change in both places can lead to conflicts.</p> <p>Docker bind-mounts, the traditional approach to getting your code into DDEV\u2019s web container, check every file access against the file on the host. Docker\u2019s way of doing these checks macOS and Windows is not very performant, even with NFS. Linux and Linux-like systems are faster because Docker provides native file-access performance.</p> <p>While Mutagen works fine and has automated tests for Linux and Windows WSL2, it may not be worth enabling on those systems since it won\u2019t make the dramatic difference it does on macOS and Windows.</p> <p>Another major advantage of Mutagen over NFS is that it supports filesystem notifications, so file-watchers on both the host and inside the container will be notified when changes occur. This is a great advantage for many development tools, which otherwise have to poll for changes at greater expense. Instead, they can be notified via normal <code>inotify</code>/<code>fsnotify</code> techniques.</p>"},{"location":"users/install/performance/#enabling-and-disabling-mutagen","title":"Enabling and Disabling Mutagen","text":"<p>Don\u2019t Install Mutagen</p> <p>You do not need to install anything to use Mutagen. DDEV installs and maintains its own <code>mutagen</code> binary.</p> <p>On macOS and traditional Windows, Mutagen is enabled globally by default. You can disable it with <code>ddev mutagen reset &amp;&amp; ddev config global --performance-mode=none &amp;&amp; ddev config --performance-mode=none</code>.</p> <p>If you\u2019d rather use Mutagen on a specific project, run <code>ddev stop</code>, enable it with <code>ddev config --performance-mode=mutagen</code>, and <code>ddev start</code> again.</p> <p>You can\u2019t disable Mutagen on individual projects if it\u2019s enabled globally.</p> <p>To stop using Mutagen on a project, run <code>ddev mutagen reset &amp;&amp; ddev config --performance-mode=none</code>.</p> <p>The <code>nfs-mount-enabled</code> feature is automatically turned off if you\u2019re using Mutagen.</p>"},{"location":"users/install/performance/#mutagen-and-user-generated-uploads","title":"Mutagen and User-Generated Uploads","text":"<p>When Mutagen is enabled, DDEV attempts to exclude user-generated files in <code>upload_dirs</code> (if they exist) from syncing. It does this by using a bind-mount in the generated docker-compose configuration, and excluding the directories from syncing in <code>.ddev/mutagen/mutagen.yml</code>.</p> <p>If you have a non-standard location for user-generated files, like <code>private/fileadmin</code> with the deprecated <code>typo3-secure-web</code> approach, you should override the project defaults by setting <code>upload_dirs</code> in <code>.ddev/config.yaml</code> and pointing it at the correct directory. This will allow Mutagen to sync correctly.</p> <p>If you change the <code>upload_dirs</code>, run <code>ddev mutagen reset</code> to let Mutagen know about the changed behavior.</p>"},{"location":"users/install/performance/#mutagen-integration-caveats","title":"Mutagen Integration Caveats","text":"<p>If you run into an issue with Mutagen, please try to recreate and report it via a support channel!</p> <p>Mutagen has generally been great for those using it, but it\u2019s good to be aware of its trade-offs:</p> <ul> <li>It may not be the right choice for every project. Filesystem consistency has been excellent with Mutagen, but performance is its specialty. If consistency is your highest priority, then there are reasons to be cautious. Two-way sync is a very difficult computational problem, and problems may surface.</li> <li>The initial sync takes longer.   For most projects, the first-time Mutagen sync of a project takes no more than 30 seconds, and subsequent starts take 10 seconds or less. If your project is taking a long time to sync, especially after the initial sync, see Advanced Configuration below to figure out what\u2019s taking time and how to bind-mount it.</li> <li>Reset if you change <code>mutagen.yml</code>. If you take control of the <code>mutagen.yml</code> file and make changes to it, run <code>ddev mutagen reset</code> after making changes.</li> <li>Avoid file changes when DDEV is stopped. If you change files\u2014checking out a different branch, removing a file\u2014while DDEV is stopped, Mutagen has no way to know about it. When you start again, it will get the files that are stored and bring them back to the host. If you do change files while DDEV is stopped, run <code>ddev mutagen reset</code> before restarting the project so Mutagen only starts with awareness of the host\u2019s file contents.</li> <li>It modestly increases disk usage. Mutagen integration increases the size of your project code\u2019s disk usage, because the code exists both on your computer and inside a Docker volume. Your user-uploaded files directories (<code>upload_dirs</code>) are normally excluded from Mutagen so they\u2019re not a problem for most project types or generic configurations where <code>upload_dirs</code> is specified. Take care that you have enough overall disk space, and that on macOS you\u2019ve allocated enough file space in Docker Desktop. If you have other large directories you can exclude specific directories from getting synced and use a regular Docker mount for them instead.</li> <li>Beware simultaneous changes to the same file in both filesystems. As we pointed out above, any project likely to change the same file on the host and inside the container may encounter conflicts.</li> <li>Massive changes can cause problems. Massive file changes on the host or in the container are the most likely to introduce issues. This integration has been tested extensively with major changes introduced by <code>ddev composer</code> and <code>ddev composer create</code>, but be aware of this issue. Changing Git branches, <code>npm install</code>, <code>yarn install</code>, or a script that deletes huge sections of the synced data are related behaviors that should raise caution. Again, use <code>ddev mutagen reset</code> before restarting the project if you want to be sure Mutagen starts out looking at the host machine\u2019s files.</li> <li>Mutagen is asynchronous. A massive change in either filesystem can result in lag as all changed files are handled. You can use <code>ddev mutagen monitor</code> to get a better look at what\u2019s happening.</li> <li>You can manually trigger a sync. <code>ddev start</code> and <code>ddev stop</code> automatically force a Mutagen sync. You can cause an explicit sync with <code>ddev mutagen sync</code> and see syncing status with <code>ddev mutagen status</code>.</li> <li>Be mindful of in-container Composer actions. If you run Composer actions inside the container with <code>ddev ssh</code>, it\u2019s a good idea to run <code>ddev mutagen sync</code> and make sure they\u2019re synced as soon as possible. Most people won\u2019t notice the difference and Mutagen will get it synced soon enough.</li> <li>Perform big Git operations on the host side. Git actions that change lots of files, like switching branches, are best done on the host side and not inside the container. You may want to do an explicit <code>ddev mutagen sync</code> command after doing something like that to be sure all changes are picked up quickly.</li> <li>Share projects carefully with non-Mutagen users. If you share a project with some users that want Mutagen, perhaps on macOS, and other users that don\u2019t want or need it, perhaps on WSL2, don\u2019t check in <code>.ddev/config.yaml</code>\u2019s <code>performance_mode: \"mutagen\"</code>. Instead, either use global performance mode configuration or add a not-checked-in, project-level <code>.ddev/config.performance.yaml</code> solely to include <code>performance_mode: \"mutagen\"</code> in it. That way, only users with that file will have Mutagen enabled.</li> <li>Windows symlinks have some Mutagen restrictions. On macOS and Linux (including WSL2) the default <code>.ddev/mutagen/mutagen.yml</code> chooses the <code>posix-raw</code> type of symlink handling. (See mutagen docs). This basically means any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. Mutagen, however, does not support <code>posix-raw</code> on traditional Windows, so DDEV uses the <code>portable</code> symlink mode. The result is that on Windows, using Mutagen, symlinks must be strictly limited to relative links that are inside the Mutagen section of the project.</li> <li>It\u2019s a filesystem feature. Make backups! If we\u2019ve learned anything from computer file-storage adventures, it\u2019s that backups are always a good idea!</li> <li>Large <code>node_modules</code> can cause cause slow sync times When you\u2019re compiling static, front-end assets with tools like <code>npm</code> and <code>yarn</code>, e.g. Drupal themes, syncing the <code>node_modules</code> directory can be very slow. We recommend excluding <code>node_modules</code> by adding it to the <code>sync:defaults:ignore:paths</code> list in <code>mutagen.yml</code>; see Advanced Mutagen Configuration Options for details. This problem can also occur with directories that contain large binaries or fonts, for example.</li> </ul>"},{"location":"users/install/performance/#syncing-after-git-checkout","title":"Syncing After <code>git checkout</code>","text":"<p>In general, it\u2019s best practice on most projects to do significant Git operations on the host, but they can be disruptive to the sync. It\u2019s easy to add a Git post-checkout hook to do a <code>ddev mutagen sync</code> operation though. Add a <code>.git/hooks/post-checkout</code> file to your project and make it executable with <code>chmod +x .git/hooks/post-checkout</code>:</p> <pre><code>#!/bin/bash\nddev mutagen sync || true\n</code></pre>"},{"location":"users/install/performance/#syncing-after-yarn-npm-and-pnpm-actions","title":"Syncing After <code>yarn</code>, <code>npm</code>, and <code>pnpm</code> Actions","text":"<p>Actions by those programs can also set off massive filesystem changes.</p> <p>You should run <code>ddev mutagen sync</code> in order to get things into sync, or simply wait.</p> <p></p>"},{"location":"users/install/performance/#advanced-mutagen-configuration-options","title":"Advanced Mutagen Configuration Options","text":"<p>The Mutagen project provides extensive configuration options.</p> <p>Each DDEV project includes a <code>.ddev/mutagen/mutagen.yml</code> file by default, with basic defaults you can override if you remove the <code>#ddev-generated</code> line at the beginning of the file.</p> <p>If you edit the <code>.ddev/mutagen/mutagen.yml</code> file:</p> <ul> <li>Remove the <code>#ddev-generated</code> line</li> <li>Execute a <code>ddev mutagen reset</code> to avoid the situation where the Docker volume and Mutagen session still have files from an older configuration.</li> </ul> <p>The most likely thing you\u2019ll want to do is to exclude a path from mutagen syncing, which you can do in the <code>paths:</code> section of the <code>ignore:</code> stanza in the <code>.ddev/mutagen/mutagen.yml</code>.</p> <p>You can exclude a path from Mutagen syncing and bind-mount something from the host or a different volume on that path with a <code>docker-compose.*.yaml</code> file. So if you have a heavy project subdirectory (lots of fonts or user-generated content, for example), you could exclude that subdirectory in <code>.ddev/mutagen/mutagen.yml</code> and add a <code>docker-compose.exclude.yaml</code>.</p> <p>For example, if you want the <code>node_modules</code> subdirectory of the project to be available inside the container, but don\u2019t need Mutagen to be syncing it, you can use normal Docker bind-mounting for that subdirectory:</p> <ul> <li>Take over the <code>.ddev/mutagen/mutagen.yml</code> by removing the <code>#ddev-generated</code> line.</li> <li>Add <code>/web/core/node_modules</code> to the excluded paths:</li> </ul> <pre><code>ignore:\n  paths:\n  - \"/web/core/node_modules\"\n</code></pre> <ul> <li>Add a <code>.ddev/docker-compose.bindmount.yaml</code>:</li> </ul> <pre><code>services:\n  web:\n    volumes:\n    - \"../web/core/node_modules:/var/www/html/web/core/node_modules\"\n</code></pre> <ul> <li><code>ddev mutagen reset</code> and <code>ddev start</code> to get the new configuration.</li> </ul>"},{"location":"users/install/performance/#troubleshooting-mutagen-sync-issues","title":"Troubleshooting Mutagen Sync Issues","text":"<ul> <li>Please make sure that DDEV projects work without Mutagen before troubleshooting it. Run <code>ddev config --performance-mode=none &amp;&amp; ddev restart</code>.</li> <li>Rename your project\u2019s <code>.ddev/mutagen/mutagen.yml</code> file to <code>.ddev/mutagen/mutagen.yml.bak</code> and run <code>ddev restart</code>. This ensures you\u2019ll have a fresh version in case the file has been changed and <code>#ddev-generated</code> removed.</li> <li>Avoid having Mutagen sync large binaries, which can cause <code>ddev start</code> to take a long time. The <code>.tarballs</code> directory is automatically excluded, so Mutagen will ignore anything you move there. To see what Mutagen is trying to sync, run <code>ddev mutagen status -l</code> in another window.</li> <li><code>export DDEV_DEBUG=true</code> will provide more information about what\u2019s going on with Mutagen.</li> <li>As of DDEV v1.21.2, DDEV\u2019s Mutagen daemon keeps its data in a DDEV-only <code>MUTAGEN_DATA_DIRECTORY</code>, <code>~/.ddev_mutagen_data_directory</code>.</li> <li> <p>DDEV\u2019s private Mutagen binary is installed in <code>~/.ddev/bin/mutagen</code>. You can use all the features of Mutagen with <code>export MUTAGEN_DATA_DIRECTORY=~/.ddev_mutagen_data_directory</code> and running the Mutagen binary in <code>~/.ddev/bin/mutagen</code>, for example:and <code>~/.ddev/bin/mutagen daemon stop</code>.</p> <pre><code>export DDEV_DEBUG=true\nexport MUTAGEN_DATA_DIRECTORY=~/.ddev_mutagen_data_directory\nexport PATH=~/.ddev/bin:$PATH\nmutagen sync list -l\nmutagen sync monitor\n</code></pre> </li> <li> <p>You can run the diagnose_mutagen.sh script to gather information about Mutagen\u2019s setup. Please share output from it when creating an issue or seeking support.</p> </li> <li>Try <code>ddev poweroff</code> or <code>~/.ddev/bin/mutagen daemon stop &amp;&amp; ~/.ddev/bin/mutagen daemon start</code> to restart the Mutagen daemon if you suspect it\u2019s hanging.</li> <li>Use <code>ddev mutagen reset</code> if you suspect trouble, and always after changing <code>.ddev/mutagen/mutagen.yml</code>. This restarts the project\u2019s Mutagen data (Docker volume + Mutagen session) from scratch.</li> <li><code>ddev mutagen monitor</code> can help watch Mutagen behavior. It\u2019s the same as <code>~/.ddev/bin/mutagen sync monitor &lt;syncname&gt;</code>.</li> <li><code>ddev debug mutagen</code> will let you run any Mutagen command using the binary in <code>~/.ddev/bin/mutagen</code>.</li> <li>If you\u2019re working on the host and expecting things to show up immediately inside the container, you can learn a lot by running <code>ddev mutagen monitor</code> in a separate window as you work. You\u2019ll see when Mutagen responds to your changes and get an idea about how much delay there is.</li> <li>Consider <code>ddev stop</code> before massive file change operations, like moving a directory.</li> <li>If you get in real trouble, run <code>ddev stop</code>, reset your files with Git, and run <code>ddev mutagen reset</code> to throw away the Docker volume which may already have incorrect files on it.</li> </ul>"},{"location":"users/install/performance/#advanced-mutagen-troubleshooting","title":"Advanced Mutagen Troubleshooting","text":"<p>You can observe what Mutagen is doing by watching <code>ddev mutagen monitor</code> in another terminal window to see the results. However, Mutagen has full logging. You can run it with <code>ddev mutagen logs</code>.</p>"},{"location":"users/install/performance/#mutagen-strategies-and-design-considerations","title":"Mutagen Strategies and Design Considerations","text":"<p>Mutagen provides enormous speed boosts in everyday usage, but it\u2019s trying desperately under the hood to keep container changes reflected on the host and vice versa.</p> <p>DDEV mounts a fast Docker volume onto <code>/var/www/html</code> inside the <code>web</code> container, then delegates to the Mutagen daemon (on the host). That daemon has the job of keeping all host project contents in sync with the contents of the Docker volume.</p> <p>Consistency is a high priority for DDEV\u2019s integration, which tries at key points to make sure everything is completely consistent and in sync.</p> <p>The Mutagen daemon\u2019s life cycle and sync sessions are something like this:</p> <ol> <li>On <code>ddev start</code>, the Mutagen agent will be started if it\u2019s not already running.</li> <li>If there\u2019s already a sync session for the project, it\u2019s resumed.</li> <li>On <code>ddev stop</code> the sync session is flushed to ensure consistency, then paused.</li> </ol> <p>A synchronous flush happens after any <code>ddev composer</code> command, since Composer may cause massive changes to the filesystem inside the container that need to be synced before operation continues.</p> <p>If you need to reset everything for a project, you can do it with <code>ddev mutagen reset</code>, which starts the Mutagen session from scratch and removes the Docker volume so it can be recreated from scratch.</p>"},{"location":"users/install/performance/#safe-to-use-with-other-mutagen-installations","title":"Safe to Use with Other Mutagen Installations","text":"<p>DDEV requires and provides a specific version of Mutagen, which you can see running <code>ddev version</code>.  If another <code>mutagen</code> instance or daemon is installed on your workstation it doesn\u2019t matter, because DDEV\u2019s version runs separately and uses a different data directory.</p>"},{"location":"users/install/performance/#nfs","title":"NFS","text":"<p>NFS is deprecated</p> <p>NFS is deprecated and no longer recommended. This feature may be removed in a future release.</p>"},{"location":"users/install/performance/#using-nfs-to-mount-the-project-into-the-web-container","title":"Using NFS to Mount the Project into the Web Container","text":"<p>NFS (Network File System) is a classic, mature Unix technique to mount a filesystem from one device to another. It provides significantly improved web server performance on macOS and Windows. It doesn\u2019t really impact performance on Linux, so we don\u2019t recommend it there.</p> <p>DDEV supports this technique and requires pre-configuration on your host computer, facilitated by a setup script that asks for your <code>sudo</code> password when it\u2019s necessary:</p> <ol> <li>Make sure DDEV is already working and you can use it.</li> <li>Use the script below for your OS to configure the NFS server and exports files.</li> <li>Test that NFS is working correctly by using <code>ddev debug nfsmount</code> in a project directory. The first line should report something like \u201cSuccessfully accessed NFS mount of /path/to/project\u201d.</li> <li>Enable NFS mounting globally with <code>ddev config global --performance-mode=nfs</code>. You can also configure NFS mounting on a per-project basis with <code>ddev config --performance-mode=nfs</code> in the project directory, but this is unusual. The project-specific value will override global config.</li> <li><code>ddev start</code> your project and make sure it works normally. Use <code>ddev describe</code> to verify that NFS mounting is being used. The NFS status is near the top of the output of <code>ddev describe</code>.</li> </ol> <p>Skip step 2 if you\u2019re already using NFS!</p> <p>If you\u2019re already using NFS with Vagrant on macOS, for example, and you already have a number of exports, the default home directory export here won\u2019t work\u2014you\u2019ll have overlaps in your <code>/etc/exports</code>. Or on Windows, you may want to use an NFS server other than Winnfsd like the Allegro NFS Server.</p> <p>The recommendations and scripts below are for getting started if, like most people, you don\u2019t already use NFS.</p> macOS NFS SetupWindows NFS Setup <p>Download, inspect, make executable, and run macos_ddev_nfs_setup.sh:</p> <pre><code>curl -O https://raw.githubusercontent.com/ddev/ddev/master/scripts/macos_ddev_nfs_setup.sh &amp;&amp; chmod +x macos_ddev_nfs_setup.sh &amp;&amp; ./macos_ddev_nfs_setup.sh\n</code></pre> <p>This one-time setup stops running DDEV projects, adds your home directory to the <code>/etc/exports</code> config file that <code>nfsd</code> uses, and enables <code>nfsd</code> to run on your computer.</p> <p>This shares your home directory via NFS to any NFS client on your computer, so it\u2019s critical to consider security issues. You can make the shares in <code>/etc/exports</code> more limited, as long as they don\u2019t overlap. NFS doesn\u2019t allow overlapping exports.</p> <p>If your DDEV projects are set up outside your home directory, you\u2019ll need to add a line to <code>/etc/exports</code> for that share as well:</p> <ol> <li>Run <code>sudo vi /etc/exports</code>.</li> <li>Copy the line the script you created (<code>/System/Volumes/Data/Users/username -alldirs -mapall=&lt;your_user_id&gt;:20 localhost</code>).</li> <li>Edit to add the additional path, e.g: <code>/Volumes/SomeExternalDrive -alldirs -mapall=&lt;your_uid&gt;:20 localhost</code>.</li> </ol> <p>The executable components required for Windows NFS, <code>winnfsd</code> and <code>nssm</code>, are packaged with the DDEV Windows Installer in each release. If you\u2019ve used the Windows installer, they\u2019re ready to go.</p> <p>To enable <code>winnfsd</code> as a service, please download, inspect and run <code>windows_ddev_nfs_setup.sh</code> created by the installer at <code>C:\\Program Files\\ddev\\windows_ddev_nfs_setup.sh</code>.</p> <p>You can also download this directly from the GitHub repository) in a Git Bash session on Windows. If your DDEV projects are set up outside your home directory, you\u2019ll need to edit <code>~/.ddev/nfs_exports.txt</code> (created by the script) and restart the service with <code>sudo nssm restart nfsd</code>.</p> <p>Firewall Issues</p> <p>On Windows 10/11 you\u2019ll likely have to allow <code>winnfsd</code> to bypass the Windows Defender Firewall. If you\u2019re getting a timeout with no information after <code>ddev start</code>, try going to Windows Defender Firewall \u2192 Allow an app or feature through Windows Defender Firewall, Change Settings, Allow another app. Then choose <code>C:\\Program Files\\ddev\\winnfsd.exe</code>, assuming that\u2019s where <code>winnfsd</code> is installed.</p>"},{"location":"users/install/performance/#macos-full-disk-access-for-special-directories","title":"macOS Full Disk Access for Special Directories","text":"<ul> <li> <p>If your projects are in a subdirectory of the <code>~/Documents</code> or <code>~/Desktop</code> directories, or on an external drive, you must grant \u201cFull Disk Access\u201d privilege to <code>/sbin/nfsd</code> in System Preferences \u2192 Security &amp; Privacy \u2192 Privacy. In the Full Disk Access section, click the \u201c+\u201d and add <code>/sbin/nfsd</code>:</p> <p></p> <p>You should then see <code>nfsd</code> in the list:</p> <p></p> </li> <li> <p>Run <code>sudo nfsd restart</code>.</p> </li> <li>From a project directory, run <code>ddev debug nfsmount</code> to confirm successful output.</li> </ul>"},{"location":"users/install/performance/#macos-nfs-debugging","title":"macOS NFS Debugging","text":"<ul> <li>Temporarily disable any firewall or VPN.</li> <li>Use <code>showmount -e</code> to find out what\u2019s exported via NFS. If you don\u2019t see a parent of your project directory, NFS can\u2019t work.</li> <li>If nothing is showing, use <code>nfsd checkexports</code> and look carefully for errors.</li> <li>Use <code>ps -ef | grep nfsd</code> to make sure <code>nfsd</code> is running.</li> <li>Restart <code>nfsd</code> with <code>sudo nfsd restart</code>.</li> <li>Add the following to your <code>/etc/nfs.conf</code>:     <pre><code>nfs.server.mount.require_resv_port = 0\nnfs.server.verbose = 3\n</code></pre></li> <li>Run Console.app and search for \u201cnfsd\u201d at the top. Run <code>sudo nfsd restart</code> and read the messages carefully. Try running <code>ddev debug nfsmount</code> in the problematic project directory:     <pre><code>$ ddev debug nfsmount\nSuccessfully accessed NFS mount of /Users/rfay/workspace/d8composer\nTARGET    SOURCE                                                FSTYPE OPTIONS\n/nfsmount :/System/Volumes/Data/Users/rfay/workspace/d8composer nfs    rw,relatime,vers=3,rsize=65536,wsize=65536,namlen=255,hard,    nolock,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=192.168.65.2,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.65.2\n/nfsmount/.ddev\n</code></pre></li> </ul>"},{"location":"users/install/performance/#debugging-ddev-start-failures-with-nfs-mount-enabled","title":"Debugging <code>ddev start</code> Failures with NFS Mount Enabled","text":"<p>There are a number of reasons the NFS mount can fail on <code>ddev start</code>:</p> <ul> <li>Firewall issues.</li> <li>NFS Server not running.</li> <li>Trying to start more than one NFS server.</li> <li>Overlapping NFS exports, typically an issue if you\u2019ve established another NFS client like Vagrant. You\u2019ll need to reconfigure your exports paths so they don\u2019t overlap.</li> <li>Path of project not shared in <code>~/.ddev/nfs_exports.txt</code>.</li> </ul> <p>To debug and solve permission problems:</p> <ul> <li>Try <code>ddev debug nfsmount</code> in a project directory to see if basic NFS mounting is working. If that works, everything else probably will too.</li> <li>When debugging, run <code>ddev restart</code> in between each change. Otherwise, you can have stale mounts inside the container and you\u2019ll miss any benefit you may find in the debugging process.</li> <li>Inspect <code>~/.ddev/nfs_exports.txt</code>.</li> <li>Restart the server with <code>sudo nssm restart nfsd</code>.</li> </ul>"},{"location":"users/install/performance/#windows-specific-nfs-debugging","title":"Windows-specific NFS debugging","text":"<ul> <li>Temporarily disable any firewall, VPN, or virus checker.</li> <li> <p>You can only have one NFS daemon running, so if another application has installed one, you\u2019ll want to use that NFS daemon and reconfigure it to allow NFS mounts of your projects.</p> </li> <li> <p>Stop the running <code>winnfsd</code> service with <code>sudo nssm stop nfsd</code>.</p> </li> <li>Run <code>winnfsd</code> manually in the foreground with <code>winnfsd \"C:\\\\\"</code>. If it immediately returns to the shell prompt, there\u2019s likely another <code>nfsd</code> service running.</li> <li>In another window, in a DDEV project directory, run <code>ddev debug nfsmount</code> to see if it can mount successfully. (The project doesn\u2019t need to be started.) If <code>ddev debug nfsmount</code> is successful, then everything is probably going to work.</li> <li>Confirm <code>~/.ddev/nfs_exports.txt</code> has a line that includes your project directories, then run <code>sudo nssm start nfsd</code> and <code>nssm status nfsd</code>. The status command should show <code>SERVICE_RUNNING</code>.</li> <li>These nssm commands may be useful: <code>nssm help</code>, <code>sudo nssm start nfsd</code>, <code>sudo nssm stop nfsd</code>, <code>nssm status nfsd</code>, <code>sudo nssm edit nfsd</code> (pops up a window that may be hidden), and <code>sudo nssm remove nfsd</code> (also pops up a window, doesn\u2019t work predictably if you haven\u2019t already stopped the service).</li> <li><code>nssm</code> logs failures and what it\u2019s doing to the system event log. Run Event Viewer and filter events:     </li> <li>Please make sure you\u2019ve excluded <code>winnfsd</code> from the Windows Defender Firewall per the installation instructions above.</li> <li>On Windows 10/11 Pro you can visit Turn Windows features on or off and enable Services for NFS \u2192 Client for NFS. The <code>showmount -e</code> command will then show available exports on the current machine. This can help find out if a conflicting server is running or identifying a problem with exports.</li> </ul>"},{"location":"users/install/performance/#freeing-up-system-resources","title":"Freeing Up System Resources","text":"<p>Every project you run uses system resources, and may compete for those resources. A reasonable practice is to individually stop projects you\u2019re not using. You could also stop all projects with <code>ddev poweroff</code> and only start the one you\u2019re working on. <code>ddev list</code> will display all your projects along with each one\u2019s status.</p>"},{"location":"users/install/performance/#docker-desktop-for-mac-settings","title":"Docker Desktop for Mac Settings","text":"<p>Open Docker Desktop\u2019s Preferences, and visit Resources \u2192 Advanced. Here you can adjust the CPUs, memory, and disk allocated to Docker. The defaults work well for a small project or two, but you may want to adjust these upward based on your experience. Most people raise the memory allocation to 6GB or higher. The disk allocation almost always needs to be raised to accommodate increased downloaded images. Your experience will determine what to do with CPUs.</p>"},{"location":"users/install/phpstorm/","title":"PhpStorm Setup","text":"<p>If you work with the PhpStorm IDE, you can configure it for tight integration with DDEV and Docker to more easily run actions, access services, enable autocompletion, and enjoy a more convenient development experience.</p>"},{"location":"users/install/phpstorm/#requirements","title":"Requirements","text":"<ul> <li>PhpStorm 2022.2 or higher.</li> <li>DDEV v1.21.1 or higher.</li> <li>Make sure to get at least one project going with <code>ddev start</code> before trying to set up the plugin, because the plugin assumes it has a project to work with.</li> </ul>"},{"location":"users/install/phpstorm/#prerequisite","title":"Prerequisite","text":"<p>Regardless of your setup, you need to have PhpStorm use DDEV\u2019s private docker-compose executable.</p> <p>In PhpStorm, navigate to Preferences \u2192 Build, Execution, Deployment \u2192 Docker \u2192 Tools, and set the docker-compose executable to the full path of your <code>.ddev/bin/docker-compose</code> file relative to your home directory.</p> <p>If you\u2019re using WSL2 and running PhpStorm on the Windows side, PhpStorm can\u2019t use docker-compose from WSL2, so configure Docker Desktop in Settings \u2192 General to \u201cUse Docker Compose V2\u201d and use a recent version of Docker Desktop.</p>"},{"location":"users/install/phpstorm/#ddev-integration-plugin","title":"DDEV Integration Plugin","text":"<p>It\u2019s easiest to use the DDEV Integration Plugin, which you can install from its landing page or by searching the in-app marketplace (Preferences \u2192 Plugins \u2192 Marketplace) for \u201cDDEV\u201d. The integration plugin handles nearly everything on this page automatically, and works on all platforms.</p> <p>Install and enable the plugin, then set up <code>phpunit</code> since it doesn\u2019t yet handle that for you.</p>"},{"location":"users/install/phpstorm/#manual-setup","title":"Manual Setup","text":"<p>If you\u2019re not using the DDEV Integration Plugin, you can follow these steps instead:</p> <ol> <li>Start your project by running <code>ddev start</code>.</li> <li>Open the DDEV project. In this example, the project name is \u201cd9\u201d and the site is \u201cd9.ddev.site\u201d.<ul> <li>If you\u2019re on Windows, running PhpStorm on the Windows side but using WSL2 for your DDEV project, open the project as a WSL2 project. In other words, in the Open dialog, browse to <code>\\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\d9</code> (in this example). (If you\u2019re running PhpStorm inside WSL2, there are no special instructions.)</li> </ul> </li> <li>Under Build, Execution, Deployment \u2192 Docker, set the correct Docker provider, for example \u201cColima\u201d or \u201cDocker for Mac\u201d.</li> <li>Set up your project to do normal Xdebug, as described in the Step Debugging section. This will result in a PhpStorm \u201cServer\u201d with the proper name, normally the same as the FQDN of the project. In this example, \u201cd9.ddev.site\u201d. (All you have to do here is click the little telephone to \u201cStart listening for PHP Debug Connections\u201d, run <code>ddev xdebug on</code>, and visit a web page and choose the correct mapping from host to server.)</li> <li>Under File \u2192 Settings \u2192 PHP (Windows) or Preferences \u2192 PHP (macOS), click \u201c\u2026\u201d to the right of \u201cCLI Interpreter\u201d.<ol> <li>Use the \u201c+\u201d to select \u201cFrom Docker, Vagrant, VM\u2026\u201d.</li> <li>Choose \u201cDocker Compose\u201d.</li> <li>Create a \u201cserver\u201d; Choose the appropriate Docker provider configured above under Build, Execution, Deployment \u2192 Docker.</li> <li>In the \u201cPath mappings\u201d of the \u201cServer\u201d you may have to map the local paths (which on WSL2 means <code>/home/...</code>) to the in-container paths, especially if you have Mutagen enabled. So \u201cVirtual Machine Path\u201d would be <code>/var/www/html</code> and \u201cLocal path\u201d would be something like <code>/Users/rfay/workspace/d9</code> (on macOS) or <code>\\\\wsl$\\Ubuntu\\home\\rfay\\workspace\\d9</code> on Windows using WSL2.</li> <li>Now back in the \u201cConfigure Remote PHP Interpreter\u201d for \u201cConfiguration files\u201d use <code>.ddev/.ddev-docker-compose-full.yaml</code>. On macOS, you may need to use \u2318 + SHIFT + ., to show hidden dotfiles.</li> <li>Service: <code>web</code>.</li> <li>In the CLI interpreter \u201cLifecycle\u201d select \u201cConnect to existing container\u201d.</li> <li>Here\u2019s an example filled out:     </li> </ol> </li> <li>In the main PHP setup dialog, add an entry to the path mappings, as it doesn\u2019t correctly derive the full path mapping. Add an entry that maps your project location to <code>/var/www/html</code>. So in this example, the \u201cLocal Path\u201d is <code>/Users/rfay/workspace/d9</code> and the \u201cRemote Path\u201d is <code>/var/www/html</code>:     </li> <li>Configure composer under PHP \u2192 Composer.<ul> <li>Use \u201cremote interpreter\u201d</li> <li>CLI Interpreter will be \u201cweb\u201d</li> </ul> </li> </ol>"},{"location":"users/install/phpstorm/#enabling-phpunit","title":"Enabling PHPUnit","text":"<p>This assumes you\u2019ll need to use PHPUnit and you already have it installed.</p> <ol> <li>Under \u201cTest Frameworks\u201d click \u201c+\u201d to add PHPUnit.<ul> <li>PHPUnit by remote interpreter</li> <li>Interpreter \u201cDDEV\u201d</li> <li>Choose \u201cPath to phpunit.phar\u201d and use <code>/var/www/html/vendor/bin/phpunit</code>, or wherever your PHPUnit is inside the container. You need PHPUnit properly Composer-installed for your project. For example, for Drupal 10, <code>ddev composer require --dev --with-all-dependencies drupal/core-dev:^10</code> and <code>ddev composer require --dev phpspec/prophecy-phpunit:^2</code>.</li> <li>Default configuration file: <code>/var/www/html/web/core/phpunit.xml</code> or wherever yours is inside the container. </li> </ul> </li> <li>Open Run/Debug configurations and use \u201c+\u201d to add a PHPUnit configuration. Give it a name.<ul> <li>Test scope (as you wish, by directory or class or whatever).</li> <li>Interpreter: \u201cweb\u201d (the one we set up). </li> </ul> </li> <li>Enable Xdebug if you want to debug tests with <code>ddev xdebug on</code>.</li> <li>Run the runner you created:     </li> </ol>"},{"location":"users/install/phpstorm/#phpstorm-basic-setup-on-windows-wsl2","title":"PhpStorm Basic Setup on Windows WSL2","text":"<p>It\u2019s possible to use PhpStorm with DDEV on WSL2 in at least three different ways:</p> <ol> <li>Run PhpStorm in Windows as usual, opening the project on the WSL2 filesystem at <code>\\\\wsl$\\&lt;distro&gt;</code> (e.g. <code>\\\\wsl$\\Ubuntu</code>). PhpStorm is slow to index files but can be slow to respond to file changes in this mode, although it\u2019s adequate for many people.</li> <li>\u201cRemote Development\u201d in PhpStorm 2022.3+, which has explicit support for WSL2 and actually runs a PhpStorm instance on WSL2.</li> <li>Enabling X11 on Windows and running PhpStorm inside WSL2 as a Linux app. PhpStorm works fine this way; it does require WSL2 graphics support, which is now available on all Windows 10 and Windows 11 systems.</li> </ol> <p>We\u2019ll walk through each of these approaches.</p>"},{"location":"users/install/phpstorm/#basics","title":"Basics","text":"<ul> <li> <p>Start with a working DDEV/WSL2 setup as described in the docs. Until that\u2019s all working it doesn\u2019t help to go farther.</p> </li> <li> <p>If you haven\u2019t used Xdebug with DDEV and PhpStorm before, you\u2019ll want to read the step debugging instructions.</p> </li> <li> <p>Your project absolutely must be in <code>/home</code> inside WSL2, which is on the Linux filesystem. Although you could keep your project on the Windows filesystem and access it in WSL2 via <code>/mnt/c</code>, the performance is even worse than native Windows. It does work though, but don\u2019t do it. You\u2019ll be miserable.</p> </li> </ul>"},{"location":"users/install/phpstorm/#phpstorm-running-on-windows-side-and-using-docker-desktop","title":"PhpStorm Running On Windows Side and Using Docker Desktop","text":"<p>With the DDEV Integration Plugin almost everything is already done for you, so use it. Create your project inside WSL2 (on the <code>/home</code> partition) and get it started first.</p> <ol> <li>Your working project will be on the <code>/home</code> partition, so you\u2019ll open it using Windows PhpStorm as <code>\\\\wsl$\\Ubuntu\\home\\&lt;username&gt;\\...\\&lt;projectdir&gt;</code>.</li> <li>On some systems and some projects it may take a very long time for PhpStorm to index the files.</li> <li>File changes are noticed only by polling, and PhpStorm will complain about this in the lower right, \u201cExternal file changes sync may be slow\u201d.</li> <li>Temporarily disable your Windows firewall. When you have everything working, you can turn it back on again.</li> <li>Use <code>ddev start</code> and <code>ddev xdebug on</code>.</li> <li>Click the Xdebug listen button on PhpStorm (the little phone icon) to make it start listening.</li> <li>Set a breakpoint on or near the first line of your <code>index.php</code>.</li> <li>Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure <code>/home/&lt;you&gt;/.../&lt;yourproject&gt;</code> is mapped to <code>/var/www/html</code>.</li> </ol> <p>Debugging should be working. You can step through your code, set breakpoints, view variables, etc.</p> <p>Set the PhpStorm terminal path (Settings \u2192 Tools \u2192 Terminal \u2192 Shell Path) to <code>C:\\Windows\\System32\\wsl.exe</code>. That way when you use the terminal Window in WSL2 it\u2019s using the Bash shell in WSL2.</p>"},{"location":"users/install/phpstorm/#phpstorm-with-remote-development-option","title":"PhpStorm with \u201cRemote Development\u201d Option","text":"<ol> <li>Open your WSL2 project using File \u2192 Remote Development \u2192 WSL and choose the distro, then the project.</li> <li>For Xdebug you\u2019ll want to use <code>ddev config global --xdebug-ide-location=wsl2</code> because essentially the IDE is running inside WSL2 (and listening there).</li> <li>Use <code>ddev xdebug on</code> as normal; test with a simple breakpoint in your <code>index.php</code>.</li> </ol>"},{"location":"users/install/phpstorm/#phpstorm-inside-wsl2-in-linux","title":"PhpStorm Inside WSL2 in Linux","text":"<ol> <li>On Windows 10 or 11 get \u201cWindows Subsystem for Linux\u201d from the Microsoft Store, which now includes graphical support.</li> <li> <p>Edit <code>/etc/wsl.conf</code> to systemd support, which allows for installing PhpStorm with snap, see details about WSL2 and systemd:</p> <pre><code>[boot]\nsystemd=true\n</code></pre> </li> <li> <p><code>wsl --shutdown</code> on the Windows side and wait 10 seconds, then restart your distro.</p> </li> <li>In WSL2, <code>sudo snap install --classic phpstorm</code>.</li> <li>DDEV should already be installed as described in DDEV installation.</li> <li><code>ddev config global --xdebug-ide-location=wsl2</code> to tell DDEV that the IDE is listening in WSL2 as opposed to listening on the Windows side.</li> <li>Start PhpStorm, <code>phpstorm &amp;</code>.</li> <li>Use <code>ddev start</code> and <code>ddev xdebug on</code>.</li> <li>Click the Xdebug listen button in PhpStorm (the little phone icon) to make it start listening.</li> <li>Set a breakpoint on or near the first line of your <code>index.php</code>.</li> <li>Visit the project with a web browser or cURL. You should get a popup asking for mapping of the host-side files to the in-container files. Make sure <code>/home/&lt;you&gt;/.../&lt;yourproject&gt;</code> is mapped to <code>/var/www/html</code>.</li> </ol> <p>Debugging should be working! You can step through your code, set breakpoints, view variables, etc.</p>"},{"location":"users/install/shell-completion/","title":"Shell Completion &amp; Autocomplete","text":"<p>Most people like to have shell completion on the command line. In other words, when you\u2019re typing a command, you can hit <code>&lt;TAB&gt;</code> and the shell will show you what the options are. For example, if you type <code>ddev &lt;TAB&gt;</code>, you\u2019ll see all the possible commands. <code>ddev debug &lt;TAB&gt;</code> will show you the options for the command. And <code>ddev list -&lt;TAB&gt;</code> will show you all the flags available for <code>ddev list</code>.</p> <p>Shells like Bash and zsh need help to do this though, they have to know what the options are. DDEV provides the necessary hint scripts, and if you use Homebrew, they get installed automatically. But if you use oh-my-zsh, for example, you may have to manually install the hint script.</p> macOS Bash + HomebrewBash/Zsh/Fish on LinuxOh-My-ZshFishGit BashPowerShell"},{"location":"users/install/shell-completion/#macos-bash-homebrew","title":"macOS Bash + Homebrew","text":"<p>The easiest way to use Bash completion on macOS is install it with Homebrew. <code>brew install bash-completion</code>. When you install it though, it will warn you with something like this, which may vary on your system.</p> <pre><code>Add the following line to your ~/.bash_profile:\n[[ -r \"$(brew --prefix)/etc/profile.d/bash_completion.sh\" ]] &amp;&amp; . \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\n</code></pre> <p>Bash profile</p> <p>You must add the include to your <code>.bash_profile</code> or <code>.profile</code> or nothing will work. Use <code>source ~/.bash_profile</code> or <code>source ~/.profile</code> to make it take effect immediately.</p> <ul> <li>Link completions with <code>brew completions link</code>.</li> </ul> <p>When you install DDEV via Homebrew, each new release will automatically get a refreshed completions script.</p>"},{"location":"users/install/shell-completion/#bashzshfish-on-linux","title":"Bash/Zsh/Fish on Linux","text":"<p>On Debian and Yum based systems, using <code>apt install ddev</code> you should find that <code>bash</code>, <code>zsh</code>, and <code>fish</code> completions are automatically installed.</p> <p>Manual installation is easy though, the completion script is exactly the same, but you have to download and install it yourself. Each system may have a slightly different technique, and you\u2019ll need to figure it out. On Debian/Ubuntu, manually install like this:</p> <ol> <li>Download the completion files and extract them with     <pre><code>VERSION=v1.21.1\ncurl -sSLf https://github.com/ddev/ddev/releases/download/${VERSION}/ddev_shell_completion_scripts.${VERSION}.tar.gz\ntar -zxf ddev_shell_completion_scripts.${VERSION}.tar.gz\n</code></pre></li> <li>Run <code>sudo mkdir -p /usr/share/bash-completion/completions &amp;&amp; sudo cp ddev_bash_completion.sh /usr/share/bash-completion/completions/ddev</code>. This deploys the <code>ddev_bash_completion.sh</code> script where it needs to be. Again, every Linux distro has a different technique, and you may have to figure yours out.</li> </ol> <p>If you installed DDEV using <code>apt install</code> then the <code>ddev_bash_completion.sh</code> file is already available in <code>/usr/bin/ddev_bash_completion.sh</code>. Starting with DDEV v1.21.2 this will be automatically installed into <code>/usr/share/bash-completion/completions</code>.</p>"},{"location":"users/install/shell-completion/#oh-my-zsh","title":"Oh-My-Zsh","text":"<p>If you installed zsh with Homebrew, DDEV\u2019s completions will be automatically installed when you <code>brew install ddev/ddev/ddev</code>.</p> <p>Otherwise, Oh-My-Zsh may be set up very differently in different places, so as a power <code>zsh</code> user you\u2019ll need to put <code>ddev_bash_completion.sh</code> (see tar archive download above) where it belongs. <code>echo $fpath</code> will show you the places that it\u2019s most likely to belong. An obvious choice is <code>~/.oh-my-zsh/completions</code>; if that exists, so you can run <code>mkdir -p ~/.oh-my-zsh/completions &amp;&amp; cp ddev_zsh_completion.sh ~/.oh-my-zsh/completions/_ddev</code>, then <code>autoload -Uz compinit &amp;&amp; compinit</code>.</p>"},{"location":"users/install/shell-completion/#fish","title":"Fish","text":"<p>The <code>fish</code> shell\u2019s completions are also supported and are automatically installed into <code>/usr/local/share/fish/vendor_completions.d/</code> when you install ddev via Homebrew. If you have installed <code>fish</code> without Homebrew, you can extract the fish completions from the <code>ddev_shell_completion_scripts</code> tarball that is included with each release.</p>"},{"location":"users/install/shell-completion/#git-bash","title":"Git Bash","text":"<p>Completions in Git Bash are sourced from at least <code>~/bash_completion.d</code> so you can use <code>mkdir -p ~/bash_completion.d &amp;&amp; tar -C ~/.bash_completion.d -zxf /z/Downloads/ddev_shell_completion_scripts.v1.15.0-rc3.tar.gz ddev_bash_completion.sh &amp;&amp; mv ~/bash_completion.d/ddev_bash_completion.sh ~/bash_completion.d/ddev.bash</code> to extract the Bash completions and put them where they belong.</p>"},{"location":"users/install/shell-completion/#powershell","title":"PowerShell","text":"<p>PowerShell completions are also provided in the <code>ddev_shell_completions tarball</code> included with each release. You can run the <code>ddev_powershell_completion.ps1</code> script manually or install it so it will be run whenever PS is opened using the technique at Run PowerShell Script When You Open PowerShell.</p>"},{"location":"users/install/shell-completion/#tar-archive-of-completion-scripts-for-manual-deployment","title":"tar Archive of Completion Scripts for Manual Deployment","text":"<p>Although most people will use techniques like Homebrew for installation, a tar archive of the shell completion scripts is available in each release, called <code>ddev_shell_completion_scripts.&lt;version&gt;.tar.gz</code>. If you need to manually install, you can download and untar the scripts, then copy them as needed to where they have to go. For example, <code>sudo cp ddev_bash_completion.sh /etc/bash_completion.d/ddev</code>.</p> <p>Note that scripts for the <code>fish</code> shell and Windows PowerShell are also provided, but no instructions are given here for deploying them.</p>"},{"location":"users/providers/","title":"Hosting Provider Integration","text":"<p>DDEV offers hosting provider integration and sample integrations for Pantheon, Platform.sh and Acquia hosting, along with other examples.</p> <p>DDEV provides ready-to-go integrations for Platform.sh, Acquia, and Lagoon in every project, see the .ddev/providers directory. These can be used as is, or they can be modified as you see fit (but remove the <code>#ddev-generated</code> line so DDEV doesn\u2019t replace them with the defaults).</p> <p>In addition, each project includes example recipes for Pantheon, Git, local files, and <code>rsync</code> in its <code>.ddev/providers</code> directory, which you can use and adapt however you\u2019d like.</p> <p>DDEV provides the <code>pull</code> command with whatever recipes you have configured. For example, <code>ddev pull platform</code> is available by default, and <code>ddev pull pantheon</code> is available if you have created <code>.ddev/providers/pantheon.yaml</code>.</p> <p>DDEV also provides the <code>push</code> command to push database and files to upstream. This is very dangerous to your upstream site and should only be used when appropriate. We don\u2019t even recommended implementing the push stanzas in your YAML file, but it\u2019s there if it suits your workflow.</p> <p>Each provider recipe is a YAML file that can have whatever name you want. The examples are mostly named after the hosting providers, but they could be named <code>upstream.yaml</code> or <code>live.yaml</code>, so you could <code>ddev pull upstream</code> or <code>ddev pull live</code>. If you wanted different upstream environments to pull from, you could name one \u201cprod\u201d and one \u201cdev\u201d and <code>ddev pull prod</code> and <code>ddev pull dev</code>.</p> <p>Recipes are provided for Acquia, Local files (like Dropbox, for example), Pantheon, Platform.sh, and rsync. We know you\u2019ll find improvements to these examples and will have lots to contribute for other hosting providers, and we look forward to your contributions as pull requests here or in ddev-contrib.</p> <p>Each provider recipe is a file named <code>&lt;provider&gt;.yaml</code> and consists of several mostly-optional stanzas:</p> <ul> <li><code>environment_variables</code>: Environment variables will be created in the web container for each of these during pull or push operations. They\u2019re used to provide context (project ID, environment name, etc.) for each of the other stanzas. This stanza is not used in more recent hosting integrations, since providing the environment variables in config.yaml or via <code>ddev pull xxx --environment=VARIABLE=value</code> is preferred.</li> <li><code>db_pull_command</code>: A script that determines how DDEV should obtain a database. Its job is to create a gzipped database dump in <code>/var/www/html/.ddev/.downloads/db.sql.gz</code>. This is optional; if nothing has to be done to obtain the database dump, this step can be omitted.</li> <li><code>db_import_command</code>: (optional) A script that imports the downloaded database. This is for advanced usages like multiple databases. The default behavior only imports a single database into the <code>db</code> database. The localfile example uses this technique.</li> <li><code>files_pull_command</code>: A script that determines how DDEV can get user-generated files from upstream. Its job is to copy the files from upstream to <code>/var/www/html/.ddev/.downloads/files</code>. If nothing has to be done to obtain the files, this step can run <code>true</code>.</li> <li><code>files_import_command</code>: (optional) A script that imports the downloaded files. There are a number of situations where it\u2019s messy to push a directory of files around, and one can put it directly where it\u2019s needed. The localfile example uses this technique.</li> <li><code>db_push_command</code>: A script that determines how DDEV should push a database. Its job is to take a gzipped database dump from <code>/var/www/html/.ddev/.downloads/db.sql.gz</code> and load it on the hosting provider.</li> <li><code>files_push_command</code>: A script that determines how DDEV push user-generated files to upstream. Its job is to copy the files from the project\u2019s user-files directories (<code>$DDEV_FILES_DIRS</code>) to the correct places on the upstream provider.</li> </ul> <p>The environment variables provided to custom commands are also available for use in these recipes.</p> <p>There are hooks available to execute commands before and after each pull or push: <code>pre-pull</code>, <code>post-pull</code>, <code>pre-push</code>, <code>post-push</code>. These could be for example a <code>ddev snapshot</code> to backup the database before a pull or a specific task to clear/warm-up caches of your application.</p>"},{"location":"users/providers/#example-integrations-and-hints","title":"Example Integrations and Hints","text":"<ul> <li>All of the supplied integrations are examples of what you can do.</li> <li>You can name a provider anything you want. For example, an Acquia integration doesn\u2019t have to be named \u201cacquia\u201d, it can be named \u201cupstream\u201d. This is a great technique for downloading a particular multisite.</li> </ul>"},{"location":"users/providers/#provider-debugging","title":"Provider Debugging","text":"<p>You can uncomment the <code>set -x</code> in each stanza to see more of what\u2019s going on. It really helps. Watch it as you do a <code>ddev pull &lt;whatever&gt;</code>.</p> <p>Although the various commands could be executed on the host or in other containers if configured that way, most commands are executed in the web container. So the best thing to do is to <code>ddev ssh</code> and manually execute each command you want to use. When you have it right, use it in the YAML file.</p>"},{"location":"users/providers/acquia/","title":"Acquia Integration","text":"<p>DDEV provides integration with the Acquia Cloud Platform, which allows Acquia users to quickly download and provision a project from Acquia in a local DDEV-managed environment.</p> <p>DDEV\u2019s Acquia integration pulls database and files from an existing project into your local system so you can develop locally.</p>"},{"location":"users/providers/acquia/#acquia-quickstart","title":"Acquia Quickstart","text":"<ol> <li>Get your Acquia API token from Account Settings \u2192 API Tokens.</li> <li>Make sure you\u2019ve added your SSH key to your Acquia account in Account Settings \u2192 SSH Keys.</li> <li>Run <code>ddev auth ssh</code>. (Typically once per DDEV session, not every pull.)</li> <li>In <code>~/.ddev/global_config.yaml</code> (or the project <code>config.yaml</code>), add or update the <code>web_environment</code> section with the API keys:</li> </ol> <pre><code>web_environment:\n- ACQUIA_API_KEY=xxxxxxxx\n- ACQUIA_API_SECRET=xxxxx\n</code></pre> <ol> <li>In the project <code>.ddev/config.yaml</code> add the <code>ACQUIA_ENVIRONMENT_ID</code> environment variable:</li> </ol> <pre><code>web_environment:\n- ACQUIA_ENVIRONMENT_ID=yoursite.dev\n</code></pre> <ol> <li>Run <code>ddev restart</code>.</li> <li>Use <code>ddev pull acquia</code> to pull the project database and files.</li> <li>Optionally use <code>ddev push acquia</code> to push local files and database to Acquia. Be aware that <code>ddev push</code> is a command that can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/acquia/#usage","title":"Usage","text":"<p><code>ddev pull acquia</code> will connect to the Acquia Cloud Platform to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</p>"},{"location":"users/providers/lagoon/","title":"Lagoon Integration","text":"<p>DDEV provides integration with Lagoon, allowing users to quickly sync the files and database from a Lagoon environment to the local DDEV project.</p>"},{"location":"users/providers/lagoon/#lagoon-per-project-configuration","title":"Lagoon Per-Project Configuration","text":"<ol> <li>Check out the Lagoon project and configure it by running <code>ddev config</code>. You\u2019ll want to run <code>ddev start</code> and make sure the basic functionality is working.</li> <li>Add <code>LAGOON_PROJECT</code> and <code>LAGOON_ENVIRONMENT</code> variables to your project using <code>'web_environment'</code> in its YAML configuration or a <code>.ddev/.env</code> file. For example, run <code>ddev config --web-environment-add=\"LAGOON_PROJECT=&lt;project-name&gt;,LAGOON_ENVIRONMENT=&lt;environment-name&gt;\"</code>.</li> <li>Configure an SSH key for your Lagoon user.</li> <li>Run <code>ddev auth ssh</code> to make your SSH key available in the project\u2019s web container.</li> <li>Run <code>ddev restart</code>.</li> <li>Run <code>ddev pull lagoon</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally run <code>ddev push lagoon</code> to push local files and database to Lagoon. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/lagoon/#usage","title":"Usage","text":"<ul> <li><code>ddev pull lagoon</code> will connect to the Lagoon environment to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> or <code>--skip-db</code> flags.</li> <li>If you need to change the <code>.ddev/providers/lagoon.yaml</code> recipe, you can change it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/providers/pantheon/","title":"Pantheon Integration","text":"<p>DDEV provides configurable integration with the Pantheon Website Management Platform, which allows Pantheon users to quickly download and provision a project from Pantheon in a local DDEV-managed environment.</p> <p>DDEV\u2019s Pantheon integration pulls an existing backup from an existing Pantheon site/environment into your local system. That means you must already have a Pantheon site with a backup in order to use it.</p>"},{"location":"users/providers/pantheon/#pantheon-quickstart","title":"Pantheon Quickstart","text":"<p>If you have DDEV installed, and have an active Pantheon account with an active site, you can follow this guide to spin up a Pantheon project locally.</p> <ol> <li>Get your Pantheon machine token:    a. Log in to your Pantheon Dashboard and Generate a Machine Token for DDEV to use.    b. Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>.</li> </ol> <pre><code>web_environment:\n- TERMINUS_MACHINE_TOKEN=abcdeyourtoken\n</code></pre> <ol> <li> <p>Choose a Pantheon site and environment you want to use with DDEV. You can usually use the site name, but in some environments you may need the site ID, which is the long third component of your site dashboard URL. So if the site dashboard is at <code>https://dashboard.pantheon.io/sites/009a2cda-2c22-4eee-8f9d-96f017321555#dev/</code>, the site ID is <code>009a2cda-2c22-4eee-8f9d-96f017321555</code>.</p> </li> <li> <p>On the Pantheon dashboard for the site, make sure that at least one backup has been created. (When you need to refresh what you pull, create a new backup.)</p> </li> <li> <p>For <code>ddev push pantheon</code> make sure your public SSH key is configured in Pantheon under Account \u2192 SSH Keys.</p> </li> <li> <p>Check out the project codebase from Pantheon. Enable the \u201cGit Connection Mode\u201d and use <code>git clone</code> to check out the code locally.</p> </li> <li> <p>Configure the local checkout for DDEV using <code>ddev config</code>.</p> </li> <li> <p>If using Drupal 8+, verify that Drush is installed in your project with <code>ddev composer require drush/drush</code>. If using Drupal 6 or 7, Drush 8 is already provided in the web container\u2019s <code>/usr/local/bin/drush</code>, so you can skip this step.</p> </li> <li> <p>In your project\u2019s <code>.ddev/providers</code> directory, copy <code>pantheon.yaml.example</code> to <code>pantheon.yaml</code> (This refers to your project <code>.ddev</code> folder and not the global <code>.ddev</code> folder).  Edit the <code>project</code> environment variable under <code>environment_variables</code>. It will be in the format <code>&lt;projectname&gt;.&lt;environment&gt;</code>, for example <code>yourprojectname.dev</code> or (in cases of ambiguity) <code>&lt;project_uuid&gt;.&lt;environment&gt;</code>, for example <code>009a2cda-2c22-4eee-8f9d-96f017321555.dev</code>.</p> </li> <li> <p>If using Colima, may need to set an explicit nameserver in <code>~/.colima/default/colima.yaml</code> like <code>1.1.1.1</code>. If this configuration is changed, may also need to restart Colima.</p> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li> <p>Run <code>ddev pull pantheon</code>. DDEV will download the Pantheon database and files and bring them into the local DDEV environment. You should now be able to access the project locally.</p> </li> <li> <p>Optionally use <code>ddev push pantheon</code> to push local files and database to Pantheon. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</p> </li> </ol>"},{"location":"users/providers/platform/","title":"Platform.sh Integration","text":"<p>DDEV provides integration with the Platform.sh Website Management Platform, which allows Platform.sh users to quickly download and provision a project from Platform.sh in a local DDEV-managed environment.</p> <p>Tip</p> <p>Consider using <code>ddev get ddev/ddev-platformsh</code> (platformsh/ddev-platformsh) for more complete Platform.sh integration.</p> <p>DDEV\u2019s Platform.sh integration pulls databases and files from an existing Platform.sh site/environment into your local system so you can develop locally.</p>"},{"location":"users/providers/platform/#platformsh-global-configuration","title":"Platform.sh Global Configuration","text":"<p>You need to obtain and configure an API token first. This is only needed once.</p> <ol> <li>Login to the Platform.sh Dashboard and go to Account \u2192 API Tokens. Create an API token DDEV can use.</li> <li>Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>:</li> </ol> <pre><code>web_environment:\n  - PLATFORMSH_CLI_TOKEN=abcdeyourtoken\n</code></pre>"},{"location":"users/providers/platform/#platformsh-per-project-configuration","title":"Platform.sh Per-Project Configuration","text":"<ol> <li>Check out the site from Platform.sh and configure it with <code>ddev config</code>. You\u2019ll want to use <code>ddev start</code> and make sure the basic functionality is working.</li> <li> <p>Add <code>PLATFORM_PROJECT</code> and <code>PLATFORM_ENVIRONMENT</code> variables to your project.</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n- PLATFORM_PROJECT=nf4amudfn23biyourproject\n- PLATFORM_ENVIRONMENT=main\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PROJECT=nf4amudfn23bi,PLATFORM_ENVIRONMENT=main\"\n</code></pre> </li> </ul> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li>Run <code>ddev pull platform</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally use <code>ddev push platform</code> to push local files and database to Platform.sh. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/platform/#managing-multiple-databases","title":"Managing Multiple Databases","text":"<p>If your project has only one database, it will automatically be pulled into and pushed from DDEV\u2019s <code>'db'</code> database.</p> <p>If your project has multiple databases, they\u2019ll all be pulled into DDEV with their respective remote names. You can optionally designate a primary to use DDEV\u2019s default <code>'db'</code> database, which may be useful in some cases\u2014particularly if you\u2019ve been using the default solo-database behavior and happened to add another one to your project.</p> <p>You can designate the primary database using the <code>PLATFORM_PRIMARY_RELATIONSHIP</code> environment variable:</p> <pre><code>ddev config --web-environment-add=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre> <p>You can also do the same thing by running <code>ddev pull platform</code> and using the <code>--environment</code> flag:</p> <pre><code>ddev pull platform --environment=\"PLATFORM_PRIMARY_RELATIONSHIP=main\"\n</code></pre>"},{"location":"users/providers/platform/#usage","title":"Usage","text":"<ul> <li><code>ddev pull platform</code> will connect to Platform.sh to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</li> <li>If you need to change the <code>platform.yaml</code> recipe, you can change it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/providers/upsun/","title":"Upsun Integration","text":"<p>DDEV provides integration with the Upsun by Platform hosting system, allowing Upsun users to easily download database and files from Upsun to a local DDEV-managed environment.</p> <p>DDEV\u2019s Upsun integration pulls databases and files from an existing Upsun site/environment into your local system so you can develop locally.</p>"},{"location":"users/providers/upsun/#upsun-global-configuration","title":"Upsun Global Configuration","text":"<p>You need to obtain and configure an API token first. This only needs to be done once.</p> <ol> <li>Login to the Upsun Dashboard and go to My Profile \u2192 API Tokens. Create an API token DDEV can use.</li> <li>Add the API token to the <code>web_environment</code> section in your global DDEV configuration at <code>~/.ddev/global_config.yaml</code>:</li> </ol> <pre><code>web_environment:\n  - UPSUN_CLI_TOKEN=abcdeyourtoken\n</code></pre>"},{"location":"users/providers/upsun/#upsun-per-project-configuration","title":"Upsun Per-Project Configuration","text":"<ol> <li>Check out the Upsun site and configure it with <code>ddev config</code>. You\u2019ll want to use <code>ddev start</code> and make sure the basic functionality is working.</li> <li> <p>Add <code>UPSUN_PROJECT</code> and <code>UPSUN_ENVIRONMENT</code> variables to your project.</p> <ul> <li> <p>Either in <code>.ddev/config.yaml</code> or a <code>.ddev/config.*.yaml</code> file:</p> <pre><code>web_environment:\n- UPSUN_PROJECT=nf4amudfn23biyourproject\n- UPSUN_ENVIRONMENT=main\n</code></pre> </li> <li> <p>Or with a command from your terminal:</p> <pre><code>ddev config --web-environment-add=\"UPSUN_PROJECT=nf4amudfn23bi,UPSUN_ENVIRONMENT=main\"\n</code></pre> </li> </ul> </li> <li> <p>Run <code>ddev restart</code>.</p> </li> <li>Run <code>ddev pull upsun</code>. After you agree to the prompt, the current upstream databases and files will be downloaded.</li> <li>Optionally use <code>ddev push upsun</code> to push local files and database to Upsun. The <code>ddev push</code> command can potentially damage your production site, so we don\u2019t recommend using it.</li> </ol>"},{"location":"users/providers/upsun/#usage","title":"Usage","text":"<ul> <li><code>ddev pull upsun</code> will connect to Upsun to download database and files. To skip downloading and importing either file or database assets, use the <code>--skip-files</code> and <code>--skip-db</code> flags.</li> <li>If you need to change the <code>upsun.yaml</code> recipe, you can change it to suit your needs, but remember to remove the <code>#ddev-generated</code> line from the top of the file.</li> </ul>"},{"location":"users/topics/hosting/","title":"Casual Hosting","text":"<p>Experimental Feature!</p> <p>This is not a replacement for scalable, managed hosting. It\u2019s unknown how much traffic it can handle in a given environment.</p> <p>Let\u2019s Encrypt support not directly compatible with Traefik router</p> <p><code>ddev config global --use-letsencrypt</code> is not directly compatible with the Traefik router, but it can be configured using Traefik docs.</p> <p>One of DDEV\u2019s experimental features is lightweight hosting with Let\u2019s Encrypt for HTTPS support. You can run DDEV on a public web server, point DNS to it, and use it as a limited hosting environment.</p> <p>This may be appropriate for small or abandoned sites that have special requirements like old versions of PHP that aren\u2019t supported elsewhere.</p> <p>Here\u2019s how to try it for yourself:</p> <ol> <li>Install DDEV on an internet-connected Linux server. (You\u2019re responsible for your firewall and maintenance of the server!)</li> <li>On Debian/Ubuntu, you can set up a simple firewall with <code>ufw allow 80 &amp;&amp; ufw allow 443 &amp;&amp; ufw allow 22 &amp;&amp; ufw enable</code>.</li> <li>Point DNS for the site you\u2019re going to host to the server.</li> <li>Before proceeding, your system and your project must be accessible on the internet on port 80 and your project DNS name (<code>myproject.example.com</code>) must resolve to the appropriate server.</li> <li>Configure your project with <code>ddev config</code>.</li> <li>Import your database and files using <code>ddev import-db</code> and <code>ddev import-files</code>.</li> <li> <p>Tell DDEV to listen on all network interfaces, omit the SSH agent, use hardened images, and enable Let\u2019s Encrypt:</p> <pre><code>ddev config global --router-bind-all-interfaces --omit-containers=ddev-ssh-agent --use-hardened-images --use-letsencrypt --letsencrypt-email=you@example.com`\n</code></pre> </li> <li> <p>Create your DDEV project as you normally would, but <code>ddev config --project-name=&lt;yourproject&gt; --project-tld=&lt;your-top-level-domain&gt;</code>. If your website responds to multiple hostnames (e.g., with and without <code>www</code>), you\u2019ll need to add <code>additional_hostnames</code>.</p> </li> <li> <p>Redirect HTTP to HTTPS. If you\u2019re using <code>nginx-fpm</code>, for example, create <code>.ddev/nginx/redirect.conf</code>:</p> <pre><code>if ($http_x_forwarded_proto = \"http\") {\n  return 301 https://$host$request_uri;\n}\n</code></pre> </li> <li> <p>Run <code>ddev start</code> and visit your site. With some CMSes, you may also need to clear your cache.</p> </li> </ol> <p>You may have to restart DDEV with <code>ddev poweroff &amp;&amp; ddev start --all</code> if Let\u2019s Encrypt has failed because port 80 is not open, or the DNS name is not yet resolving. (Use <code>docker logs ddev-router</code> to see Let\u2019s Encrypt activity.)</p>"},{"location":"users/topics/hosting/#additional-server-setup","title":"Additional Server Setup","text":"<ul> <li>Depending on how you\u2019re using this, you may want to set up automated database and file backups\u2014ideally off-site\u2014like you would on any production system. Many CMSes have modules/plugins to allow this, and you can use <code>ddev export-db</code> or <code>ddev snapshot</code> as you see fit and do the backup on the host.</li> <li>You may want to allow your host system to send email. On Debian/Ubuntu <code>sudo apt-get install postfix</code>. Typically you\u2019ll need to set up reverse DNS for your system, and perhaps SPF and/or DKIM records to for more reliable delivery to other mail systems.</li> <li> <p>You may want to generally tailor your PHP settings for hosting rather than local development. Error-reporting defaults in <code>php.ini</code>, for example, may be too verbose and expose too much information publicly. You may want something less:</p> <pre><code>; Error handling and logging ;\nerror_reporting = E_ALL\ndisplay_errors = On\ndisplay_startup_errors = On\nlog_errors = On\n</code></pre> </li> <li> <p>To make DDEV start sites on system boot, you\u2019ll want to set up a <code>systemd</code> unit on systems like Debian/Ubuntu and Fedora. For example, a file named <code>/etc/systemd/system/ddev.service</code> containing:</p> <pre><code># Start DDEV when system starts (after Docker)\n# Stop DDEV when Docker shuts down\n# Start with `sudo systemctl start ddev`\n# Enable on boot with `sudo systemctl enable ddev`\n# Make sure to edit the User= for your user and the\n# full path to `ddev` on your system.\n# Optionally give a list of sites instead of --all\n[Unit]\nDescription=DDEV sites\nAfter=network.target\nRequires=docker.service\nPartOf=docker.service\n[Service]\nUser=rfay\nType=oneshot\nExecStart=/usr/local/bin/ddev start --all\nRemainAfterExit=true\nExecStop=/usr/local/bin/ddev poweroff\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>You\u2019ll need to regularly renew the Let\u2019s Encrypt certificates. This is often done on a system reboot, but that may not be soon enough. A cron with the command <code>docker exec ddev-router bash -c \"certbot renew &amp;&amp; nginx -s reload\"</code> will do the renewals.</p> </li> <li> <p>You\u2019ll likely want to turn off PHP errors to screen in a <code>.ddev/php/noerrors.ini</code>:</p> <pre><code>display_errors = Off\ndisplay_startup_errors = Off\n</code></pre> </li> </ul> <p>Caveats:</p> <ul> <li>It\u2019s unknown how much traffic a given server and Docker setup can sustain, or what the results will be if the traffic is more than the server can handle.</li> <li>DDEV does not provide outgoing SMTP mail handling service, and the development-focused Mailpit feature is disabled if you\u2019re using <code>use_hardened_images</code>. You can provide SMTP service a number of ways, but the recommended way is to use SMTP in your application via a third-party transactional email service such as SendGrid, Postmark, or Mailgun. This is the best way to ensure mail is actually delivered.</li> <li>You may need an external cron trigger for some CMSes.</li> <li>Debugging Let\u2019s Encrypt failures requires viewing the <code>ddev-router</code> logs with <code>docker logs ddev-router</code>.</li> <li>A malicious attack on a website hosted with <code>use_hardened_images</code> will likely not be able to do anything significant to the host, but it can certainly change your code, which is mounted on the host.</li> </ul> <p>When <code>use_hardened_images</code> is enabled, Docker runs the web image as an unprivileged user, and the container does not have sudo. However, any Docker server hosted on the internet is a potential vulnerability. Keep your packages up to date and make sure your firewall does not allow access to ports other than (normally) 22, 80, and 443.</p> <p>There are no warranties implied or expressed.</p>"},{"location":"users/topics/remote-docker/","title":"Remote Docker Environments","text":""},{"location":"users/topics/remote-docker/#remote-docker-instances","title":"Remote Docker Instances","text":"<p>You can use remote Docker instances, whether on the internet, inside your network, or running in a virtual machine.</p> <ul> <li> <p>On the remote machine, the Docker port must be exposed if it\u2019s not already. See instructions for how to do this on a systemd-based remote server. Be aware that this has serious security implications and must not be done without taking those into consideration. In fact, <code>dockerd</code> will complain:</p> <p>Binding to IP address without <code>--tlsverify</code> is insecure and gives root access on this machine to everyone who has access to your network.  host=\u201dtcp://0.0.0.0:2375\u201d.</p> </li> <li> <p>If you do not already have the Docker client installed (like you would from Docker Desktop), install only the client with <code>brew install docker</code>.</p> </li> <li>Create a Docker context that points to the remote Docker instance. For example, if the remote hostname is <code>debian-11</code>, then <code>docker context create debian-11 --docker host=tcp://debian-11:2375 &amp;&amp; docker use debian-11</code>. Alternately, you can use the <code>DOCKER_HOST</code> environment variable, e.g. <code>export DOCKER_HOST=tcp://debian-11:2375</code>.</li> <li>Make sure you can access the remote machine using <code>docker ps</code>.</li> <li>Bind mounts cannot work on a remote Docker setup, so you must use <code>ddev config global --no-bind-mounts</code>. This will cause DDEV to push needed information to and from the remote Docker instance when needed. This also automatically turns on Mutagen caching.</li> <li>You may want to use a FQDN other than <code>*.ddev.site</code> because the DDEV site will not be at <code>127.0.0.1</code>. For example, <code>ddev config --fqdns=debian-11</code> and then use <code>https://debian-11</code> to access the site.</li> <li>If the Docker host is reachable on the internet, you can actually enable real HTTPS for it using Let\u2019s Encrypt as described in Casual Webhosting. Make sure port 2375 is not available on the internet.</li> </ul>"},{"location":"users/topics/remote-docker/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<p>A number of people have found it easy to test their projects using DDEV on a CI system like GitHub Actions, Travis CI, or CircleCI. Instead of setting up a hosting environment for testing, they start the project using DDEV and run their tests.</p> <p>Examples of this approach are demonstrated in Codeception Tests in Travis CI with DDEV and Selenium and Setup DDEV in GitHub Workflows.</p>"},{"location":"users/topics/remote-docker/#integration-of-ddev-docker-images-into-other-projects","title":"Integration of DDEV Docker Images Into Other Projects","text":"<p>You can use DDEV Docker images outside the context of the DDEV environment. People have used the <code>ddev-webserver</code> image for running tests in PhpStorm, for example.</p>"},{"location":"users/topics/sharing/","title":"Sharing Your Project","text":"<p>Even though DDEV is intended for local development on a single machine, not as a public server, there are a number of reasons you might want to expose your work in progress more broadly:</p> <ul> <li>Testing with a mobile device</li> <li>Sharing on a local network so that everybody on the local network can see your project</li> <li>Some CI applications</li> </ul> <p>There are at least three different ways to share a running DDEV project outside the local developer machine:</p> <ul> <li><code>ddev share</code> (using ngrok to share over the internet)</li> <li>Local name resolution and sharing the project on the local network</li> <li>Sharing the HTTP port of the local machine on the local network</li> </ul>"},{"location":"users/topics/sharing/#using-ddev-share-easiest","title":"Using <code>ddev share</code> (Easiest)","text":"<p><code>ddev share</code> proxies the project via ngrok for sharing your project with others on your team or around the world. It\u2019s built into DDEV and requires an ngrok.com account. Run <code>ddev share</code> and then give the resultant URL to your collaborator or use it on your mobile device.</p> <p>ngrok in depth</p> <p>Run <code>ddev share -h</code> for more, and consider reading ngrok\u2019s getting started guide and DrupalEasy\u2019s more detailed walkthrough of the <code>share</code> command.</p> <p>CMSes like WordPress and Magento 2 make this a little harder by only responding to a single base URL that\u2019s coded into the database. ngrok allows you to use one static domain for free so you won\u2019t have to frequently change the base URL.</p>"},{"location":"users/topics/sharing/#setting-up-a-stable-ngrok-domain","title":"Setting up a Stable ngrok Domain","text":"<ol> <li>Get a free static domain from ngrok. Let\u2019s say we got <code>wp23.ngrok-free.app</code>.</li> <li>Pass the domain to the ngrok args:<ul> <li>In <code>.ddev/config.yaml</code>, <code>ngrok_args: --domain wp23.ngrok-free.app</code> will result in ngrok always using <code>wp23.ngrok-free.app</code> as the URL, so it\u2019s not changing on you all the time.</li> <li>Alternatively you can pass the domain directly to <code>ddev share --ngrok-args \"--domain wp23.ngrok-free.app\"</code></li> </ul> </li> </ol>"},{"location":"users/topics/sharing/#wordpress-change-the-url-with-wp-search-replace","title":"WordPress: Change the URL with <code>wp search-replace</code>","text":"<p>WordPress only has the one base URL, but the <code>wp</code> command is built into DDEV\u2019s web container.</p> <p>This set of steps assumes an ngrok domain of <code>wp23.ngrok-free.app</code> and a starting URL of <code>https://wordpress.ddev.site</code>.</p> <ul> <li>Configure <code>.ddev/config.yaml</code> to use a custom domain: <code>ngrok_args: --domain wp23.ngrok-free.app</code>.</li> <li>Make a backup of your database with <code>ddev export-db</code> or <code>ddev snapshot</code>.</li> <li>Edit <code>wp-config-ddev.php</code> (or whatever your config is) to change <code>WP_HOME</code>, for example, <code>define('WP_HOME', 'https://wp23.ngrok-free.app');</code></li> <li><code>ddev wp search-replace https://wordpress.ddev.site https://wp23.ngrok-free.app</code>, assuming your project is configured for <code>https://wordpress.ddev.site</code> and your <code>ngrok_args</code> are configured for the <code>wp23.ngrok-free.app</code> domain.</li> <li>Now run <code>ddev share</code>.</li> </ul>"},{"location":"users/topics/sharing/#magento2-change-the-url-with-magento-tool","title":"Magento2: Change the URL with Magento Tool","text":"<p>This set of steps assumes an ngrok domain <code>mg2.ngrok-free.app</code>:</p> <ul> <li>Configure <code>.ddev/config.yaml</code> to use a custom domain with <code>ngrok_args: --domain mg2.ngrok-free.app</code>.</li> <li>Make a backup of your database.</li> <li>Edit your <code>.ddev/config.yaml</code>.</li> <li>Run <code>ddev ssh</code>.</li> <li>Run <code>bin/magento setup:store-config:set --base-url=\"https://mg2.ngrok-free.app/</code>.</li> <li>Run <code>ddev share</code> and you\u2019ll see your project at <code>mg2.ngrok-free.app</code>.</li> </ul>"},{"location":"users/topics/sharing/#using-nipio-or-custom-name-resolution-locally","title":"Using nip.io or Custom Name Resolution Locally","text":"<p>Another solution is to not use <code>*.ddev.site</code> as your project URLs, but to use DNS that you control and that points to the host machine where your project lives. In general, you\u2019ll want to use HTTP URLs with this approach, because it requires manual configuration of the client machine to get it to trust the development certificate that DDEV uses and configures with <code>mkcert</code> on the local machine.</p> <ul> <li>Use nip.io to point a domain name to your host. If your computer\u2019s IP address is 192.168.5.101, you can use a domain name like <code>mysite.192.168.5.101.nip.io</code> and that domain name will point to your computer. Add that to your project\u2019s <code>additional_fqdns</code> with <code>ddev config --additional-fqdns=mysite.192.168.5.101.nip.io</code> and <code>ddev start</code>. Now people in your internal network should be able to <code>ping mysite.192.168.5.101.nip.io</code> if your firewall allows it. (If you have other convenient ways to create a DNS entry for this, you can use those instead of nip.io.)</li> <li>Configure <code>~/.ddev/global_config.yaml</code> to bind to all ports: <code>ddev config global --router-bind-all-interfaces &amp;&amp; ddev poweroff &amp;&amp; ddev start</code>.</li> <li>Now mobile apps or other computers which are on your local network should be able to access your project. Use the HTTP URL rather than the HTTPS URL because computers outside yours don\u2019t know how to trust the developer TLS certificate you\u2019re using. (You can run <code>ddev describe</code> to see the HTTP URL, but it\u2019s typically the same as the HTTPS URL, but with \u201chttp\u201d instead of \u201chttps\u201d.)</li> <li>Make sure your firewall allows access from your local network to the main interface you\u2019re using. In the example here, you should be able to ping 192.168.5.101 and <code>curl http://192.168.5.101</code> and get an answer in each case.</li> <li>If you\u2019re using WordPress or Magento 2, you\u2019ll need to change the base URL as described in the <code>ddev share</code> instructions above.</li> </ul>"},{"location":"users/topics/sharing/#exposing-a-host-port-and-providing-a-direct-url","title":"Exposing a Host Port and Providing a Direct URL","text":"<p>DDEV\u2019s web container also exposes an HTTP port directly, in addition to the normal routing by name and via <code>ddev_router</code>. You can expose this port and it may be a useful approach in some situations.</p> <ul> <li>Configure the project <code>host_webserver_port</code> to a known port (that does not conflict with already configured ports). For example, using port 8080, <code>ddev config --host-webserver-port=8080 --bind-all-interfaces</code>. This will configure the host-bound port to 8080 and allow it to bind to all network interfaces so colleagues (or hackers) on your local network can access this project\u2019s ports.</li> <li>Make sure your firewall allows access to the port on your host machine.</li> <li>If you\u2019re using WordPress or Magento 2 you\u2019ll need to change the base URL as described in the <code>ddev share</code> instructions above.</li> <li>Each project on your computer must use different ports or you\u2019ll have port conflicts, and you can\u2019t typically use ports 80 or 443 because <code>ddev-router</code> is already using those for normal routing.</li> <li>If you don\u2019t want to run <code>ddev-router</code> at all, you can omit it globally with <code>ddev config global --omit-containers=ddev-router</code>. This is a specialty thing to do when you don\u2019t need the reverse proxy, as for DrupalPod or other Gitpod applications.</li> </ul> <p>Computers and mobile devices on your local network should now be able to access port 8080, on the (example) host address 192.168.5.23, so <code>http://192.168.5.23:8080</code> You\u2019ll probably want to use the HTTP URL; your coworker\u2019s browser will not trust the developer TLS certificate you\u2019re using.</p>"},{"location":"users/usage/","title":"Usage","text":"<p>This section covers day-to-day DDEV usage, reference material, and common support details.</p>"},{"location":"users/usage/#common-tasks","title":"Common Tasks","text":"<ul> <li>Using the <code>ddev</code> Command</li> <li>Database Management</li> <li>Managing CMS Settings</li> <li>Managing Projects</li> <li>Troubleshooting</li> <li>Using DDEV Offline</li> </ul>"},{"location":"users/usage/#reference","title":"Reference","text":"<ul> <li>How DDEV Works</li> <li>Commands</li> <li>Built-in Developer Tools</li> <li>Diagnostics</li> <li>Uninstalling</li> </ul>"},{"location":"users/usage/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ</li> <li>Support</li> <li>Code of Conduct</li> </ul>"},{"location":"users/usage/architecture/","title":"How DDEV Works","text":"<p>DDEV is a Go application that stores its configuration in files on your workstation. It uses those blueprints to mount your project files into Docker containers that facilitate the operation of a local development environment.</p> <p>DDEV writes and uses docker-compose files for you, which is a detail you can cheerfully ignore unless you\u2019re Docker-curious or defining your own services.</p>"},{"location":"users/usage/architecture/#directory-tour","title":"Directory Tour","text":"<p>DDEV stores configuration in two places: a single <code>.ddev</code> directory in your home folder, and a <code>.ddev</code> directory for each project you set up.</p> <p>The global configuration directory is used to keep track of your projects and any of the global settings that apply across all projects. You\u2019ll probably spend more time working with the per-project <code>.ddev</code> directories for their configuration and overrides.</p>"},{"location":"users/usage/architecture/#project-files","title":"Project Files","text":"<p>A project\u2019s <code>.ddev</code> directory can be intimidating at first, so let\u2019s take a look at what lives in there.</p> <p>Yours May Differ Slightly</p> <p>You may have some directories or files that aren\u2019t listed here, likely added by custom services. For example, if you see a <code>solr</code> directory, it probably pertains to a custom Solr add-on service.</p> <code>addon-metadata</code> directory Contains metadata about add-on services that have been added to the project. This allows commands like <code>ddev get --installed</code> and <code>ddev get --remove</code> to work, see Viewing and removing add-ons. <code>apache</code> directory Default Apache configuration when using <code>webserver_type: apache-fpm</code>, which can be customized. <code>commands</code> subdirectories Project custom shell commands that can run on the host or inside a container. <code>config.yaml</code> The project\u2019s main configuration file. <code>config.*.yaml</code> files Environmental overrides for parts of <code>config.yaml</code>. <code>db-build</code> directory Can be used to provide a custom Dockerfile for the database container. <code>db_snapshots</code> directory Where snapshots go when you run the <code>ddev snapshot</code> command. You can safely delete anything in here that you don\u2019t need. <code>docker-compose.*.yaml</code> files Where Docker-friendly users can provide their own custom compose files that add or override services. Read more in Additional Service Configurations &amp; Add-ons and check out examples in ddev-contrib. <code>homeadditions</code> directory Files to be copied into the web container on startup. You could use this, for example, to override the default home directory contents (<code>.profile</code>, <code>.bashrc</code>, <code>.composer</code>, <code>.ssh</code>), or include scripts that you\u2019d like to be available inside the container. (You can do the same thing globally in <code>~/.ddev/homeadditions</code>.) Check out the homeadditions docs for more. <code>mutagen</code> directory Contains <code>mutagen.yml</code>, where you can override the default Mutagen configuration. <code>mysql</code> directory Contains optional <code>mysql</code> or <code>mariadb</code> configuration. <code>nginx</code> directory Can be used for add-on nginx snippets. <code>nginx_full</code> directory Contains the nginx configuration used by the web container, which can be customized. <code>postgres</code> directory Contains <code>postgresql.conf</code>, which can be edited if needed. Remove the <code>#ddev-generated</code> line at the top to take it over. <code>providers</code> directory Contains examples and implementations to demonstrate how the <code>ddev pull</code> command can work with hosting providers. <code>traefik</code> directory Configures the <code>ddev-router</code> when it is using Traefik. <code>web-build</code> directory Can be used to provide a custom Dockerfile for the web container. <code>web-entrypoint.d</code> directory Custom scripts (named <code>*.sh</code>) in this directory will be run during web container startup, before the php-fpm server or other daemons are run. This can be useful, for example, for introducing environment variables into the context of the nginx and php-fpm servers. Use this carefully, because custom entrypoints can very easily break things. <code>xhprof</code> directory Contains the <code>xhprof_prepend.php</code> file that can be used to customize xhprof behavior for different types of websites."},{"location":"users/usage/architecture/#hidden-project-files","title":"Hidden Project Files","text":"<p>Files beginning with <code>.</code> are hidden because they shouldn\u2019t be fiddled with; most are regenerated, and thus overwritten, on every <code>ddev start</code>:</p> <code>.dbimageBuild</code> directory The generated Dockerfile used to customize the <code>db</code> container on first start. <code>.ddev-docker-compose-base.yaml</code> The base docker-compose file used to describe a project. <code>.ddev-docker-compose-full.yaml</code> The result of preprocessing <code>.ddev-docker-compose-base.yaml</code> using <code>docker-compose config</code>. Mostly it replaces environment variables with their values. <code>.gitignore</code> The <code>.gitignore</code> is generated by DDEV and should generally not be edited or checked in. (It gitignores itself to make sure you don\u2019t check it in.) It\u2019s generated on every <code>ddev start</code> and will change as DDEV versions change, so if you check it in by accident it will always be showing changes that you don\u2019t need to see in <code>git status</code>. <code>.global_commands</code> Temporary directory used to get global commands available inside a project. You shouldn\u2019t ever have to look there. <code>.homeadditions</code> Temporary directory used to consolidate global <code>homeadditions</code> with project-level <code>homeadditions</code>. You shouldn\u2019t ever have to look here. <code>.webimageBuild</code> directory The generated Dockerfile used to customize the web container on first start."},{"location":"users/usage/architecture/#global-files","title":"Global Files","text":"<p>There\u2019s only one global <code>.ddev</code> directory, which lives in your home directory: <code>~/.ddev</code> (<code>$HOME/.ddev</code>).</p> <code>global_config.yaml</code> This YAML file defines your global configuration, which consists of various config settings along with an important <code>project_info</code> key that lets DDEV keep track of the projects you\u2019ve added. <code>bin</code> directory This is where DDEV stores private executable binaries it needs, like <code>mutagen</code> and <code>docker-compose</code>. <code>commands</code> directory Directory for storing DDEV commands that should be available in containers, like <code>npm</code>, <code>artisan</code>, and <code>drush</code> for example. These are organized in subdirectories named for where they\u2019ll be used: <code>db</code>, <code>host</code>, and <code>web</code>. You can add your own custom commands here. <code>homeadditions</code> directory Like the per-project <code>homeadditions</code> directory, files you add here will automatically be copied into the web container\u2019s home directory. Files from the global homeadditions directory will be copied into every web container\u2019s home directory."},{"location":"users/usage/architecture/#hidden-global-files","title":"Hidden Global Files","text":"<p>Again, these files are mostly regenerated on every <code>ddev start</code> so it\u2019s best to leave them alone:</p> <code>.gitignore</code> Prevents files from getting checked in when they shouldn\u2019t be. <code>.router-compose-full.yaml</code> The complete, generated docker-compose directive used for DDEV\u2019s router. <code>.router-compose.yaml</code> The base docker-compose directive used in generating <code>.router-compose-full.yaml</code>. <code>router-compose.*.yaml</code> <code>docker-compose</code> files with the name <code>router-compose.*.yaml</code> can be used to override stanzas in the <code>.router-compose.yaml</code> file. <code>.ssh-auth-compose-full.yaml</code> The complete, generated docker-compose directive used for DDEV\u2019s SSH agent. <code>.ssh-auth-compose.yaml</code> The base docker-compose directive used in generating <code>.ssh-auth-compose-full.yaml</code>. <code>.sshimageBuild</code> Directory used for storing DDEV\u2019s generated <code>Dockerfile</code> used in building the SSH agent image. <code>.update</code> An empty file whose purpose is mysterious and intriguing. <p><code>.ddev_mutagen_data_directory</code></p> <p>DDEV uses a global <code>~/.ddev_mutagen_data_directory</code> for storing Mutagen sync data.</p>"},{"location":"users/usage/architecture/#container-architecture","title":"Container Architecture","text":"<p>It\u2019s easiest to think of DDEV as a set of little networked computers (Docker containers) that are in a different network from your workstation but still reachable from it.</p> <p>When you install or upgrade DDEV you\u2019re mostly installing a single <code>ddev</code> binary. When you use it, it downloads the Docker images it needs, and then starts them based on what\u2019s needed for your projects.</p> <ul> <li>The <code>ddev-webserver</code> container (one per project) runs <code>nginx</code> or <code>apache</code> and <code>php-fpm</code> for a single site, so it does all the basic work of a PHP-interpreting web server.</li> <li>The <code>ddev-dbserver</code> container (one per project) handles MariaDB/MySQL/PostgreSQL database management. It can be reached from the web server by the hostname <code>db</code> or with the more explicit name <code>ddev-&lt;projectname&gt;-db</code>.</li> <li>Additional add-on services may be there for a given project, for example <code>phpmyadmin</code>, <code>solr</code>, <code>elasticsearch</code>, or <code>memcached</code>.</li> </ul> <p>Although it\u2019s not common usage, different projects can communicate with each other as described in the FAQ.</p> <p>Now for the two oddball global containers (there\u2019s only one of each):</p> <ul> <li>The <code>ddev-router</code> container is a \u201creverse proxy\u201d. It takes incoming HTTP/S requests, looks up the hostname in the incoming URL, and routes it to the correct project\u2019s <code>ddev-webserver</code>. Depending on the project\u2019s configuration with <code>additional_hostnames</code> and <code>additional_fqdns</code>, it can route many different URLs to a single project\u2019s <code>ddev-webserver</code>. If, like most people, you use the named URLs like <code>https://something.ddev.site</code>, your request goes through the router. When you use the <code>127.0.0.1</code> URLs, the requests go directly to the <code>ddev-webserver</code>.</li> <li>The <code>ddev-ssh-agent</code> container runs an <code>ssh-agent</code> inside the Docker network so that after run <code>ddev auth ssh</code> all the different projects can use your SSH keys for outgoing requests\u2014like private Composer access or SCP from a remote host.</li> </ul> <p>Here\u2019s a basic diagram of how it works inside the Docker network:</p> <p></p>"},{"location":"users/usage/cli/","title":"Using the <code>ddev</code> Command","text":"<p>Type <code>ddev</code> or <code>ddev -h</code> in a terminal window to see the available DDEV commands. There are commands to configure a project, start, stop, describe, etc. Each command also has help using <code>ddev help &lt;command&gt;</code> or <code>ddev command -h</code>. For example, <code>ddev help snapshot</code> will show help and examples for the snapshot command.</p> <ul> <li><code>ddev config</code> configures a project\u2019s type and docroot.</li> <li><code>ddev start</code> starts up a project.</li> <li><code>ddev launch</code> opens a web browser showing the project.</li> <li><code>ddev list</code> shows current projects and their state.</li> <li><code>ddev describe</code> gives all the info about the current project.</li> <li><code>ddev ssh</code> takes you into the web container.</li> <li><code>ddev exec &lt;command&gt;</code> executes a command inside the web container.</li> <li><code>ddev stop</code> stops a project and removes its memory usage (but does not throw away any data).</li> <li><code>ddev poweroff</code> stops all resources that DDEV is using and stops the Mutagen daemon if it\u2019s running.</li> <li><code>ddev delete</code> destroys the database and DDEV\u2019s knowledge of the project without touching your code.</li> <li><code>ddev get</code> adds an add-on service.</li> </ul>"},{"location":"users/usage/cli/#lots-of-other-commands","title":"Lots of Other Commands","text":"<ul> <li><code>ddev mysql</code> gives direct access to the MySQL client and <code>ddev psql</code> to the PostgreSQL <code>psql</code> client.</li> <li><code>ddev sequelace</code>, <code>ddev tableplus</code>, and <code>ddev querious</code> (macOS only, if the app is installed) give access to the Sequel Ace, TablePlus or Querious database browser GUIs.</li> <li><code>ddev heidisql</code> (Windows/WSL2 only, if installed) gives access to the HeidiSQL database browser GUI.</li> <li><code>ddev import-db</code> and <code>ddev export-db</code> import or export SQL or compressed SQL files.</li> <li><code>ddev composer</code> runs Composer inside the container. For example, <code>ddev composer install</code> will do a full composer install for you without even needing Composer on your computer. See developer tools.</li> <li><code>ddev snapshot</code> makes a very fast snapshot of your database that can be easily and quickly restored with <code>ddev snapshot restore</code>.</li> <li><code>ddev share</code> requires ngrok and at least a free account on ngrok.com so you can let someone in the next office or on the other side of the planet see your project and what you\u2019re working on. <code>ddev share -h</code> gives more info about how to set up ngrok.</li> <li><code>ddev xdebug</code> enables Xdebug, <code>ddev xdebug off</code> disables it, and <code>ddev xdebug status</code> shows status. You can toggle Xdebug on and off easily using <code>ddev xdebug toggle</code>.</li> <li><code>ddev xhprof</code> enables xhprof, <code>ddev xhprof off</code> disables it, and <code>ddev xhprof status</code> shows status.</li> <li><code>ddev drush</code> (Drupal and Backdrop only) gives direct access to the <code>drush</code> CLI.</li> <li><code>ddev artisan</code> (Laravel only) gives direct access to the Laravel <code>artisan</code> CLI.</li> <li><code>ddev magento</code> (Magento2 only) gives access to the <code>magento</code> CLI.</li> <li><code>ddev craft</code> (Craft CMS only) gives access to the <code>craft</code> CLI.</li> <li><code>ddev yarn</code> and <code>ddev npm</code> give direct access to the <code>yarn</code> and <code>npm</code> CLIs.</li> </ul>"},{"location":"users/usage/cli/#nodejs-npm-nvm-and-yarn","title":"Node.js, npm, nvm, and Yarn","text":"<p><code>nodejs</code>, <code>npm</code>, <code>nvm</code> and <code>yarn</code> are preinstalled in the web container. You can configure the default value of the installed Node.js version with the <code>nodejs_version</code> option in <code>.ddev/config.yaml</code> or with <code>ddev config --nodejs_version</code>. You can also override that with any value using the built-in <code>nvm</code> in the web container or with <code>ddev nvm</code>, for example <code>ddev nvm install 6</code>. There is also a <code>ddev yarn</code> command.</p>"},{"location":"users/usage/cli/#more-bundled-tools","title":"More Bundled Tools","text":"<p>In addition to the commands listed above, there are lots of tools included inside the containers:</p> <ul> <li><code>ddev describe</code> tells how to access Mailpit, which captures email in your development environment.</li> <li>Composer, Git, Node.js, npm, nvm, and dozens of other tools are installed in the web container, and you can access them via <code>ddev ssh</code> or <code>ddev exec</code>.</li> <li><code>ddev logs</code> gets you web server logs; <code>ddev logs -s db</code> gets database server logs.</li> <li><code>sqlite3</code> and the <code>mysql</code> and <code>psql</code> clients are inside the web container (and <code>mysql</code> or <code>psql</code> client is also in the <code>db</code> container).</li> </ul>"},{"location":"users/usage/cli/#exporting-a-database","title":"Exporting a Database","text":"<p>You can export a database with <code>ddev export-db</code>, which outputs to stdout or with options to a file:</p> <pre><code>ddev export-db --file=/tmp/db.sql.gz\nddev export-db --gzip=false --file=/tmp/db.sql\nddev export-db &gt;/tmp/db.sql.gz\n</code></pre>"},{"location":"users/usage/cli/#ddev-import-files","title":"<code>ddev import-files</code>","text":"<p>To import static file assets for a project, such as uploaded images and documents, use the command <code>ddev import-files</code>. This command will prompt you to specify the location of your import asset, then import the assets into the project\u2019s upload directory. To define a custom upload directory, set the <code>upload_dirs</code> config option. If no custom upload directory is defined, the default will be used:</p> <ul> <li>For Backdrop projects, this is <code>files</code>.</li> <li>For Drupal projects, this is <code>sites/default/files</code>.</li> <li>For Magento 1 projects, this is the <code>media</code> directory.</li> <li>For Magento 2 projects, this is the <code>pub/media</code> directory.</li> <li>For Shopware projects, this is the <code>media</code> directory.</li> <li>For TYPO3 projects, this is the <code>fileadmin</code> directory.</li> <li>For WordPress projects, this is the <code>wp-content/uploads</code> directory.</li> </ul> <p>Other project types need a custom configuration to be able to use this command.</p> <pre><code>$ ddev import-files\nProvide the path to the source directory or archive you wish to import.\nPlease note: if the destination directory exists, it will be emptied and replaced with the\nimport assets specified here.\nPath to file(s): ~/workspace/d10/.tarballs/files.tgz\nYou provided an archive. Do you want to extract from a specific path in your\narchive? You may leave this blank if you wish to use the full archive contents.\nArchive extraction path:\nSuccessfully imported files for d10\n</code></pre> <p><code>ddev import-files</code> supports the following file types: <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.xz</code>, <code>.tar.bz2</code>, <code>.tgz</code>, or <code>.zip</code>.</p> <p>It can also import a directory containing static assets.</p> <p>If using a Tar or ZIP archive, the archive should contain only the files inside the files directory. For example in a Drupal site with files at <code>sites/default/files</code>, the archive should only contain the contents of the <code>files</code> directory; it should not contain a single <code>files</code> directory. To do this with the <code>tar</code> command, <code>cd</code> into the directory and create the archive there. An example Tar file creation is:</p> <pre><code>cd web/sites/default/files\ntar -czf ~/Downloads/files.tgz .\n</code></pre> <p>If you want to use <code>import-files</code> without answering prompts, use the <code>--source</code> or <code>-s</code> flag to provide the path to the import asset. If you\u2019re importing an archive, and wish to specify the path within the archive to extract, you can use the <code>--extract-path</code> flag in conjunction with the <code>--source</code> flag. Example:</p> <p><code>ddev import-files --source=/tmp/files.tgz</code></p> <p>When multiple <code>upload_dirs</code> are defined and you want to import to another upload dir than the first one, use the <code>--target</code> or <code>-t</code> flag to provide the path to the desired upload dir:</p> <p><code>ddev import-files --target=../private --source=/tmp/files.tgz</code></p> <p>See <code>ddev help import-files</code> for more examples.</p>"},{"location":"users/usage/cli/#snapshotting-and-restoring-a-database","title":"Snapshotting and Restoring a Database","text":"<p>The project database is stored in a Docker volume, but can be snapshotted (and later restored) with the <code>ddev snapshot</code> command. A snapshot is automatically taken when you run <code>ddev stop --remove-data</code>. For example:</p> <pre><code>ddev snapshot\nCreating database snapshot d9_20220107124831-mariadb_10.3.gz\nCreated database snapshot d9_20220107124831-mariadb_10.3.gz\n\nddev snapshot restore d9_20220107124831\nStopping db container for snapshot restore of 'd9_20220107124831-mariadb_10.3.gz'...\nRestored database snapshot d9_20220107124831-mariadb_10.3.gz\n</code></pre> <p>Snapshots are stored as gzipped files in the project\u2019s <code>.ddev/db_snapshots</code> directory, and the file created for a snapshot can be renamed as necessary. For example, if you rename the above <code>d9_20220107124831-mariadb_10.3.gz</code> file to <code>working-before-migration-mariadb_10.3.gz</code>, then you can use <code>ddev snapshot restore working-before-migration</code>. (The description of the database type and version\u2014<code>mariadb_10.3</code>, for example\u2014must remain intact.) To restore the latest snapshot add the <code>--latest</code> flag (<code>ddev snapshot restore --latest</code>).</p> <p>List snapshots for an existing project with <code>ddev snapshot --list</code>. (Add the <code>--all</code> option for an exhaustive list; <code>ddev snapshot --list --all</code>.) You can remove all of them with <code>ddev snapshot --cleanup</code>, or remove a single snapshot with <code>ddev snapshot --cleanup --name &lt;snapshot-name&gt;</code>.</p> <p>Tip</p> <p>The default 120-second timeout may be inadequate for restores with very large snapshots or slower systems. You can increase this timeout by setting <code>default_container_timeout</code> to a higher value.</p> <p>A timeout doesn\u2019t necessarily mean the restore failed; you can watch the snapshot restore complete by running <code>ddev logs -s db</code>.</p>"},{"location":"users/usage/cli/#interacting-with-your-project","title":"Interacting with Your Project","text":"<p>DDEV provides several commands to facilitate interacting with your project in the development environment. These commands can be run within the working directory of your project while the project is running in DDEV.</p>"},{"location":"users/usage/cli/#executing-commands-in-containers","title":"Executing Commands in Containers","text":"<p>The <code>ddev exec</code> command allows you to run shell commands in the container for a DDEV service. By default, commands are executed on the web service container, in the docroot path of your project. This allows you to use the developer tools included in the web container. For example, to run the <code>ls</code> command in the web container, you would run <code>ddev exec ls</code> or <code>ddev . ls</code>.</p> <p>To run a shell command in the container for a different service, use the <code>--service</code> (or <code>-s</code>) flag at the beginning of your <code>exec</code> command to specify the service the command should be run against. For example, to run the MySQL client in the database, container, you would run <code>ddev exec --service db mysql</code>. To specify the directory in which a shell command will be run, use the <code>--dir</code> flag. For example, to see the contents of the <code>/usr/bin</code> directory, you would run <code>ddev exec --dir /usr/bin ls</code>.</p> <p>To run privileged commands, sudo can be passed into <code>ddev exec</code>. For example, to update the container\u2019s apt package lists, use <code>ddev exec sudo apt-get update</code>.</p> <p>Commands can also be executed using the shorter <code>ddev . &lt;cmd&gt;</code> alias.</p> <p>Normally, <code>ddev exec</code> commands are executed in the container using Bash, which means that environment variables and redirection and pipes can be used. For example, a complex command like <code>ddev exec 'ls -l ${DDEV_FILES_DIR} | grep x &gt;/tmp/junk.out'</code> will be interpreted by Bash and will work. However, there are cases where Bash introduces too much complexity and it\u2019s best to run the command directly. In those cases, something like <code>ddev exec --raw ls -l \"dir1\" \"dir2\"</code> may be useful. With <code>--raw</code>, the <code>ls</code> command is executed directly instead of the full command being interpreted by Bash. But you cannot use environment variables, pipes, redirection, etc.</p>"},{"location":"users/usage/cli/#ssh-into-containers","title":"SSH Into Containers","text":"<p>The <code>ddev ssh</code> command opens an interactive Bash or sh shell session to the container for a DDEV service. The web service is connected by default, and the session can be ended by typing <code>exit</code>. To connect to another service, use the <code>--service</code> flag to specify the service you want to connect to. For example, to connect to the database container, you would run <code>ddev ssh --service db</code>. To specify the destination directory, use the <code>--dir</code> flag. For example, to connect to the database container and be placed into the <code>/home</code> directory, you would run <code>ddev ssh --service db --dir /home</code>.</p> <p>You can also use your personal SSH keys within the web container. Run <code>ddev auth ssh</code> to add the keys from your <code>~/.ssh</code> directory and provide a passphrase, and those keys will be usable from within the web container. You generally only have to <code>ddev auth ssh</code> one time per computer reboot. This is a very popular approach for accessing private Composer repositories, or for using <code>drush</code> aliases against remote servers.</p>"},{"location":"users/usage/cli/#ddev-logs","title":"<code>ddev logs</code>","text":"<p>The <code>ddev logs</code> command allows you to easily view error logs from the web container (both nginx/Apache and php-fpm logs are concatenated). To follow the logs in real time, run <code>ddev logs -f</code>. When you\u2019re done, press CTRL + C to exit the log trail. Similarly, <code>ddev logs -s db</code> will show logs from a running or stopped database container.</p>"},{"location":"users/usage/cli/#stopping-a-project","title":"Stopping a Project","text":"<p>To remove a project\u2019s containers, run <code>ddev stop</code> in the project\u2019s working directory. To remove any running project\u2019s containers regardless of context, specify the project name as an argument: <code>ddev stop &lt;projectname&gt;</code>.</p> <p><code>ddev stop</code> is not destructive. It removes the Docker containers but does not remove the database for the project, and does nothing to your code. This allows you to have many configured projects with databases loaded without wasting Docker containers on unused projects. <code>ddev stop</code> does not affect the project codebase and files.</p> <p>To remove the imported database for a project, use the flag <code>--remove-data</code>, as in <code>ddev stop --remove-data</code>. This command will destroy both the containers and the imported database contents.</p>"},{"location":"users/usage/cms-settings/","title":"Managing CMS Settings","text":"<p>Any CMS-specific project type, meaning any of the non-generic CMS Quickstarts, has settings that DDEV manages to save you time and optimize configuration for local development.</p> <p>Generally, DDEV will:</p> <ul> <li>Create a main settings file if none exists, like Drupal\u2019s <code>settings.php</code>.</li> <li>Create a specialty config file with DDEV-specific settings, like <code>AdditionalSettings.php</code> for TYPO3 or <code>settings.ddev.php</code> for Drupal.</li> <li>Add an include of the specialty file if needed, like adding <code>settings.ddev.php</code> include to the bottom of Drupal\u2019s <code>settings.php</code>.</li> </ul> <p>While this reduces setup time for new users, makes it easier to try out a CMS, and speeds up project creation, you may still want to modify or override DDEV\u2019s CMS-specific behavior.</p>"},{"location":"users/usage/cms-settings/#controlling-or-removing-cms-settings","title":"Controlling or Removing CMS Settings","text":"<p>There are several ways to back off DDEV\u2019s CMS settings management:</p> <ol> <li> <p>Take control of files by removing the <code>#ddev-generated</code> comment. DDEV will automatically update any it\u2019s added containing a <code>#ddev-generated</code> comment. This means you don\u2019t need to touch that file, but also that any changes you make will be overwritten. As soon as you remove the comment, DDEV will ignore that file and leave you fully in control over it. (Don\u2019t forget to check it into version control!)</p> <p>Reversing the change</p> <p>If you change your mind and want DDEV to take over the file again, delete it and run <code>ddev start</code>. DDEV will recreate its own version, which you may want to remove from your Git project.</p> </li> <li> <p>Disable settings management. You can tell DDEV to use a specific project type without creating settings files by either setting <code>disable_settings_management</code> to <code>true</code> or running <code>ddev config --disable-settings-management</code>.</p> </li> <li> <p>Switch to the generic PHP project type. If you don\u2019t want DDEV\u2019s CMS-specific settings, you can switch your project to the generic <code>php</code> type by editing <code>type: php</code> in the project\u2019s settings or running <code>ddev config --project-type=php</code>. DDEV will no longer create or tweak any settings files. You\u2019ll lose any perks from the nginx configuration for the CMS, but you can always customize nginx settings or Apache settings separately.</p> </li> <li> <p>Un-set the <code>$IS_DDEV_PROJECT</code> environment variable. This environment variable is set <code>true</code> by default in DDEV\u2019s environment, and can be used to fence off DDEV-specific behavior. When it\u2019s empty, the important parts of <code>settings.ddev.php</code> and <code>AdditionalSettings.php</code> (for TYPO3) are not executed. This means that DDEV\u2019s <code>settings.ddev.php</code> won\u2019t be invoked if it somehow ends up in a production environment or in a non-DDEV local development environment.</p> </li> </ol> <p>Ignore <code>.ddev/.gitignore</code></p> <p>The <code>.ddev/.gitignore</code> file is created when you run <code>ddev start</code> and <code>disable_settings_management</code> is <code>false</code>. You should not check this file in, since it ignores itself and DDEV\u2019s temporary and automatically-managed files. This makes it easier for teams to share the <code>.ddev</code> folder via Git, even if the <code>.ddev/.gitignore</code> file changes with different versions.</p>"},{"location":"users/usage/cms-settings/#cms-specific-help-and-techniques","title":"CMS-Specific Help and Techniques","text":""},{"location":"users/usage/cms-settings/#drupal-specifics","title":"Drupal Specifics","text":""},{"location":"users/usage/cms-settings/#drupal-settings-files","title":"Drupal Settings Files","text":"<p>By default, DDEV will create settings files for your project that work out of the box. It creates a <code>sites/default/settings.ddev.php</code> and adds an include in <code>sites/default/settings.php</code> to bring that in. There are guards to prevent the <code>settings.ddev.php</code> from being active when the project is not running under DDEV, but it still should not be checked in and is gitignored.</p>"},{"location":"users/usage/cms-settings/#database-requirements-for-drupal-95","title":"Database requirements for Drupal 9.5+","text":"<ul> <li>Using MySQL or MariaDB, Drupal requires <code>SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED</code> and DDEV does this for you on <code>ddev start</code>.</li> <li>Using PostgreSQL, Drupal requires the<code>pg_trm</code> extension. DDEV creates this extension automatically for you on <code>ddev start</code>.</li> </ul>"},{"location":"users/usage/cms-settings/#twig-debugging","title":"Twig Debugging","text":"<p>With the default Drupal configuration, it\u2019s very difficult to debug Twig templates; you need to use <code>development.services.yml</code> instead of <code>services.yml</code>. Add this line in your <code>settings.php</code> or <code>settings.local.php</code>. See discussion at drupal.org and the Drupal documentation.</p> <pre><code>$settings['container_yamls'][] = DRUPAL_ROOT . '/sites/development.services.yml';\n</code></pre>"},{"location":"users/usage/cms-settings/#multisite","title":"Multisite","text":"<ol> <li>Start with the DDEV Drupal 8 Multisite Recipe.</li> <li> <p>Update configuration files.</p> <ol> <li> <p>Update each <code>site/{site_name}/settings.php</code>:</p> <pre><code>/**\n * DDEV environments will have $databases (and other settings) set\n * by an auto-generated file. Make alterations here for this site\n * in a multisite environment.\n */\nelseif (getenv('IS_DDEV_PROJECT') == 'true') {\n  /**\n   * Alter database settings and credentials for DDEV environment.\n   * Includes loading the DDEV-generated `default/settings.ddev.php`.\n   */\n  include $app_root . '/' . $site_path . '/settings.databases.ddev.inc';\n}\n</code></pre> </li> <li> <p>Add a <code>settings.databases.ddev.inc</code> in each <code>site/{site_name}/</code>:</p> <pre><code>/**\n * Fetch DDEV-generated database credentials and other settings.\n */\nrequire $app_root . '/sites/default/settings.ddev.php';\n\n/**\n * Alter default database for this site. `settings.ddev.php` will have\n * \u201creset\u201d this to 'db'.\n */\n$databases['default']['default']['database'] = 'site_name';\n</code></pre> </li> <li> <p>Update your <code>web_environment</code> config option if you\u2019re using site aliases:</p> <pre><code>web_environment:\n  # Make DDEV Drush shell PIDs last for entire life of the container\n  # so `ddev drush site:set @alias` persists for all Drush connections.\n  # https://chrisfromredfin.dev/posts/drush-use-ddev/\n  - DRUSH_SHELL_PID=PERMANENT\n</code></pre> </li> </ol> </li> </ol>"},{"location":"users/usage/cms-settings/#typo3-specifics","title":"TYPO3 Specifics","text":""},{"location":"users/usage/cms-settings/#settings-files","title":"Settings Files","text":"<p>On <code>ddev start</code>, DDEV creates a <code>public/typo3conf/AdditionalConfiguration.php</code> file with database configuration in it.</p>"},{"location":"users/usage/cms-settings/#setup-a-base-variant-since-typo3-95","title":"Setup a Base Variant (since TYPO3 9.5)","text":"<p>Since TYPO3 9.5 you have to setup a <code>Site Configuration</code> for each site you like to serve. To be able to browse the site on your local environment, you have to set up a <code>Base Variant</code> in your <code>Site Configuration</code> depending on your local context. In this example we assume a <code>Application Context</code> <code>Development/DDEV</code> which can be set in the DDEV\u2019s <code>config.yaml</code>:</p> <pre><code>web_environment:\n- TYPO3_CONTEXT=Development/DDEV\n</code></pre> <p>This variable will be available after the project start or restart.</p> <p>Afterwards add a <code>Base Variant</code> to your <code>Site Configuration</code>:</p> <pre><code>baseVariants:\n  -\n    base: 'https://example.com.ddev.site/'\n    condition: 'applicationContext == \"Development/DDEV\"'\n</code></pre> <p>See also TYPO3 Documentation.</p>"},{"location":"users/usage/commands/","title":"Commands","text":"<p>You can tell DDEV what to do by running its commands. This page details each of the available commands and their options, or flags.</p> <p>Run DDEV without any commands or flags to see this list in your terminal:</p> <pre><code>\u2192  ddev\nCreate and maintain a local web development environment.\nDocs: https://ddev.readthedocs.io\nSupport: https://ddev.readthedocs.io/en/stable/users/support\n\nUsage:\n  ddev [command]\n\nAvailable Commands:\n  auth             A collection of authentication commands\n  blackfire        Enable or disable blackfire.io profiling (global shell web container command)\n  clean            Removes items ddev has created\n  composer         Executes a composer command within the web container\n...\n</code></pre> <p>Use <code>ddev help</code> to learn more about a specific command, like this example for <code>ddev describe</code>:</p> <pre><code>\u2192  ddev help describe\nGet a detailed description of a running ddev project. Describe provides basic\ninformation about a ddev project, including its name, location, url, and status.\nIt also provides details for MySQL connections, and connection information for\nadditional services like Mailpit. You can run 'ddev describe' from\na project directory to describe that project, or you can specify a project to describe by\nrunning 'ddev describe &lt;projectname&gt;'.\n\nUsage:\n  ddev describe [projectname] [flags]\n\nAliases:\n  describe, status, st, desc\n\nExamples:\nddev describe\nddev describe &lt;projectname&gt;\nddev status\nddev st\n\nFlags:\n  -h, --help   help for describe\n\nGlobal Flags:\n  -j, --json-output   If true, user-oriented output will be in JSON format.\n</code></pre>"},{"location":"users/usage/commands/#global-flags","title":"Global Flags","text":"<p>Two flags are available for every command:</p> <ul> <li><code>--help</code> or <code>-h</code>: Outputs more information about a command rather than executing it.</li> <li><code>--json-output</code> or <code>-j</code>: Format user-oriented output in JSON.</li> </ul>"},{"location":"users/usage/commands/#auth","title":"<code>auth</code>","text":"<p>Authentication commands.</p>"},{"location":"users/usage/commands/#auth-ssh","title":"<code>auth ssh</code>","text":"<p>Add SSH key authentication to the <code>ddev-ssh-agent</code> container.</p> <p>Example:</p> <pre><code># Add your SSH keys to the SSH agent container\nddev auth ssh\n</code></pre> <p>Flags:</p> <ul> <li><code>--ssh-key-path</code>, <code>-d</code>: Full path to SSH key directory.</li> </ul>"},{"location":"users/usage/commands/#artisan","title":"<code>artisan</code>","text":"<p>Run the <code>artisan</code> command; available only in projects of type <code>laravel</code>, and only available if <code>artisan</code> is in the project root.</p> <pre><code># Show all artisan subcommands\nddev artisan list\n</code></pre>"},{"location":"users/usage/commands/#blackfire","title":"<code>blackfire</code>","text":"<p>Enable or disable Blackfire profiling (global shell web container command).</p> <pre><code># Display Blackfire profiling status\nddev blackfire status\n\n# Start Blackfire profiling\nddev blackfire on\n\n# Stop Blackfire profiling\nddev blackfire off\n</code></pre> <p>Tip</p> <p>There are synonyms for the <code>on</code> and <code>off</code> arguments that have the exact same effect:</p> <ul> <li><code>on</code>: <code>start</code>, <code>enable</code>, <code>true</code></li> <li><code>off</code>: <code>stop</code>, <code>disable</code>, <code>false</code></li> </ul>"},{"location":"users/usage/commands/#clean","title":"<code>clean</code>","text":"<p>Removes items DDEV has created. (See Uninstalling DDEV.)</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Clean all DDEV projects.</li> <li><code>--dry-run</code>: Run the clean command without deleting.</li> </ul> <p>Example:</p> <pre><code># Preview cleaning all projects without actually removing anything\nddev clean --dry-run --all\n\n# Clean all projects\nddev clean --all\n\n# Clean my-project and my-other-project\nddev clean my-project my-other-project\n</code></pre>"},{"location":"users/usage/commands/#composer","title":"<code>composer</code>","text":"<p>Executes a Composer command within the web container.</p> <p><code>ddev composer create</code> is a special command that is an adaptation of <code>composer create-project</code>. See DDEV and Composer for more information.</p> <p>Example:</p> <pre><code># Install Composer packages\nddev composer install\n</code></pre> <p>Example of <code>ddev composer create</code>:</p> <pre><code># Create a new Drupal project in the current directory\nddev composer create drupal/recommended-project\n````\n\n## `config`\n\nCreate or modify a DDEV project\u2019s configuration in the current directory.\n\n!!!tip \"You can also set these via YAML!\"\n    These settings, plus a few more, can be set by editing stored [Config Options](../configuration/config.md).\n\nExample:\n\n```shell\n# Start interactive project configuration\nddev config\n\n# Configure a Drupal 8 project with a `web` document root\nddev config --docroot=web --project-type=drupal8\n\n# Switch the project\u2019s default `nginx-fpm` to `apache-fpm`\nddev config --webserver-type=apache-fpm\n</code></pre> <p>Flags:</p> <ul> <li><code>--additional-fqdns</code>: Comma-delimited list of project FQDNs.</li> <li><code>--additional-hostnames</code>: Comma-delimited list of project hostnames.</li> <li><code>--auto</code>: Automatically run config without prompting. (default <code>true</code>)</li> <li><code>--bind-all-interfaces</code>: Bind host ports on all interfaces, not only on localhost network interface.</li> <li><code>--composer-root</code>: Overrides the default Composer root directory for the web service.</li> <li><code>--composer-root-default</code>: Unsets a web service Composer root directory override.</li> <li><code>--composer-version</code>: Specify override for Composer version in the web container. This may be <code>\"\"</code>, <code>\"1\"</code>, <code>\"2\"</code>, <code>\"2.2\"</code>, <code>\"stable\"</code>, <code>\"preview\"</code>, <code>\"snapshot\"</code>, or a specific version.</li> <li><code>--database</code>: Specify the database type:version to use. Defaults to <code>mariadb:10.4</code>.</li> <li><code>--db-image</code>: Sets the db container image.</li> <li><code>--db-image-default</code>: Sets the default db container image for this DDEV version.</li> <li><code>--db-working-dir</code>: Overrides the default working directory for the db service.</li> <li><code>--db-working-dir-default</code>: Unsets a db service working directory override.</li> <li><code>--dbimage-extra-packages</code>: A comma-delimited list of Debian packages that should be added to db container when the project is started.</li> <li><code>--default-container-timeout</code>: Default time in seconds that DDEV waits for all containers to become ready on start. (default <code>120</code>)</li> <li><code>--disable-settings-management</code>: Prevent DDEV from creating or updating CMS settings files.</li> <li><code>--disable-upload-dirs-warning</code>: Suppresses warning when a project is using <code>performance_mode: mutagen</code> but does not have <code>upload_dirs</code> set.</li> <li><code>--docroot</code>: Provide the relative docroot of the project, like <code>docroot</code> or <code>htdocs</code> or <code>web</code>. (defaults to empty, the current directory)</li> <li><code>--fail-on-hook-fail</code>: Decide whether <code>ddev start</code> should be interrupted by a failing hook.</li> <li><code>--host-db-port</code>: The db container\u2019s localhost-bound port.</li> <li><code>--host-https-port</code>: The web container\u2019s localhost-bound HTTPS port.</li> <li><code>--host-webserver-port</code>: The web container\u2019s localhost-bound port.</li> <li><code>--http-port</code>: The router HTTP port for this project.</li> <li><code>--https-port</code>: The router HTTPS port for this project.</li> <li><code>--image-defaults</code>: Sets the default web and db container images.</li> <li><code>--mailpit-http-port</code>: Router port to be used for Mailpit HTTP access.</li> <li><code>--mailpit-https-port</code>: Router port to be used for Mailpit HTTPS access.</li> <li><code>--ngrok-args</code>: Provide extra args to ngrok in <code>ddev share</code>.</li> <li><code>--no-project-mount</code>: Whether or not to skip mounting project code into the web container.</li> <li><code>--nodejs-version</code>: Specify the Node.js version to use if you don\u2019t want the default version.</li> <li><code>--omit-containers</code>: Comma-delimited list of container types that should not be started when the project is started.</li> <li><code>--performance-mode</code>: Performance optimization mode, possible values are <code>global</code>, <code>none</code>, <code>mutagen</code>, <code>nfs</code>.</li> <li><code>--performance-mode-reset</code>: Reset performance mode to global configuration.</li> <li><code>--php-version</code>: PHP version that will be enabled in the web container.</li> <li><code>--project-name</code>: Provide the project name of project to configure. (normally the same as the last part of directory name)</li> <li><code>--project-tld</code>: Set the top-level domain to be used for projects. (default <code>\"ddev.site\"</code>)</li> <li><code>--project-type</code>: Provide the project type: <code>backdrop</code>, <code>drupal10</code>, <code>drupal6</code>, <code>drupal7</code>, <code>drupal8</code>, <code>drupal9</code>, <code>laravel</code>, <code>magento</code>, <code>magento2</code>, <code>php</code>, <code>shopware6</code>, <code>silverstripe</code>, <code>typo3</code>, <code>wordpress</code>. This is autodetected and this flag is necessary only to override the detection.</li> <li><code>--show-config-location</code>: Output the location of the <code>config.yaml</code> file if it exists, or error that it doesn\u2019t exist.</li> <li><code>--timezone</code>: Specify timezone for containers and PHP, like <code>Europe/London</code> or <code>America/Denver</code> or <code>GMT</code> or <code>UTC</code>.</li> <li><code>--upload-dirs</code>: Sets the project\u2019s upload directories, the destination directories of the import-files command.</li> <li><code>--use-dns-when-possible</code>: Use DNS for hostname resolution instead of <code>/etc/hosts</code> when possible. (default <code>true</code>)</li> <li><code>--web-environment</code>: Set the environment variables in the web container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--web-environment-add</code>: Append environment variables to the web container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--web-image</code>: Sets the web container image.</li> <li><code>--web-image-default</code>: Sets the default web container image for this DDEV version.</li> <li><code>--web-working-dir</code>: Overrides the default working directory for the web service.</li> <li><code>--web-working-dir-default</code>: Unsets a web service working directory override.</li> <li><code>--webimage-extra-packages</code>: A comma-delimited list of Debian packages that should be added to web container when the project is started.</li> <li><code>--webserver-type</code>: Sets the project\u2019s desired web server type: <code>nginx-fpm</code>, <code>nginx-gunicorn</code>, or <code>apache-fpm</code>.</li> <li><code>--working-dir-defaults</code>: Unsets all service working directory overrides.</li> <li><code>--xdebug-enabled</code>: Whether or not Xdebug is enabled in the web container.</li> </ul>"},{"location":"users/usage/commands/#config-global","title":"<code>config global</code>","text":"<p>Change global configuration.</p> <pre><code># Opt out of sharing anonymized usage information\nddev config global --instrumentation-opt-in=false\n\n# Skip the SSH agent for all projects\nddev config global --omit-containers=ddev-ssh-agent\n</code></pre> <ul> <li><code>--disable-http2</code>: Optionally disable http2 in <code>ddev-router</code>; <code>ddev config global --disable-http2</code> or <code>ddev config global --disable-http2=false</code>. This option is not available in the current Traefik-based <code>ddev-router</code>, but only in the deprecated <code>nginx-proxy</code> router.</li> <li><code>--fail-on-hook-fail</code>: If true, <code>ddev start</code> will fail when a hook fails.</li> <li><code>--instrumentation-opt-in</code>: <code>instrumentation-opt-in=true</code>.</li> <li><code>--internet-detection-timeout-ms</code>: Increase timeout when checking internet timeout, in milliseconds. (default <code>3000</code>)</li> <li><code>--letsencrypt-email</code>: Email associated with Let\u2019s Encrypt; <code>ddev global --letsencrypt-email=me@example.com</code>.</li> <li><code>--mailpit-http-port</code>: The Mailpit HTTP port default for all projects; can be overridden by project configuration.</li> <li><code>--mailpit-https-port</code>: The Mailpit HTTPS port default for all projects; can be overridden by project configuration.</li> <li><code>--no-bind-mounts</code>: If <code>true</code>, don\u2019t use bind-mounts. Useful for environments like remote Docker where bind-mounts are impossible. (default is equal to <code>--no-bind-mounts=true</code>)</li> <li><code>--omit-containers</code>: For example, <code>--omit-containers=ddev-ssh-agent</code>.</li> <li><code>--performance-mode</code>: Performance optimization mode, possible values are <code>none</code>, <code>mutagen</code>, <code>nfs</code>.</li> <li><code>--performance-mode-reset</code>: Reset performance optimization mode to operating system default (<code>none</code> for Linux and WSL2, <code>mutagen</code> for macOS and traditional Windows).</li> <li><code>--project-tld</code>: Set the default top-level domain to be used for all projects. (default <code>\"ddev.site\"</code>). Note that this will be overridden in a project that defines <code>project_tld</code>.</li> <li><code>--router-http-port</code>: The router HTTP port default for all projects; can be overridden by project configuration.</li> <li><code>--router-https-port</code>: The router HTTPS port default for all projects; can be overridden by project configuration.</li> <li><code>--simple-formatting</code>: If <code>true</code>, use simple formatting and no color for tables.</li> <li><code>--table-style</code>: Table style for list and describe, see <code>~/.ddev/global_config.yaml</code> for values.</li> <li><code>--traefik-monitor-port</code>: Can be used to change the Traefik monitor port in case of port conflicts, for example <code>ddev config global --traefik-monitor-port=11999</code>.</li> <li><code>--use-hardened-images</code>: If <code>true</code>, use more secure \u2018hardened\u2019 images for an actual internet deployment.</li> <li><code>--use-letsencrypt</code>: Enables experimental Let\u2019s Encrypt integration; <code>ddev global --use-letsencrypt</code> or <code>ddev global --use-letsencrypt=false</code>.</li> <li><code>--web-environment</code>: Set the environment variables in the web container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> <li><code>--web-environment-add</code>: Append environment variables to the web container: <code>--web-environment=\"TYPO3_CONTEXT=Development,SOMEENV=someval\"</code></li> </ul>"},{"location":"users/usage/commands/#craft","title":"<code>craft</code>","text":"<p>Run a Craft CMS command inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Run pending Craft migrations and apply pending project config changes\nddev craft up\n</code></pre>"},{"location":"users/usage/commands/#dbeaver","title":"<code>dbeaver</code>","text":"<p>Open DBeaver with the current project\u2019s database (global shell host container command). This command is only available if <code>DBeaver.app</code> is installed as <code>/Applications/DBeaver.app</code> for macOS, and if <code>dbeaver</code> (or another binary like <code>dbeaver-ce</code>) available inside <code>/usr/bin</code> for Linux (Flatpak and snap support included).</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in DBeaver\nddev dbeaver\n</code></pre>"},{"location":"users/usage/commands/#debug","title":"<code>debug</code>","text":"<p>Aliases: <code>d</code>, <code>dbg</code>.</p> <p>A collection of debugging commands, often useful for troubleshooting.</p>"},{"location":"users/usage/commands/#debug-capabilities","title":"<code>debug capabilities</code>","text":"<p>Show capabilities of this version of DDEV.</p> <p>Example:</p> <pre><code># List capabilities of the current project\nddev debug capabilities\n\n# List capabilities of `my-project`\nddev debug capabilities my-project\n</code></pre>"},{"location":"users/usage/commands/#debug-check-db-match","title":"<code>debug check-db-match</code>","text":"<p>Verify that the database in the db server matches the configured type and version.</p> <p>Example:</p> <pre><code># Check whether project\u2019s running database matches configuration\nddev debug check-db-match\n</code></pre>"},{"location":"users/usage/commands/#debug-compose-config","title":"<code>debug compose-config</code>","text":"<p>Prints the current project\u2019s docker-compose configuration.</p> <p>Example:</p> <pre><code># Print docker-compose config for the current project\nddev debug compose-config\n\n# Print docker-compose config for `my-project`\nddev debug compose-config my-project\n</code></pre>"},{"location":"users/usage/commands/#debug-configyaml","title":"<code>debug configyaml</code>","text":"<p>Prints the project <code>config.*.yaml</code> usage.</p> <p>Example:</p> <pre><code># Print config for the current project\nddev debug configyaml\n\n# Print config specifically for `my-project`\nddev debug configyaml my-project\n</code></pre>"},{"location":"users/usage/commands/#debug-dockercheck","title":"<code>debug dockercheck</code>","text":"<p>Diagnose DDEV Docker/Colima setup.</p> <p>Example:</p> <pre><code># Output contextual details for the Docker provider\nddev debug dockercheck\n</code></pre>"},{"location":"users/usage/commands/#debug-download-images","title":"<code>debug download-images</code>","text":"<p>Download the basic Docker images required by DDEV. This can be useful on a new machine to prevent <code>ddev start</code> or other commands having to download the various images.</p> <p>Example:</p> <pre><code># Download DDEV\u2019s basic Docker images\nddev debug download-images\n</code></pre>"},{"location":"users/usage/commands/#debug-fix-commands","title":"<code>debug fix-commands</code>","text":"<p>Refreshes custom command definitions without running <code>ddev start</code>.</p> <p>Example:</p> <pre><code># Refresh the current project\u2019s custom commands\nddev debug fix-commands\n</code></pre>"},{"location":"users/usage/commands/#debug-get-volume-db-version","title":"<code>debug get-volume-db-version</code>","text":"<p>Get the database type and version found in the <code>ddev-dbserver</code> database volume, which may not be the same as the configured database type and version.</p> <p>Example:</p> <pre><code># Print the database volume\u2019s engine and version\nddev debug get-volume-db-version\n</code></pre>"},{"location":"users/usage/commands/#debug-migrate-database","title":"<code>debug migrate-database</code>","text":"<p>Migrate a MySQL or MariaDB database to a different <code>dbtype:dbversion</code>. Works only with MySQL and MariaDB, not with PostgreSQL.</p> <p>Example:</p> <pre><code># Migrate the current project\u2019s database to MariaDB 10.7\nddev debug migrate-database mariadb:10.7\n</code></pre>"},{"location":"users/usage/commands/#debug-mutagen","title":"<code>debug mutagen</code>","text":"<p>Allows access to any Mutagen command.</p> <p>Example:</p> <pre><code># Run Mutagen\u2019s `sync list` command\nddev debug mutagen sync list\n</code></pre>"},{"location":"users/usage/commands/#debug-nfsmount","title":"<code>debug nfsmount</code>","text":"<p>Checks to see if NFS mounting works for current project.</p> <p>Example:</p> <pre><code># See if NFS is working as expected for the current project\nddev debug nfsmount\n</code></pre>"},{"location":"users/usage/commands/#debug-refresh","title":"<code>debug refresh</code>","text":"<p>Refreshes the project\u2019s Docker cache.</p> <p>Example:</p> <pre><code># Refresh the current project\u2019s Docker cache\nddev debug refresh\n</code></pre>"},{"location":"users/usage/commands/#debug-router-nginx-config","title":"<code>debug router-nginx-config</code>","text":"<p>Prints the router\u2019s nginx config.</p> <p>Example:</p> <pre><code># Output router nginx configuration\nddev debug router-nginx-config\n</code></pre>"},{"location":"users/usage/commands/#debug-test","title":"<code>debug test</code>","text":"<p>Run diagnostics using the embedded test script.</p> <p>Example:</p> <pre><code># Run DDEV\u2019s diagnostic suite\nddev debug test\n</code></pre>"},{"location":"users/usage/commands/#debug-testcleanup","title":"<code>debug testcleanup</code>","text":"<p>Removes all diagnostic projects created with <code>ddev debug test</code>.</p> <p>Example:</p> <pre><code># Remove all DDEV\u2019s diagnostic projects\nddev debug testcleanup\n</code></pre>"},{"location":"users/usage/commands/#delete","title":"<code>delete</code>","text":"<p>Remove all information, including the database, for an existing project.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Delete all projects.</li> <li><code>--clean-containers</code>: Clean up all DDEV Docker containers not required by this version of DDEV. (default <code>true</code>)</li> <li><code>--omit-snapshot</code>, <code>-O</code>: Omit/skip database snapshot.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Delete my-project and my-other-project\nddev delete my-project my-other-project\n\n# Delete the current project without taking a snapshot or confirming\nddev delete --omit-snapshot --yes\n</code></pre>"},{"location":"users/usage/commands/#delete-images","title":"<code>delete images</code>","text":"<p>With <code>--all</code>, it deletes all <code>ddev/ddev-*</code> Docker images.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: If set, deletes all Docker images created by DDEV.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Delete images\nddev delete images\n\n# Delete images and skip confirmation\nddev delete images -y\n\n# Delete all DDEV-created images\nddev delete images --all\n</code></pre>"},{"location":"users/usage/commands/#describe","title":"<code>describe</code>","text":"<p>Aliases: <code>status</code>, <code>st</code>, <code>desc</code>.</p> <p>Get a detailed description of a running DDEV project.</p> <p>Example:</p> <pre><code># Display details for the current project\nddev describe\n\n# Display details for my-project\nddev describe my-project\n</code></pre>"},{"location":"users/usage/commands/#drush","title":"<code>drush</code>","text":"<p>Run the <code>drush</code> command; available only in projects of type <code>drupal*</code>, and only available if <code>drush</code> is in the project. On projects of type <code>drupal8</code> and higher, <code>drush</code> should be installed in the project itself, (<code>ddev composer require drush/drush</code>). On projects of type <code>drupal7</code> <code>drush</code> 8 is provided by DDEV.</p> <pre><code># Show drush status/configuration\nddev drush st\n</code></pre>"},{"location":"users/usage/commands/#exec","title":"<code>exec</code>","text":"<p>Alias: <code>.</code>.</p> <p>Execute a shell command in the container for a service. Uses the web service by default.</p> <p>To run your command in a different service container, run <code>ddev exec --service &lt;service&gt; &lt;cmd&gt;</code>. Use the <code>--raw</code> flag if you\u2019d like to run a raw, uninterpreted command in a container.</p> <p>Flags:</p> <ul> <li><code>--dir</code>, <code>-d</code>: Defines the execution directory within the container.</li> <li><code>--raw</code>: Use raw exec (do not interpret with Bash inside container). (default <code>true</code>)</li> <li><code>--service</code>, <code>-s</code>: Defines the service to connect to. (e.g. <code>web</code>, <code>db</code>) (default <code>\"web\"</code>)</li> </ul> <p>Example:</p> <pre><code># List the web container\u2019s docroot contents\nddev exec ls /var/www/html\n\n# List the web container\u2019s vendor directory contents\nddev exec --dir /var/www/html/vendor ls\n\n# Output a long, recursive list of the files in the web container\nddev exec --raw -- ls -lR\n</code></pre>"},{"location":"users/usage/commands/#export-db","title":"<code>export-db</code>","text":"<p>Dump a database to a file or to stdout.</p> <p>Flags:</p> <ul> <li><code>--bzip2</code>: Use bzip2 compression.</li> <li><code>--database</code>, <code>-d</code>: Target database to export from (default <code>\"db\"</code>)</li> <li><code>--file</code>, <code>-f</code>: Path to a SQL dump file to export to</li> <li><code>--gzip</code>: Use gzip compression (default <code>true</code>)</li> <li><code>--xz</code>: Use xz compression.</li> </ul> <p>Example:</p> <pre><code># Dump and compress the current project\u2019s database to `/tmp/db.sql.gz`\nddev export-db --file=/tmp/db.sql.gz\n\n# Dump the current project\u2019s database, without compressing it, to `/tmp/db.sql`\nddev export-db --gzip=false --file /tmp/db.sql\n\n# Dump and compress the current project\u2019s `foo` database instead of `db`\nddev export-db --database=foo --file=/tmp/db.sql.gz\n\n# Output the current project\u2019s database and use `&gt;` to write to `/tmp/db.sql.gz`\nddev export-db &gt; /tmp/db.sql.gz\n\n# Dump my-project\u2019s database, without compressing it, to `/tmp/my-project.sql`\nddev export-db my-project --gzip=false --file=/tmp/my-project.sql\n</code></pre>"},{"location":"users/usage/commands/#get","title":"<code>get</code>","text":"<p>Download an add-on (service, provider, etc.).</p> <p>Flags:</p> <ul> <li><code>--all</code>: List unofficial and official add-ons. (default <code>true</code>)</li> <li><code>--list</code>: List official add-ons. (default <code>true</code>)</li> <li><code>--installed</code>: List installed add-ons</li> <li><code>--remove &lt;add-on&gt;</code>: Remove an installed add-on</li> <li><code>--version &lt;version&gt;</code>: Specify a version to download</li> <li><code>--verbose</code>, <code>-v</code>: Output verbose error information with Bash <code>set -x</code> (default <code>false</code>)</li> </ul> <p>Environment variables:</p> <ul> <li><code>DDEV_GITHUB_TOKEN</code>: A GitHub token may be used for <code>ddev get</code> requests (which result in GitHub API queries). It\u2019s unusual for casual users to need this, but if you\u2019re doing lots of <code>ddev get</code> requests you may run into rate limiting. The token you use requires no privileges at all. Example:</li> </ul> <pre><code>export DDEV_GITHUB_TOKEN=&lt;your github token&gt;\nddev get --list --all\n</code></pre> <p>Example:</p> <pre><code># List official add-ons\nddev get --list\n\n# List official and third-party add-ons\nddev get --list --all\n\n# Download the official Redis add-on\nddev get ddev/ddev-redis\n\n# Get debug info about `ddev get` failure\nddev get ddev/ddev-redis --verbose\n\n# Download the official Redis add-on, version v1.0.4\nddev get ddev/ddev-redis --version v1.0.4\n\n# Download the Drupal 9 Solr add-on from its v0.0.5 release tarball\nddev get https://github.com/ddev/ddev-drupal9-solr/archive/refs/tags/v0.0.5.tar.gz\n\n# Copy an add-on available in another directory\nddev get /path/to/package\n\n# Copy an add-on from a tarball in another directory\nddev get /path/to/tarball.tar.gz\n\n# View installed add-ons\nddev get --installed\n\n# Remove an add-on can be done with the full name, the short name of repo\n# or with owner/repo format\nddev get --remove redis\nddev get --remove ddev-redis\nddev get --remove ddev/ddev-redis\n</code></pre> <p>In general, you can run <code>ddev get</code> multiple times without doing any damage. Updating an add-on can be done by running <code>ddev get &lt;add-on-name&gt;</code>. If you have changed an add-on file and removed the <code>#ddev-generated</code> marker in the file, that file will not be touched and DDEV will let you know about it.</p>"},{"location":"users/usage/commands/#heidisql","title":"<code>heidisql</code>","text":"<p>Open HeidiSQL with the current project\u2019s database (global shell host container command). This command is only available if <code>TablePlus.app</code> is installed as <code>C:\\Program Files\\HeidiSQL\\Heidisql.exe</code>.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in HeidiSQL\nddev heidisql\n</code></pre>"},{"location":"users/usage/commands/#help","title":"<code>help</code>","text":"<p>Help about any command.</p> <p>Example:</p> <pre><code># Illuminate the virtues of the `describe` command\nddev help describe\n</code></pre>"},{"location":"users/usage/commands/#hostname","title":"<code>hostname</code>","text":"<p>Manage your hostfile entries.</p> <p>Flags:</p> <ul> <li><code>--remove</code>, <code>-r</code>: Remove the provided hostname - ip correlation.</li> <li><code>--remove-inactive</code>, <code>-R</code>: Remove hostnames of inactive projects.</li> </ul> <p>Example:</p> <pre><code>ddev hostname somesite.ddev.local 127.0.0.1\n</code></pre>"},{"location":"users/usage/commands/#import-db","title":"<code>import-db</code>","text":"<p>Import a SQL file into the project.</p> <p>Flags:</p> <ul> <li><code>--database</code>, <code>-d</code>: Target database to import into (default <code>\"db\"</code>)</li> <li><code>--extract-path</code>: Path to extract within the archive</li> <li><code>--file</code>, <code>-f</code>: Path to a SQL dump in <code>.sql</code>, <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.bz2</code>, <code>.tar.xz</code>, <code>.tgz</code>, or <code>.zip</code> format</li> <li><code>--no-drop</code>: Do not drop the database before importing</li> <li><code>--no-progress</code>: Do not output progress</li> </ul> <p>Example:</p> <pre><code># Start the interactive import utility\nddev import-db\n\n# Import the `.tarballs/db.sql` dump to the project database\nddev import-db --file=.tarballs/db.sql\n\n# Import the compressed `.tarballs/db.sql.gz` dump to the project database\nddev import-db --file=.tarballs/db.sql.gz\n\n# Import the compressed `.tarballs/db.sql.gz` dump to a `other_db` database\nddev import-db --database=additional_db --file=.tarballs/db.sql.gz\n\n# Import the `db.sql` dump to the project database\nddev import-db &lt; db.sql\n\n# Import the `db.sql` dump to the `my-project` default database\nddev import-db my-project &lt; db.sql\n\n# Uncompress `db.sql.gz` and pipe the result to the `import-db` command\ngzip -dc db.sql.gz | ddev import-db\n</code></pre>"},{"location":"users/usage/commands/#import-files","title":"<code>import-files</code>","text":"<p>Pull the uploaded files directory of an existing project to the default public upload directory of your project. More usage information and a description of the Tar or ZIP archive is in the usage section.</p> <p>Flags:</p> <ul> <li><code>--extract-path</code>: Path to extract within the archive.</li> <li><code>--source</code>, <code>-s</code>: Path to the source directory or source archive in <code>.tar</code>, <code>.tar.gz</code>, <code>.tar.bz2</code>, <code>.tar.xz</code>, <code>.tgz</code>, or <code>.zip</code> format.</li> <li><code>--target</code>, <code>-t</code>: Target upload dir, defaults to the first upload dir.</li> </ul> <p>Example:</p> <pre><code># Extract+import `/path/to/files.tar.gz` to the project\u2019s first upload directory\nddev import-files --source=/path/to/files.tar.gz\n\n# Import `/path/to/dir` contents to the project\u2019s first upload directory\nddev import-files --source=/path/to/dir\n\n# Import `.tarballs/files.tar.xz` contents to the project\u2019s `../private` upload directory\nddev import-files --source=.tarballs/files.tar.xz --target=../private\n\n# Import `/path/to/dir` contents to the project\u2019s `sites/default/files` upload directory\nddev import-files -s=.tarballs/files.tar.gz -t=sites/default/files\n</code></pre>"},{"location":"users/usage/commands/#launch","title":"<code>launch</code>","text":"<p>Launch a browser with the current site (global shell host container command).</p> <p>Flags:</p> <ul> <li><code>--mailpit</code>, <code>-m</code>: Open Mailpit.</li> </ul> <p>Example:</p> <pre><code># Open your project\u2019s base URL in the default browser\nddev launch\n\n# Open Mailpit in the default browser\nddev launch --mailpit\n\n# Open your project\u2019s base URL appended with `temp/phpinfo.php`\nddev launch temp/phpinfo.php\n</code></pre>"},{"location":"users/usage/commands/#list","title":"<code>list</code>","text":"<p>Aliases: <code>l</code>, <code>ls</code>.</p> <p>List projects.</p> <p>Flags:</p> <ul> <li><code>--active-only</code>, <code>-A</code>: If set, only currently active projects will be displayed.</li> <li><code>--continuous</code>: If set, project information will be emitted until the command is stopped.</li> <li><code>--continuous-sleep-interval</code>, <code>-I</code>: Time in seconds between <code>ddev list --continuous</code> output lists. (default <code>1</code>)</li> <li><code>--type</code>, <code>-t</code>: Show only projects of this type (e.g. <code>drupal8</code>, <code>wordpress</code>, <code>php</code>).</li> <li><code>--wrap-table</code>, <code>-W</code>: Display table with wrapped text if required.</li> </ul> <p>Example:</p> <pre><code># List all projects\nddev list\n\n# List all running projects\nddev list --active-only\n\n# List all WordPress projects\nddev list --type wordpress\n</code></pre>"},{"location":"users/usage/commands/#logs","title":"<code>logs</code>","text":"<p>Get the logs from your running services.</p> <p>Flags:</p> <ul> <li><code>--follow</code>, <code>-f</code>: Follow the logs in real time.</li> <li><code>--service</code>, <code>-s</code>: Defines the service to retrieve logs from (e.g. <code>web</code>, <code>db</code>). (default <code>\"web\"</code>)</li> <li><code>--tail</code>: How many lines to show.</li> <li><code>--time</code>, <code>-t</code>: Add timestamps to logs.</li> </ul> <p>Example:</p> <pre><code># Display recent logs from the current project\u2019s web server\nddev logs\n\n# Stream logs from the current project\u2019s web server in real time\nddev logs -f\n\n# Display recent logs from the current project\u2019s database server\nddev logs -s db\n\n# Display recent logs from my-project\u2019s database server\nddev logs -s db my-project\n</code></pre>"},{"location":"users/usage/commands/#mailpit","title":"<code>mailpit</code>","text":"<p>Launch a browser with mailpit for the current project (global shell host container command).</p> <p>Example:</p> <pre><code># Open Mailpit in the default browser\nddev mailpit\n</code></pre>"},{"location":"users/usage/commands/#magento","title":"<code>magento</code>","text":"<p>Run the <code>magento</code> command; available only in projects of type <code>magento2</code>, and only works if <code>bin/magento</code> is in the project.</p> <pre><code># Show all magento subcommands\nddev magento list\n</code></pre>"},{"location":"users/usage/commands/#mutagen","title":"<code>mutagen</code>","text":"<p>Commands for Mutagen status and sync, etc.</p>"},{"location":"users/usage/commands/#mutagen-logs","title":"<code>mutagen logs</code>","text":"<p>Show Mutagen logs for debugging.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>: Show full Mutagen logs.</li> </ul> <p>Example:</p> <pre><code># Stream Mutagen\u2019s logs in real time\nddev mutagen logs\n\n# Stream Mutagen\u2019s more detailed logs in real time\nddev mutagen logs --verbose\n</code></pre>"},{"location":"users/usage/commands/#mutagen-monitor","title":"<code>mutagen monitor</code>","text":"<p>Monitor Mutagen status.</p> <p>Example:</p> <pre><code># Start Mutagen\u2019s sync process and monitor its status in real time\nddev mutagen sync &amp;&amp; ddev mutagen monitor\n</code></pre>"},{"location":"users/usage/commands/#mutagen-reset","title":"<code>mutagen reset</code>","text":"<p>Stops a project and removes the Mutagen Docker volume.</p> <pre><code># Reset Mutagen data for the current project\nddev mutagen reset\n\n# Reset Mutagen data for my-project\nddev mutagen reset my-project\n</code></pre>"},{"location":"users/usage/commands/#mutagen-status","title":"<code>mutagen status</code>","text":"<p>Shows Mutagen sync status.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>, <code>-l</code>: Extended/verbose output for Mutagen status.</li> </ul> <p>Example:</p> <pre><code># Display Mutagen sync status for the current project\nddev mutagen status\n\n# Display Mutagen sync status for my-project\nddev mutagen status my-project\n</code></pre>"},{"location":"users/usage/commands/#mutagen-sync","title":"<code>mutagen sync</code>","text":"<p>Explicit sync for Mutagen.</p> <p>Flags:</p> <ul> <li><code>--verbose</code>: Extended/verbose output for Mutagen status.</li> </ul> <p>Example:</p> <pre><code># Initiate Mutagen sync for the current project\nddev mutagen sync\n\n# Initiate Mutagen sync for my-project\nddev mutagen sync my-project\n</code></pre>"},{"location":"users/usage/commands/#mysql","title":"<code>mysql</code>","text":"<p>Run MySQL client in the database container (global shell db container command). This is only available on projects that use the <code>mysql</code> or <code>mariadb</code> database types.</p> <p>Example:</p> <pre><code># Run the database container\u2019s MySQL client\nddev mysql\n\n# Run the database container\u2019s MySQL client as root user\nddev mysql -uroot -proot\n\n# Pipe the `SHOW TABLES;` command to the MySQL client to see a list of tables\necho 'SHOW TABLES;' | ddev mysql\n</code></pre>"},{"location":"users/usage/commands/#npm","title":"<code>npm</code>","text":"<p>Run <code>npm</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Install JavaScript packages using `npm`\nddev npm install\n\n# Update JavaScript packages using `npm`\nddev npm update\n</code></pre>"},{"location":"users/usage/commands/#nvm","title":"<code>nvm</code>","text":"<p>Run <code>nvm</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Use `nvm` to switch to Node.js v18\nddev nvm install 18\n</code></pre>"},{"location":"users/usage/commands/#php","title":"<code>php</code>","text":"<p>Run <code>php</code> inside the web container (global shell web container command).</p> <p>Example:</p> <pre><code># Output the web container\u2019s PHP version\nddev php --version\n</code></pre>"},{"location":"users/usage/commands/#poweroff","title":"<code>poweroff</code>","text":"<p>Alias: <code>powerdown</code>.</p> <p>Completely stop all projects and containers.</p> <p>Tip</p> <p>This is the equivalent of running <code>ddev stop -a --stop-ssh-agent</code>.</p> <p>Example:</p> <pre><code># Stop all projects and containers\nddev poweroff\n</code></pre>"},{"location":"users/usage/commands/#psql","title":"<code>psql</code>","text":"<p>Run PostgreSQL client in the database container (global shell db container command). This is only available on projects that use the <code>postgres</code> database type.</p> <p>Example:</p> <pre><code># List available databases\nddev psql -l\n\n# List tables in the default 'db' database\necho \"\\dt;\" | ddev psql\n</code></pre>"},{"location":"users/usage/commands/#pull","title":"<code>pull</code>","text":"<p>Pull files and database using a configured provider plugin.</p> <p>Flags:</p> <ul> <li><code>--environment=ENV1=val1,ENV2=val2</code></li> <li><code>--skip-confirmation</code>, <code>-y</code>: Skip confirmation step.</li> <li><code>--skip-db</code>: Skip pulling database archive.</li> <li><code>--skip-files</code>: Skip pulling file archive.</li> <li><code>--skip-import</code>: Download archive(s) without importing than.</li> </ul> <p>Example:</p> <pre><code># Pull a backup from the configured Pantheon project to use locally\nddev pull pantheon\n\n# Pull a backup from the configured Platform.sh project to use locally\nddev pull platform\n\n# Pull a backup from the configured Pantheon project without confirming\nddev pull pantheon -y\n\n# Pull the Platform.sh database archive *only* without confirming\nddev pull platform --skip-files -y\n\n# Pull the localfile integration\u2019s files *only* without confirming\nddev pull localfile --skip-db -y\n\n# Pull from Platform.sh specifying the environment variables PLATFORM_ENVIRONMENT and PLATFORM_CLI_TOKEN on the command line\nddev pull platform --environment=PLATFORM_ENVIRONMENT=main,PLATFORMSH_CLI_TOKEN=abcdef\n</code></pre>"},{"location":"users/usage/commands/#push","title":"<code>push</code>","text":"<p>Push files and database using a configured provider plugin.</p> <p>Example:</p> <pre><code># Push local files and database to the configured Pantheon project\nddev push pantheon\n\n# Push local files and database to the configured Platform.sh project\nddev push platform\n\n# Push files and database to Pantheon without confirming\nddev push pantheon -y\n\n# Push database only to Platform.sh without confirming\nddev push platform --skip-files -y\n\n# Push files only to Acquia without confirming\nddev push acquia --skip-db -y\n</code></pre>"},{"location":"users/usage/commands/#python","title":"<code>python</code>","text":"<p>Runs <code>python</code> inside the web container in the same relative directory you\u2019re in on the host.</p> <p><code>ddev python</code> is only available on Python-based project types like Django and Python.</p> <p>Example:</p> <pre><code># Run manage.py\nddev python manage.py migrate\n</code></pre>"},{"location":"users/usage/commands/#querious","title":"<code>querious</code>","text":"<p>Open Querious with the current project\u2019s MariaDB or MySQL database (global shell host container command). This is only available if <code>Querious.app</code> is installed as <code>/Applications/Querious.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in Querious\nddev querious\n</code></pre>"},{"location":"users/usage/commands/#restart","title":"<code>restart</code>","text":"<p>Restart one or several projects.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Restart all projects.</li> </ul> <p>Example:</p> <pre><code># Restart the current project\nddev restart\n\n# Restart my-project and my-other-project\nddev restart my-project my-other-project\n\n# Restart all projects\nddev restart --all\n</code></pre>"},{"location":"users/usage/commands/#sake","title":"<code>sake</code>","text":"<p>Run the <code>sake</code> command, only available for Silverstripe projects and if the Silverstripe <code>sake</code> command is available in the <code>vendor/bin</code> folder.</p> <p>Common commands:</p> <ul> <li>Build database: <code>ddev sake dev/build</code></li> <li>List of available tasks: <code>ddev sake dev/tasks</code></li> </ul>"},{"location":"users/usage/commands/#self-upgrade","title":"<code>self-upgrade</code>","text":"<p>Output instructions for updating or upgrading DDEV. The command doesn\u2019t perform the upgrade, but tries to provide instructions relevant to your installation. Must be executed from the project context.</p> <p>Example:</p> <pre><code>\u2192  ddev self-upgrade\n\nDDEV appears to have been installed with install_ddev.sh, you can run that script again to update.\ncurl -fsSL https://ddev.com/install.sh | bash\n</code></pre>"},{"location":"users/usage/commands/#sequelace","title":"<code>sequelace</code>","text":"<p>Open SequelAce with the current project\u2019s database (global shell host container command). This command is only available if <code>Sequel Ace.app</code> is installed as <code>/Applications/Sequel ace.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in SequelAce\nddev sequelace\n</code></pre>"},{"location":"users/usage/commands/#sequelpro","title":"<code>sequelpro</code>","text":"<p>Sequel Pro is abandoned!</p> <p>The project is abandoned and doesn\u2019t work with MySQL 8. We recommend Sequel Ace, Querious, TablePlus, and DBeaver.</p> <p>Open Sequel Pro with the current project\u2019s database (global shell host container command). This command is only available if <code>Sequel Pro.app</code> is installed as <code>/Applications/Sequel pro.app</code>, and only for projects with <code>mysql</code> or <code>mariadb</code> databases.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in Sequel Pro\nddev sequelpro\n</code></pre>"},{"location":"users/usage/commands/#service","title":"<code>service</code>","text":"<p>Add or remove, enable or disable extra services.</p>"},{"location":"users/usage/commands/#service-disable","title":"<code>service disable</code>","text":"<p>Disable a service.</p> <p>Example:</p> <pre><code># Disable the Solr service\nddev service disable solr\n</code></pre>"},{"location":"users/usage/commands/#service-enable","title":"<code>service enable</code>","text":"<p>Enable a service.</p> <p>Example:</p> <pre><code># Enable the Solr service\nddev service enable solr\n</code></pre>"},{"location":"users/usage/commands/#share","title":"<code>share</code>","text":"<p>Share the current project on the internet via ngrok.</p> <p>Tip</p> <p>Any ngrok flag can also be specified in the <code>ngrok_args</code> config setting.</p> <p>Flags:</p> <ul> <li><code>--ngrok-args</code>: Accepts any flag from <code>ngrok http --help</code>.</li> </ul> <p>Example:</p> <pre><code># Share the current project with ngrok\nddev share\n\n# Share the current project with ngrok, using domain `foo.ngrok-free.app`\nddev share --ngrok-args \"--domain foo.ngrok-free.app\"\n\n# Share the current project using ngrok\u2019s basic-auth argument\nddev share --ngrok-args \"--basic-auth username:pass1234\"\n\n# Share my-project with ngrok\nddev share my-project\n</code></pre>"},{"location":"users/usage/commands/#snapshot","title":"<code>snapshot</code>","text":"<p>Create a database snapshot for one or more projects.</p> <p>This uses <code>xtrabackup</code> or <code>mariabackup</code> to create a database snapshot in the <code>.ddev/db_snapshots</code> directory. These are compatible with server backups using the same tools and can be restored with the <code>snapshot restore</code> command.</p> <p>See Snapshotting and Restoring a Database for more detail, or Database Management for more on working with databases in general.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Snapshot all projects. (Will start stopped or paused projects.)</li> <li><code>--cleanup</code>, <code>-C</code>: Cleanup snapshots.</li> <li><code>--list</code>, <code>-l</code>: List snapshots.</li> <li><code>--name</code>, <code>-n</code>: Provide a name for the snapshot.</li> <li><code>--yes</code>, <code>-y</code>: Skip confirmation prompt.</li> </ul> <p>Example:</p> <pre><code># Take a database snapshot for the current project\nddev snapshot\n\n# Take a database snapshot for the current project, named `my_snapshot_name`\nddev snapshot --name my_snapshot_name\n\n# Take a snapshot for the current project, cleaning up existing snapshots\nddev snapshot --cleanup\n\n# Take a snapshot for the current project, cleaning existing snapshots and skipping prompt\nddev snapshot --cleanup -y\n\n# List the current project\u2019s snapshots\nddev snapshot --list\n\n# Take a snapshot for each project\nddev snapshot --all\n</code></pre>"},{"location":"users/usage/commands/#snapshot-restore","title":"<code>snapshot restore</code>","text":"<p>Restores a database snapshot from the <code>.ddev/db_snapshots</code> directory.</p> <p>Flags:</p> <ul> <li><code>--latest</code>: Use the latest snapshot.</li> </ul> <p>Example:</p> <pre><code># Restore the most recent snapshot\nddev snapshot restore --latest\n\n# Restore the previously-taken `my_snapshot_name` snapshot\nddev snapshot restore my_snapshot_name\n</code></pre>"},{"location":"users/usage/commands/#ssh","title":"<code>ssh</code>","text":"<p>Starts a shell session in a service container. Uses the web service by default.</p> <p>Flags:</p> <ul> <li><code>--dir</code>, <code>-d</code>: Defines the destination directory within the container.</li> <li><code>--service</code>, <code>-s</code>: Defines the service to connect to. (default <code>\"web\"</code>)</li> </ul> <p>Example:</p> <pre><code># SSH into the current project\u2019s web container\nddev ssh\n\n# SSH into the current project\u2019s database container\nddev ssh -s db\n\n# SSH into the web container for my-project\nddev ssh my-project\n\n# SSH into the docroot of the current project\u2019s web container\nddev ssh -d /var/www/html\n</code></pre>"},{"location":"users/usage/commands/#start","title":"<code>start</code>","text":"<p>Start a DDEV project.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Start all projects.</li> <li><code>--select</code>, <code>-s</code>: Interactively select a project to start.</li> <li><code>--skip-confirmation</code>, <code>-y</code>: Skip any confirmation steps.</li> </ul> <p>Example:</p> <pre><code># Start the current project\nddev start\n\n# Start my-project and my-other-project\nddev start my-project my-other-project\n\n# Start all projects\nddev start --all\n</code></pre>"},{"location":"users/usage/commands/#stop","title":"<code>stop</code>","text":"<p>Aliases: <code>rm</code>, <code>remove</code>.</p> <p>Stop and remove the containers of a project. Does not lose or harm anything unless you add <code>--remove-data</code>.</p> <p>Flags:</p> <ul> <li><code>--all</code>, <code>-a</code>: Stop and remove all running or container-stopped projects and remove from global projects list.</li> <li><code>--omit-snapshot</code>, <code>-O</code>: Omit/skip database snapshot.</li> <li><code>--remove-data</code>, <code>-R</code>: Remove stored project data (MySQL, logs, etc.).</li> <li><code>--select</code>, <code>-s</code>: Interactively select a project to stop.</li> <li><code>--snapshot</code>, <code>-S</code>: Create database snapshot.</li> <li><code>--stop-ssh-agent</code>: Stop the <code>ddev-ssh-agent</code> container.</li> <li><code>--unlist</code>, <code>-U</code>: Remove the project from global project list, so it won\u2019t appear in <code>ddev list</code> until started again.</li> </ul> <p>Example:</p> <pre><code># Stop the current project\nddev stop\n\n# Stop my-project, my-other-project, and my-third-project\nddev stop my-project my-other-project my-third-project\n\n# Stop all projects\nddev stop --all\n\n# Stop all projects and the `ddev-ssh-agent` container\nddev stop --all --stop-ssh-agent\n\n# Stop all projects and remove their data\nddev stop --remove-data\n</code></pre>"},{"location":"users/usage/commands/#tableplus","title":"<code>tableplus</code>","text":"<p>Open TablePlus with the current project\u2019s database (global shell host container command). This command is only available if <code>TablePlus.app</code> is installed as <code>/Applications/TablePlus.app</code>.</p> <p>Example:</p> <pre><code># Open the current project\u2019s database in TablePlus\nddev tableplus\n</code></pre>"},{"location":"users/usage/commands/#typo3","title":"<code>typo3</code>","text":"<p>Run the <code>typo3</code> command; available only in projects of type <code>typo3</code>, and only works if <code>typo3</code> is in the <code>$PATH</code> inside the container; normally it\u2019s in <code>vendor/bin/typo3</code> so will be found.</p> <pre><code># Show typo3 site configuration\nddev typo3 site:show\n</code></pre>"},{"location":"users/usage/commands/#version","title":"<code>version</code>","text":"<p>Print DDEV and component versions.</p> <p>Example:</p> <pre><code># Print DDEV and platform version details\nddev version\n</code></pre> <p>Tip</p> <p><code>ddev --version</code> is a more concise command that only outputs the DDEV version without component versions.</p>"},{"location":"users/usage/commands/#wp","title":"<code>wp</code>","text":"<p>Run the WP-CLI <code>wp</code> command; available only in projects of type <code>wordpress</code>.</p> <pre><code># Install WordPress site using `wp core install`\nddev wp core install --url='$DDEV_PRIMARY_URL' --title='New-WordPress' --admin_user=admin --admin_email=admin@example.com --prompt=admin_password\n</code></pre>"},{"location":"users/usage/commands/#xdebug","title":"<code>xdebug</code>","text":"<p>Enable or disable Xdebug (global shell web container command).</p> <ul> <li>The <code>on</code> argument is equivalent to <code>enable</code> and <code>true</code>.</li> <li>The <code>off</code> argument is equivalent to <code>disable</code> and <code>false</code>.</li> </ul> <pre><code># Display whether Xdebug is running\nddev xdebug status\n\n# Turn Xdebug on\nddev xdebug\n\n# Turn Xdebug on\nddev xdebug on\n\n# Turn Xdebug off\nddev xdebug off\n\n# Toggle Xdebug on and off\nddev xdebug toggle\n</code></pre>"},{"location":"users/usage/commands/#xhprof","title":"<code>xhprof</code>","text":"<p>Enable or disable Xhprof (global shell web container command).</p> <ul> <li>The <code>on</code> argument is equivalent to <code>enable</code> and <code>true</code>.</li> <li>The <code>off</code> argument is equivalent to <code>disable</code> and <code>false</code>.</li> </ul> <pre><code># Display whether Xhprof is running\nddev xhprof status\n\n# Turn Xhprof on\nddev xhprof\n\n# Turn Xhprof on\nddev xhprof on\n\n# Turn Xhprof off\nddev xhprof off\n</code></pre>"},{"location":"users/usage/commands/#yarn","title":"<code>yarn</code>","text":"<p>Run <code>yarn</code> commands inside the web container in the root of the project (global shell host container command).</p> <p>Tip</p> <p>Use <code>--cwd</code> for another directory.</p> <p>Example:</p> <pre><code># Use Yarn to install JavaScript packages\nddev yarn install\n\n# Use Yarn to add the Lerna package\nddev yarn add lerna\n\n# Use Yarn to add the Lerna package from the `web/core` directory\nddev yarn --cwd web/core add lerna\n</code></pre>"},{"location":"users/usage/database-management/","title":"Database Management","text":"<p>DDEV provides lots of flexibility for managing your databases between your local, staging and production environments. You may commonly use the <code>ddev import-db</code> and <code>ddev export-db</code> commands, but there are plenty of other adaptable ways to work with your databases.</p> <p>Tip</p> <p>You can run <code>ddev [command] --help</code> for more info on many of the topics below.</p>","boost":2},{"location":"users/usage/database-management/#database-imports","title":"Database Imports","text":"<p>Import a database with one command, from one of the following file formats: <code>.sql</code>, <code>.sql.gz</code>, <code>.mysql</code>, <code>.mysql.gz</code>, <code>.tar</code>, <code>.tar.gz</code>, and <code>.zip</code>.</p> <p>Here\u2019s an example of a database import using DDEV:</p> <pre><code>ddev import-db --file=dumpfile.sql.gz\n</code></pre> <p>You can also:</p> <ul> <li>Use <code>ddev mysql</code> or <code>ddev psql</code> or the <code>mysql</code> and <code>psql</code> commands inside the <code>web</code> and <code>db</code> containers.</li> <li>Use a database client or database GUI to import and browse data.</li> </ul>","boost":2},{"location":"users/usage/database-management/#database-backends-and-defaults","title":"Database Backends and Defaults","text":"<p>You can use a variety of different database types, including MariaDB (5.5\u201310.8), MySQL (5.5\u20138.0), and PostgreSQL (9\u201316). If you want to change database type, you need to export your database, run <code>ddev delete</code> to remove the project (and its existing database), change to a new database type, run <code>ddev start</code> again, and import your data.</p> <p>DDEV creates a default database named <code>db</code> and default permissions for the <code>db</code> user with password <code>db</code>, and it\u2019s on the (inside Docker) hostname <code>db</code>.</p>","boost":2},{"location":"users/usage/database-management/#extra-databases","title":"Extra Databases","text":"<p>You can easily create and populate additional databases. For example, <code>ddev import-db --database=backend --file=backend.sql.gz</code> will create the database named <code>backend</code> with permissions for that same <code>db</code> user and import from the <code>backend.sql.gz</code> dumpfile.</p> <p>You can export in the same way: <code>ddev export-db -f mysite.sql.gz</code> will export your default database (<code>db</code>). <code>ddev export-db --database=backend -f backend-export.sql.gz</code> will dump the database named <code>backend</code>.</p>","boost":2},{"location":"users/usage/database-management/#snapshots","title":"Snapshots","text":"<p>Snapshots let you easily save the entire status of all of your databases, which can be great when you\u2019re working incrementally on migrations or updates and want to save state so you can start right back where you were.</p> <p>Snapshots can be named for easier reference later on. For example, <code>ddev snapshot --name=two-dbs</code> would make a snapshot named <code>two-dbs</code> in the <code>.ddev/db_snapshots</code> directory. It includes the entire state of the db server, so in the case of our two databases above, both databases and the system level <code>mysql</code> or <code>postgres</code> database will all be snapshotted. Then if you want to delete everything with <code>ddev delete -O</code> (omitting the snapshot since we have one already), and then <code>ddev start</code> again, we can <code>ddev snapshot restore two-dbs</code> and we\u2019ll be right back where we were.</p> <p>Use the <code>ddev snapshot restore</code> command to interactively choose among snapshots, or append <code>--latest</code> to restore the most recent snapshot: <code>ddev snapshot restore --latest</code>.</p>","boost":2},{"location":"users/usage/database-management/#database-clients","title":"Database Clients","text":"<p>The <code>ddev mysql</code> and <code>ddev psql</code> commands give you direct access to the <code>mysql</code> and <code>psql</code> clients in the database container, which can be useful for quickly running commands while you work. You might run <code>ddev mysql</code> to use interactive commands like <code>DROP DATABASE backend;</code> or <code>SHOW TABLES;</code>, or do things like <code>echo \"SHOW TABLES;\" | ddev mysql</code> or <code>ddev mysql -uroot -proot</code> to get root privileges.</p> <p>The <code>web</code> and <code>db</code> containers are each ready with MySQL/PostgreSQL clients, so you can <code>ddev ssh</code> or <code>ddev ssh -s db</code> and use <code>mysql</code> or <code>psql</code>.</p>","boost":2},{"location":"users/usage/database-management/#mysqldump-and-pg_dump","title":"<code>mysqldump</code> and <code>pg_dump</code>","text":"<p>The <code>web</code> and <code>db</code> containers come with <code>mysqldump</code>. You could run <code>ddev ssh</code> to enter the web container, for example, then <code>mkdir /var/www/html/.tarballs</code> and run <code>mysqldump db &gt;/var/www/html/.tarballs/db.sql</code> or run <code>mysqldump db | gzip &gt;/var/www/html/.tarballs/db.sql.gz</code> to create database dumps. Because <code>/var/www/html</code> is mounted into the container from your project root, the <code>.tarballs</code> directory will also show up in the root of the project on your host machine.</p> <p>The PostgreSQL database container includes normal <code>pg</code> commands like <code>pg_dump</code>.</p>","boost":2},{"location":"users/usage/database-management/#database-guis","title":"Database GUIs","text":"<p>If you\u2019d like to use a GUI database client, you\u2019ll need the right connection details and there may even be a command to launch it for you:</p> <ul> <li>phpMyAdmin, formerly built into DDEV core, can be installed by running <code>ddev get ddev/ddev-phpmyadmin</code>.</li> <li>Adminer can be installed with <code>ddev get ddev/ddev-adminer</code></li> <li>The <code>ddev describe</code> command displays the <code>Host:</code> details you\u2019ll need to connect to the <code>db</code> container externally, for example if you\u2019re using an on-host database browser like SequelAce.</li> <li>macOS users can use <code>ddev sequelace</code> to launch the free Sequel Ace database browser, <code>ddev tableplus</code> to launch TablePlus, <code>ddev querious</code> to launch Querious, <code>ddev dbeaver</code> to launch DBeaver, and the obsolete Sequel Pro is also supported with <code>ddev sequelpro</code>. (Each must be installed for the command to exist.)</li> <li>Linux users can use <code>ddev dbeaver</code> to launch DBeaver. (Must be installed for the command to exist.)</li> <li>PhpStorm (and all JetBrains tools) have a nice database browser. (If you use the DDEV Integration plugin this is all done for you.)<ul> <li>Choose a static <code>host_db_port</code> setting for your project. For example <code>host_db_port: 59002</code> (each project\u2019s database port should be different if you\u2019re running more than one project at a time). Use <code>ddev start</code> for it to take effect.</li> <li>Use the \u201cdatabase\u201d tool to create a source from \u201clocalhost\u201d, with the proper type \u201cmysql\u201d or \u201cpostgresql\u201d and the port you chose, username <code>db</code> + password <code>db</code>.</li> <li>Explore away!</li> </ul> </li> <li>There\u2019s a sample custom command that will run the free MySQL Workbench on macOS, Windows or Linux. To use it, run:<ul> <li><code>cp ~/.ddev/commands/host/mysqlworkbench.example ~/.ddev/commands/host/mysqlworkbench</code></li> <li><code>ddev mysqlworkbench</code></li> </ul> </li> </ul>","boost":2},{"location":"users/usage/developer-tools/","title":"Built-in Developer Tools","text":"<p>Run <code>ddev describe</code> to see the project information and services available for your project and how to access them.</p>","boost":2},{"location":"users/usage/developer-tools/#command-line-tools-in-the-containers","title":"Command-line Tools in the Containers","text":"<p>Hundreds of useful developer tools are included inside the containers and can be used via <code>ddev exec</code> or <code>ddev ssh</code>. Some of those include:</p> <ul> <li>MySQL client (<code>mysql</code>) - Command-line interface for interacting with MySQL/MariaDB.</li> <li>PostgreSQL client (<code>psql</code>) - Command-line tool for PostgreSQL.</li> <li>Drush - Command-line shell and Unix scripting interface for Drupal.</li> <li>PHIVE - Command line tool for \u201cPHAR Installation and Verification Environment\u201d.</li> <li>WP-CLI - Command-line tools for managing WordPress installations, available both as <code>wp</code> and as <code>wp-cli</code>.</li> <li><code>npm</code>, <code>nvm</code>, and <code>yarn</code> (these also have <code>ddev</code> shortcuts like <code>ddev npm</code>, <code>ddev nvm</code>, <code>ddev yarn</code>).</li> <li><code>node</code></li> <li><code>sqlite3</code></li> </ul> <p>These tools can be accessed for single commands using <code>ddev exec &lt;command&gt;</code> or <code>ddev ssh</code> for an interactive <code>bash</code> or <code>sh</code> session.</p> <p>You can also add tools that are not provided by default using <code>webimage_extra_packages</code> or a custom Dockerfile.</p>","boost":2},{"location":"users/usage/developer-tools/#ddev-and-composer","title":"DDEV and Composer","text":"<p>DDEV provides a built-in command to simplify use of PHP\u2019s dependency manager, Composer, without requiring it to be installed on the host machine. Generally, executing any Composer command through DDEV is as simple as prepending the command with <code>ddev</code>. DDEV will execute the command at the project root in the web container, passing (almost) all arguments and flags to Composer. To execute Composer in other directories within the container, use <code>ddev ssh</code> or <code>ddev exec -d &lt;dir&gt;</code>. For example:</p> <ul> <li><code>ddev composer help</code> runs Composer\u2019s help command to learn more about what\u2019s available.</li> <li><code>ddev composer require &lt;package&gt;</code> tells Composer to require a specific PHP package for the current project.</li> </ul> <p>Additionally, Composer can be used to initialize new projects with <code>ddev composer create</code>. This command supports limited argument and flag options, and will install a new project to the composer root (normally <code>/var/www/html</code>). The package and version arguments are required:</p> <p><code>ddev composer create [&lt;flags&gt;] \"&lt;package&gt;:&lt;version&gt;\"</code></p> <p>For example:</p> <p><code>ddev composer create --no-dev \"typo3/cms-base-distribution:^9\"</code></p> <p>When using <code>ddev composer create</code> your project should be essentially empty or the command will refuse to run, to avoid loss of your files.</p> <p>To execute a fully-featured <code>composer create-project</code> command, you can execute the command from within the container after executing <code>ddev ssh</code>, or pass the full command to <code>ddev exec</code>, like so:</p> <p><code>ddev exec composer create-project ...</code></p> <p>DDEV uses Composer 2 by default. Use the <code>--composer-version</code> option to roll back to version 1: <code>ddev config --composer-version=1 &amp;&amp; ddev start</code>.</p> <p>composer.json Location: It\u2019s most common for <code>composer.json</code> to be in the project root, but you can specify an alternate Composer root using DDEV\u2019s <code>composer_root</code> option in <code>.ddev/config.yaml</code>, or <code>ddev config --composer-root &lt;dir&gt;</code>. The <code>composer_root</code> value is the relative path from the project root to the directory containing <code>composer.json</code>. If yours is at <code>docroot/composer.json</code>, for example, the <code>composer_root</code> value should be <code>docroot</code>.</p> <p>Careful with Global Requirements!</p> <p>If you run <code>ddev composer global require</code> (or <code>composer global require</code> inside the web container), global packages will be installed at the home directory within the container (<code>~/.composer</code>) and will disappear when the container restarts\u2014meaning you\u2019ll need to re-run the command.</p> <p>You may want to synchronize created Composer configuration and installed packages with the DDEV\u2019s <code>homeadditions</code> directory on your host machine.</p> <p></p>","boost":2},{"location":"users/usage/developer-tools/#windows-os-and-ddev-composer","title":"Windows OS and <code>ddev composer</code>","text":"<p>DDEV attempts to help with Composer and some configurations of Docker Desktop for Windows that introduce complex filesystem workarounds.</p> <p>Use <code>ddev composer</code> (Composer inside the container) instead of using <code>composer</code> on the host side, because it uses the right version of PHP and all its extensions for your project:</p> <ul> <li>On some older configurations of Docker Desktop for Windows, symlinks are created in the container as \u201csimulated symlinks\u201d, or XSym files. These special text files behave as symlinks inside the container (on CIFS filesystem), but appear as simple text files on the Windows host. (On the CIFS filesystem used by Docker for Windows, inside the container, there is no capability to create real symlinks even though Windows now has this capability.)</li> <li>DDEV attempts to clean up for this situation. Since Windows 10/11+ (in developer mode) can create real symlinks, DDEV scans your repository after a <code>ddev composer</code> command and attempts to convert XSym files into real symlinks. On older versions of Windows 10, it can only do this if your Windows 10 workstation is set to \u201cDeveloper Mode\u201d.</li> <li>To enable developer mode on Windows 10/11+, search for \u201cdeveloper\u201d in settings:      </li> </ul>","boost":2},{"location":"users/usage/developer-tools/#email-capture-and-review-mailpit","title":"Email Capture and Review (Mailpit)","text":"<p>Mailpit is a mail catcher that\u2019s configured to capture and display emails sent by PHP in the development environment.</p> <p>After your project is started, access the Mailpit web interface at <code>https://mysite.ddev.site:8026</code>, or run <code>ddev mailpit</code> to launch it in your default browser.</p> <p>Mailpit will not intercept emails if your application is configured to use SMTP or a third-party ESP integration.</p> <p>If you\u2019re using SMTP for outgoing mail\u2014with Symfony Mailer or SMTP modules, for example\u2014update your application\u2019s SMTP server configuration to use <code>localhost</code> and Mailpit\u2019s port <code>1025</code>.</p> <p>For Drupal 9+ <code>settings.ddev.php</code> overrides the Symfony Mailer sendmail configuration to use Mailpit.</p> <p>For Drupal 8/9 <code>settings.ddev.php</code> overrides the Swift Mailer transport configuration to use Mailpit.</p> <p>For Laravel projects, Mailpit will capture Swift messages via SMTP. Update your <code>.env</code> to use Mailpit with the following settings:</p> <pre><code>MAIL_MAILER=smtp\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n</code></pre>","boost":2},{"location":"users/usage/developer-tools/#using-development-tools-on-the-host-machine","title":"Using Development Tools on the Host Machine","text":"<p>It\u2019s possible in many cases to use development tools installed on your host machine on a project provisioned by DDEV. Tools that interact with files and require no database connection, such as Git or Composer, can be run from the host machine against the codebase for a DDEV project with no additional configuration necessary.</p>","boost":2},{"location":"users/usage/developer-tools/#database-connections-from-the-host","title":"Database Connections from the Host","text":"<p>If you need to connect to your project\u2019s database from your workstation, run <code>ddev describe</code> to show the database connection information, like <code>Host: localhost:49156</code>.</p> <p>Each project\u2019s database port is unique, and randomly chosen from available ports on your system when you run <code>ddev start</code>.</p> <p>You can force this port to be the same on every <code>ddev start</code> by setting <code>host_db_port</code> in the project\u2019s <code>.ddev/config.yaml</code>. For example, <code>host_db_port: \"49156\"</code> or <code>ddev config --host-db-port=49156</code>. This value needs to be different on each running DDEV project, and unless it is set, the database port will change on every <code>ddev start</code>.</p> <p>You can use this port with various tools that need a direct port, like <code>mysql</code> or <code>psql</code> clients, but it\u2019s usually easiest to use <code>ddev mysql</code>, <code>ddev psql</code>, <code>ddev sequelace</code>, <code>ddev tableplus</code>, etc, which set everything up for you.</p> <p>(If you use PhpStorm and its integrated database browser, use the DDEV Integration Plugin to manage all of this for you.)</p>","boost":2},{"location":"users/usage/developer-tools/#ddev-and-terminus","title":"DDEV and Terminus","text":"<p>Terminus is a command line tool providing advanced interaction with Pantheon services. <code>terminus</code> is available inside the project\u2019s container, allowing users to get information from, or issue commands to their Pantheon-hosted sites. This is an especially helpful feature for Windows users since Terminus is only officially supported on Unix-based systems.</p> <p>To use Terminus, you\u2019ll first need to:</p> <ol> <li>Use a machine token. (See Pantheon provider discussion.)</li> <li>Run <code>ddev ssh</code> to tunnel into your container.</li> <li>Issue a command using the keyword <code>terminus</code>. For help using Terminus, try <code>terminus list</code> to get a list of possible commands.</li> </ol> <p>Terminus also allows you to issue Drush, WP-CLI, and Composer commands to your Pantheon server. These are all usable from within the container as well, but will require authentication via either your Pantheon password or an SSH key. To use your host machine\u2019s SSH key, you can use the <code>ddev auth ssh</code> command described here.</p>","boost":2},{"location":"users/usage/diagnostics/","title":"Diagnostics","text":""},{"location":"users/usage/diagnostics/#opt-in-usage-information","title":"Opt-In Usage Information","text":"<p>When you start DDEV for the first time or install a new release, you\u2019ll be asked whether to send usage and error information to DDEV\u2019s developers.</p> <p>Regardless of your choice, you can change this at any time by editing <code>~/.ddev/global_config.yaml</code> and setting <code>instrumentation_opt_in: true</code> or <code>instrumentation_opt_in: false</code>.</p> <p>If you choose to share diagnostics, it helps us tremendously in our effort to improve the tool. Here\u2019s an example of what we might see:</p> <p></p> <p>If you have any reservations about this, please opt out (<code>ddev config global --instrumentation-opt-in=false</code>). If you have any issues or concerns with it, we\u2019d like to know.</p>"},{"location":"users/usage/faq/","title":"FAQ","text":"<p>Frequently-asked questions organized into high-level functionality, investigating issues, daily usage, and connecting with our community.</p>"},{"location":"users/usage/faq/#features-requirements","title":"Features &amp; Requirements","text":""},{"location":"users/usage/faq/#what-operating-systems-will-ddev-work-with","title":"What operating systems will DDEV work with?","text":"<p>DDEV works nearly anywhere Docker will run, including macOS, Windows 10/11 Pro/Enterprise and Home, and every Linux variant we\u2019ve ever tried. It also runs in many Linux-like environments, like ChromeOS (in Linux machine) and Windows 10/11\u2019s WSL2. DDEV works the same on each of these platforms since the important work is done inside identical Docker containers.</p>"},{"location":"users/usage/faq/#are-there-alternate-docker-providers-i-can-use","title":"Are there alternate Docker providers I can use?","text":"<p>Many users report good results with alternate Docker providers.</p> Docker Provider Support Level OrbStack (macOS) officially tested and supported on macOS Docker Desktop for Mac officially tested and supported on both Intel and Apple Silicon Docker Desktop for Windows officially tested and supported on WSL2 and traditional Windows Colima (macOS) officially tested and supported Colima (Linux) reported working in DDEV v1.22.2+, but poor solution compared to docker-ce docker-ce (Linux/WSL2) Officially supported with automated tests on WSL2/Ubuntu Rancher Desktop (macOS) officially tested and supported on macOS <ul> <li>Docker Desktop for Linux does not work with DDEV because it mounts all files into the container owned as root.</li> <li>Rancher Desktop for Windows does not work with DDEV.</li> </ul>"},{"location":"users/usage/faq/#how-can-i-migrate-from-one-docker-provider-to-another","title":"How can I migrate from one Docker provider to another?","text":"<p>There are many Docker providers on DDEV\u2019s supported platforms. For example, on macOS people use Docker Desktop and OrbStack along with Colima and Rancher Desktop. On Windows WSL2, people may use Docker Desktop or Docker CE inside WSL2. In all cases, if you want to switch between Docker providers, save your database and make sure the Docker providers don\u2019t interfere with each other:</p> <ol> <li>Save away your projects\u2019 databases. You can run <code>ddev snapshot --all</code> to make snapshots of all registered projects (that show up in <code>ddev list</code>). If you prefer a different way of saving database dumps, that works too!</li> <li>Stop the Docker provider you\u2019re moving from. For example, exit Docker Desktop.</li> <li>Start the Docker provider you\u2019re moving to.</li> <li>Start projects and restore their databases. For example, you could run <code>ddev snapshot restore --latest</code> to load a snapshot taken in step one.</li> </ol>"},{"location":"users/usage/faq/#can-i-run-ddev-on-an-older-mac","title":"Can I run DDEV on an older Mac?","text":"<p>Probably! You\u2019ll need to install an older, unsupported version of Docker Desktop\u2014but you can likely use it to run the latest DDEV version.</p> <p>Check out this Stack Overflow answer for a walk through the process.</p>"},{"location":"users/usage/faq/#do-i-need-to-install-php-composer-nginx-or-nodejsnpm-on-my-workstation","title":"Do I need to install PHP, Composer, nginx, or Node.js/npm on my workstation?","text":"<p>No. These tools live inside DDEV\u2019s Docker containers, so you only need to install Docker and install DDEV. This is especially handy for Windows users where there\u2019s more friction getting these things installed.</p>"},{"location":"users/usage/faq/#do-i-lose-data-when-i-run-ddev-poweroff-ddev-stop-or-ddev-restart","title":"Do I lose data when I run <code>ddev poweroff</code>, <code>ddev stop</code>, or <code>ddev restart</code>?","text":"<p>No. Your code continues to live on your workstation, and your database is safely stored on a Docker volume\u2014both unaffected by these commands.</p>"},{"location":"users/usage/faq/#how-can-i-connect-to-my-database","title":"How can I connect to my database?","text":"<p>The answer depends on where you\u2019re connecting from.</p> <p>The <code>ddev describe</code> command includes database connection details in a row like this:</p> <pre><code>\u2502 db         \u2502 OK   \u2502 InDocker: ddev-mysite-db:3306 \u2502 mariadb:10.3       \u2502\n\u2502            \u2502      \u2502 Host: localhost:63161         \u2502 User/Pass: 'db/db' \u2502\n\u2502            \u2502      \u2502                               \u2502 or 'root/root'     \u2502\n</code></pre> <p>Inside your project container, where the app itself is running, the database hostname is <code>db</code> (not <code>127.0.0.1</code>) and the port is the default for your database engine\u2014<code>3306</code> for MySQL/MariaDB, <code>5432</code> for PostgreSQL.</p> <p>Outside your project\u2019s web container, for example a database GUI on your workstation, the hostname is <code>localhost</code> and the port is unique to that project. In the example above, it\u2019s <code>63161</code>.</p> <p>The username, password, and database are each <code>db</code> regardless of how you connect.</p>"},{"location":"users/usage/faq/#can-i-use-additional-databases-with-ddev","title":"Can I use additional databases with DDEV?","text":"<p>Yes, you can create additional databases and manually do whatever you need on them. They\u2019re created automatically if you use <code>ddev import-db</code> with the <code>--target-db</code> option. In this example, <code>extradb.sql.gz</code> is extracted and imported to a newly-created database named <code>extradb</code>:</p> <pre><code>ddev import-db --target-db=extradb --file=.tarballs/extradb.sql.gz\n</code></pre> <p>You can use <code>ddev mysql</code> or <code>ddev psql</code> to execute queries, or use the MySQL/PostgreSQL clients within <code>ddev ssh</code> or <code>ddev ssh -s db</code>. See the Database Management page.</p>"},{"location":"users/usage/faq/#can-different-projects-communicate-with-each-other","title":"Can different projects communicate with each other?","text":"<p>Yes, this is commonly required for situations like Drupal migrations. For the <code>web</code> container to access the <code>db</code> container of another project, use <code>ddev-&lt;projectname&gt;-db</code> as the hostname of the other project.</p> <p>Let\u2019s say we have two projects, for example: project A, and project B. In project A, use <code>mysql -h ddev-projectb-db</code> to access the database server of project B. For HTTP/S communication (i.e. API calls) you can 1) access the web container of project B directly with the hostname <code>ddev-&lt;projectb&gt;-web</code> and port 80 or 443: <code>curl https://ddev-projectb-web</code> or 2) Add a <code>.ddev/docker-compose.communicate.yaml</code> to project A to access project B via the official FQDN.</p> <pre><code>services:\n  web:\n    external_links:\n      - \"ddev-router:projectb.ddev.site\"\n</code></pre> <p>This lets the <code>ddev-router</code> know that project A can access the web container on project B\u2019s DDEV URL. If you are using other hostnames or <code>project_tld</code>, you will need to adjust the <code>projectb.ddev.site</code> value.</p>"},{"location":"users/usage/faq/#can-i-run-ddev-with-other-development-environments-at-the-same-time","title":"Can I run DDEV with other development environments at the same time?","text":"<p>Yes, as long as they\u2019re configured with different ports. It doesn\u2019t matter whether your other environments use Docker or not, it should only be a matter of avoiding port conflicts.</p> <p>It\u2019s probably easiest, however, to shut down one before using the other.</p> <p>For example, if you use Lando for one project, do a <code>lando poweroff</code> before using DDEV, and then run <code>ddev poweroff</code> before using Lando again. If you run nginx or Apache locally, stop them before using DDEV. The troubleshooting section goes into more detail about identifying and resolving port conflicts.</p>"},{"location":"users/usage/faq/#performance-troubleshooting","title":"Performance &amp; Troubleshooting","text":""},{"location":"users/usage/faq/#how-can-i-get-the-best-performance","title":"How can I get the best performance?","text":"<p>Docker\u2019s normal mounting can be slow, especially on macOS. See the Performance section for speed-up options including Mutagen and NFS mounting.</p>"},{"location":"users/usage/faq/#how-can-i-troubleshoot-whats-going-wrong","title":"How can I troubleshoot what\u2019s going wrong?","text":"<p>See the troubleshooting, Docker troubleshooting and Xdebug troubleshooting sections.</p>"},{"location":"users/usage/faq/#how-can-i-check-that-docker-is-working","title":"How can I check that Docker is working?","text":"<p>See the troubleshooting section on the Docker Installation page.</p>"},{"location":"users/usage/faq/#why-do-i-get-a-403-or-404-on-my-project-after-ddev-launch","title":"Why do I get a 403 or 404 on my project after <code>ddev launch</code>?","text":"<p>Most likely because the docroot is misconfigured, or there\u2019s no <code>index.php</code> or <code>index.html</code> in it. Open your <code>.ddev/config.yaml</code> file and check the <code>docroot</code> value, which should be a relative path to the directory containing your project\u2019s <code>index.php</code>.</p>"},{"location":"users/usage/faq/#why-do-i-see-nginx-headers-when-ive-set-webserver_type-apache-fpm","title":"Why do I see nginx headers when I\u2019ve set <code>webserver_type: apache-fpm</code>?","text":"<p>Apache runs in the web container, but when you use the <code>https://*.ddev.site</code> URL, it goes through <code>ddev-router</code>, which is an nginx reverse proxy. That\u2019s why you see nginx headers even though your web container\u2019s using Apache. Read more in this Stack Overflow answer.</p>"},{"location":"users/usage/faq/#why-does-ddev-start-fail-with-error-while-mounting-volume-permission-denied","title":"Why does <code>ddev start</code> fail with \u201cerror while mounting volume, Permission denied\u201d?","text":"<p>This almost always means NFS is enabled in your project, but NFS isn\u2019t working on your machine.</p> <p>Start by completely turning NFS off for your projects with <code>ddev config --performance-mode=none &amp;&amp; ddev config global --performance-mode=none</code>. Then later, get NFS working. NFS can improve macOS and traditional Windows performance, but is never needed on Linux or Windows WSL2. Most people on macOS and Windows use Mutagen instead of NFS because of its vastly improved performance, so instead of trying to fix this you can use Mutagen which is enabled by default. On Linux you can enable Mutagen for the project by running <code>ddev config --performance-mode=mutagen</code> or globally <code>ddev config global --performance-mode=mutagen</code>.</p>"},{"location":"users/usage/faq/#why-are-my-apache-http-https-redirects-stuck-in-an-infinite-loop","title":"Why are my Apache HTTP \u2192 HTTPS redirects stuck in an infinite loop?","text":"<p>It\u2019s common to set up HTTP-to-TLS redirects in an <code>.htaccess</code> file, which leads to issues with the DDEV proxy setup. The TLS endpoint of a DDEV project is always the <code>ddev-router</code> container and requests are forwarded through plain HTTP to the project\u2019s web server. This results in endless redirects, so you need to change the root <code>.htaccess</code> file for Apache correctly handles these requests for your local development environment with DDEV. The following snippet should work for most scenarios\u2014even outside of DDEV\u2014and could replace an existing redirect:</p> <pre><code># http:// -&gt; https:// plain or behind proxy for Apache 2.2 and 2.4\n# behind proxy\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^http$\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n\n# plain\nRewriteCond %{HTTP:X-FORWARDED-PROTO} ^$\nRewriteCond %{REQUEST_SCHEME} ^http$ [NC,OR]\nRewriteCond %{HTTPS} off\nRewriteRule (.*) https://%{HTTP_HOST}/$1 [R=301,L]\n</code></pre>"},{"location":"users/usage/faq/#workflow","title":"Workflow","text":""},{"location":"users/usage/faq/#how-can-i-updateupgrade-ddev","title":"How can I update/upgrade DDEV?","text":"<p>You\u2019ll want to update DDEV using the same method you chose to install it. Since upgrading is basically the same as installing, you can follow DDEV Installation to upgrade.</p> <p>You can use the <code>self-upgrade</code> command for getting instructions tailored to your installation.</p> <ul> <li>On macOS you likely installed via Homebrew; run <code>brew update &amp;&amp; brew upgrade ddev</code>.</li> </ul> <ul> <li>On Linux + WSL2 using Debian/Ubuntu\u2019s <code>apt install</code> technique, run <code>sudo apt update &amp;&amp; sudo apt upgrade ddev</code> like any other package on your system.</li> </ul> <ul> <li>On Linux + WSL2 with a Homebrew install, run <code>brew update &amp;&amp; brew upgrade ddev</code>.</li> <li>On macOS or Linux (including WSL2) if you installed using the install_ddev.sh script, run it again:      <pre><code>curl -fsSL https://ddev.com/install.sh | bash\n</code></pre> </li> <li>On traditional Windows, you likely installed with Chocolatey or by downloading the installer package. You can upgrade with <code>choco upgrade ddev</code> or by visiting the releases page and downloading the installer. Both techniques will work.</li> <li>On Arch-Linux based systems, use the standard upgrade techniques, e.g. <code>yay -Syu</code>.</li> </ul>"},{"location":"users/usage/faq/#how-can-i-install-a-specific-version-of-ddev","title":"How can I install a specific version of DDEV?","text":"<p>If you\u2019re using Homebrew, first run <code>brew unlink ddev</code> to get rid of the version you have there. Then use one of these options:</p> <ol> <li>Download the version you want from the releases page and place it in your <code>$PATH</code>.</li> <li>Use the install_ddev.sh script with the version number argument. For example, if you want v1.21.5, run <code>curl -fsSL https://ddev.com/install.sh | bash -s v1.21.5</code>.</li> <li>On Debian/Ubuntu/WSL2 with DDEV installed via apt, you can run <code>sudo apt update &amp;&amp; sudo apt install ddev=&lt;version&gt;</code>, for example <code>sudo apt install ddev=1.21.5</code>.</li> <li>If you want the very latest, unreleased version of DDEV, run <code>brew unlink ddev &amp;&amp; brew install ddev/ddev/ddev --HEAD</code>.</li> </ol>"},{"location":"users/usage/faq/#how-can-i-back-up-or-restore-all-project-databases","title":"How can I back up or restore all project databases?","text":"<p>You can back up all projects that show in <code>ddev list</code> with <code>ddev snapshot -a</code>. This only snapshots projects displayed in <code>ddev list</code>; any projects not shown there will need to be started so they\u2019re be registered in <code>ddev list</code>.</p>"},{"location":"users/usage/faq/#how-can-i-share-my-local-project-with-someone","title":"How can I share my local project with someone?","text":"<p>See Sharing Your Project.</p>"},{"location":"users/usage/faq/#how-do-i-make-ddev-match-my-production-environment","title":"How do I make DDEV match my production environment?","text":"<p>You can change the major PHP version and choose between nginx+fpm (default) and Apache+fpm and choose the MariaDB/MySQL/PostgreSQL version add extra services like Solr and Memcached. You won\u2019t be able to make every detail match your production server, but with database server type and version, PHP version and web server type you\u2019ll be close.</p>"},{"location":"users/usage/faq/#how-do-i-completely-destroy-a-project","title":"How do I completely destroy a project?","text":"<p>Use <code>ddev delete &lt;project&gt;</code> to destroy a project. By default, a <code>ddev snapshot</code> of your database is taken, but you can skip this using <code>ddev delete --omit-snapshot</code> or <code>ddev delete --omit-snapshot -y</code>. See <code>ddev delete -h</code> for options. It\u2019s up to you to then delete the code directory.</p>"},{"location":"users/usage/faq/#what-if-i-dont-like-the-settings-files-or-gitignores-ddev-creates","title":"What if I don\u2019t like the settings files or gitignores DDEV creates?","text":"<p>You have several options:</p> <ul> <li>Use the <code>disable_settings_management: true</code> option in the project\u2019s <code>.ddev/config.yaml</code> file. This disables DDEV from updating CMS-related settings files.</li> <li>Use the more generic \u201cphp\u201d project type rather than a CMS-specific one; it basically means \u201cdon\u2019t try to create settings files for me\u201d. The \u201cphp\u201d type works great for experienced developers.</li> <li>Take over the settings file or <code>.gitignore</code> by deleting the line <code>#ddev-generated</code> in it, then check in the file. If that line is removed, DDEV will not try to replace or change the file.</li> </ul>"},{"location":"users/usage/faq/#how-can-i-change-a-projects-name","title":"How can I change a project\u2019s name?","text":"<p>Delete it and migrate it to a new project with your preferred name:</p> <ol> <li>Export the project\u2019s database: <code>ddev export-db --file=/path/to/db.sql.gz</code>.</li> <li>Delete the project: <code>ddev delete &lt;project&gt;</code>. (This takes a snapshot by default for safety.)</li> <li>Rename the project: <code>ddev config --project-name=&lt;new_name&gt;</code>.</li> <li>Start thew new project with <code>ddev start</code>.</li> <li>Import the database dump from step one: <code>ddev import-db --file=/path/to/db.sql.gz</code>.</li> </ol>"},{"location":"users/usage/faq/#how-can-i-move-a-project-to-another-directory","title":"How can I move a project to another directory?","text":"<p>Run <code>ddev stop --unlist</code>, then move the directory, then run <code>ddev start</code> in the new directory.</p>"},{"location":"users/usage/faq/#how-can-i-move-a-project-to-another-workstation","title":"How can I move a project to another workstation?","text":"<p>Take a snapshot, move the project files, and restore the snapshot in a new project on the target workstation:</p> <ol> <li><code>ddev start &amp;&amp; ddev snapshot</code>.</li> <li><code>ddev stop --unlist</code>.</li> <li>Move the project directory to another computer any way you want.</li> <li>On the new computer, run <code>ddev start &amp;&amp; ddev snapshot restore --latest</code>.</li> <li>Optionally, on the old computer, run <code>ddev delete --omit-snapshot</code> to remove its copy of the database.</li> </ol>"},{"location":"users/usage/faq/#how-can-i-move-a-project-from-traditional-windows-to-wsl2","title":"How can I move a project from traditional Windows to WSL2?","text":"<p>This is exactly the same as moving a project from one computer to another described above. Make sure you move the project into a native filesystem in WSL2, most likely <code>/home</code>.</p>"},{"location":"users/usage/faq/#why-does-ddev-want-to-edit-etchosts","title":"Why does DDEV want to edit <code>/etc/hosts</code>?","text":"<p>If you see \u201cThe hostname  is not currently resolvable\u201d and you can successfully <code>ping &lt;hostname&gt;</code>, it may be that DNS resolution is slow. <p>DDEV doesn\u2019t have control over your computer\u2019s name resolution, so it doesn\u2019t have any way to influence how your browser gets an IP address from a hostname. It knows you have to be connected to the internet to do that, and uses a test DNS lookup of <code>&lt;somethingrandom&gt;.ddev.site</code> as a way to guess whether you\u2019re connected to the internet. If it\u2019s unable to do a name lookup, or if the hostname associated with your project is not <code>*.ddev.site</code>, it will try to create entries in <code>/etc/hosts</code>, since it\u2019s assuming you can\u2019t look up your project\u2019s hostname(s) via DNS. If your internet (and name resolution) is actually working, but DNS is slow, run <code>ddev config global --internet-detection-timeout-ms=3000</code> to set the timeout to 3 seconds (or higher). See this GitHub issue for more. (If DNS rebinding is disallowed on your network/router, this won\u2019t be solvable without network/router changes. Help here and here.) For more detailed troubleshooting information, please see the troubleshooting section.</p>"},{"location":"users/usage/faq/#how-can-i-configure-a-project-with-the-defaults-without-hitting-return-a-bunch-of-times","title":"How can I configure a project with the defaults without hitting RETURN a bunch of times?","text":"<p>Use <code>ddev config --auto</code> to set the docroot and project type based on the discovered code. If anything in <code>.ddev/config.yaml</code> is wrong, you can edit that directly or use <code>ddev config</code> commands to update settings.</p>"},{"location":"users/usage/faq/#getting-involved","title":"Getting Involved","text":""},{"location":"users/usage/faq/#how-do-i-get-support","title":"How do I get support?","text":"<p>See the support options, including Discord, Stack Overflow and the issue queue.</p>"},{"location":"users/usage/faq/#how-can-i-contribute-to-ddev","title":"How can I contribute to DDEV?","text":"<p>We love and welcome contributions of knowledge, support, docs, and code:</p> <ul> <li>Submit an issue or pull request to the main repository.</li> <li>Add your external resource to awesome-ddev.</li> <li>Add your recipe or HOWTO to ddev-contrib.</li> <li>Help others in Discord and on Stack Overflow.</li> <li>Contribute financially via GitHub Sponsors.</li> <li>Get involved with DDEV governance and the Advisory Group.</li> </ul>"},{"location":"users/usage/faq/#how-do-financial-contributions-support-ddev","title":"How do financial contributions support DDEV?","text":"<p>Thanks for asking! Contributions made via GitHub Sponsors go to the Localdev Foundation and are used for infrastructure and supporting development.</p>"},{"location":"users/usage/managing-projects/","title":"Managing projects","text":""},{"location":"users/usage/managing-projects/#configuration-files","title":"Configuration Files","text":"<p>The <code>ddev config</code> and <code>ddev start</code> commands attempt to create a CMS-specific settings file pre-populated with DDEV credentials. If you don\u2019t want DDEV to do this, set the <code>disable_settings_management</code> config option to <code>true</code>.</p> <p>For Craft CMS DDEV settings are added to the <code>.env</code> file.</p> <p>For Django 4 DDEV settings are placed in <code>.ddev/settings/settings.django4.py</code> and a stanza is added to your <code>settings.py</code> that is only invoked in DDEV context.</p> <p>For Drupal and Backdrop, DDEV settings are written to a DDEV-managed file, <code>settings.ddev.php</code>. The <code>ddev config</code> command will ensure these settings are included in your <code>settings.php</code> through the following steps:</p> <ul> <li>Write DDEV settings to <code>settings.ddev.php</code>.</li> <li>If no <code>settings.php</code> file exists, create one that includes <code>settings.ddev.php</code>.</li> <li>If a <code>settings.php</code> file already exists, ensure that it includes <code>settings.ddev.php</code>, modifying <code>settings.php</code> to write the include if necessary.</li> </ul> <p>For Magento 1, DDEV settings go into <code>app/etc/local.xml</code>.</p> <p>In Magento 2, DDEV settings go into <code>app/etc/env.php</code>.</p> <p>For TYPO3, DDEV settings are written to <code>AdditionalConfiguration.php</code>. If <code>AdditionalConfiguration.php</code> exists and is not managed by DDEV, it will not be modified.</p> <p>For WordPress, DDEV settings are written to a DDEV-managed file, <code>wp-config-ddev.php</code>. The <code>ddev config</code> command will attempt to write settings through the following steps:</p> <ul> <li>Write DDEV settings to <code>wp-config-ddev.php</code>.</li> <li>If no <code>wp-config.php</code> exists, create one that include <code>wp-config-ddev.php</code>.</li> <li>If a DDEV-managed <code>wp-config.php</code> exists, create one that includes <code>wp-config.php</code>.</li> <li>If a user-managed <code>wp-config.php</code> exists, instruct the user on how to modify it to include DDEV settings.</li> </ul> <p>You\u2019ll know DDEV is managing a settings file when you see a comment containing <code>#ddev-generated</code> like the one below. Remove the comment and DDEV will not attempt to overwrite it. If you\u2019re letting DDEV create its settings file, we recommended leaving this comment so DDEV can continue to manage it, and make any needed changes in another settings file.</p> <pre><code>/**\n #ddev-generated: Automatically generated Drupal settings.php file.\n ddev manages this file and may delete or overwrite the file unless this comment is removed.\n */\n</code></pre> <p>If you\u2019re providing the <code>settings.php</code> or <code>wp-config.php</code> and DDEV is creating <code>settings.ddev.php</code> (or <code>wp-config-local.php</code>, <code>AdditionalConfig.php</code>, or similar), the main settings file must explicitly include the appropriate DDEV-generated settings file. Any changes you need should be included somewhere that loads after DDEV\u2019s settings file, for example in Drupal\u2019s <code>settings.php</code> after <code>settings.ddev.php</code> is included. (See Adding Configuration below).</p>"},{"location":"users/usage/managing-projects/#adding-configuration","title":"Adding Configuration","text":"<p>Drupal and Backdrop: In <code>settings.php</code>, enable loading <code>settings.local.php</code> after <code>settings.ddev.php</code> is included\u2014creating a new one if it doesn\u2019t already exist\u2014and make changes there. Wrap with <code>if (getenv('IS_DDEV_PROJECT') == 'true')</code> as needed.</p> <p>WordPress: Load a <code>wp-config-local.php</code> after <code>wp-config-ddev.php</code>, and make changes there. Wrap with <code>if (getenv('IS_DDEV_PROJECT') == 'true')</code> as needed.</p>"},{"location":"users/usage/managing-projects/#listing-project-information","title":"Listing Project Information","text":"<p>Run <code>ddev list</code> or <code>ddev list --active-only</code> current projects.</p> <pre><code>\u279c  ddev list\nNAME          TYPE     LOCATION                   URL(s)                                STATUS\nd8git         drupal8  ~/workspace/d8git          &lt;https://d8git.ddev.local&gt;            running\n                                                  &lt;http://d8git.ddev.local&gt;\nhobobiker     drupal6  ~/workspace/hobobiker.com                                        stopped\n</code></pre> <pre><code>\u279c  ddev list --active-only\nNAME     TYPE     LOCATION             URL(s)                      STATUS\ndrupal8  drupal8  ~/workspace/drupal8  &lt;http://drupal8.ddev.site&gt;  running\n                                       &lt;https://drupal8.ddev.site&gt;\n</code></pre> <p>You can also see more detailed information about a project by running <code>ddev describe</code> from its working directory. You can also run <code>ddev describe [project-name]</code> from any location to see the detailed information for a running project.</p> <pre><code>NAME        TYPE     LOCATION                URL                           STATUS\nd9composer  drupal8  ~/workspace/d9composer  https://d9composer.ddev.site  running\n\nProject Information\n-------------------\nPHP version:    7.4\nMariaDB version 10.3\n\nURLs\n----\nhttps://d9composer.ddev.site\nhttps://127.0.0.1:33232\nhttp://d9composer.ddev.site\nhttp://127.0.0.1:33233\n\nMySQL/MariaDB Credentials\n-------------------------\nUsername: \"db\", Password: \"db\", Default database: \"db\"\n\nor use root credentials when needed: Username: \"root\", Password: \"root\"\n\nDatabase hostname and port INSIDE container: ddev-d9-db:3306\nTo connect to db server inside container or in project settings files:\nmysql --host=ddev-d9-dbcomposer --user=db --password=db --database=db\nDatabase hostname and port from HOST: 127.0.0.1:33231\nTo connect to mysql from your host machine,\nmysql --host=127.0.0.1 --port=33231 --user=db --password=db --database=db\n\nOther Services\n--------------\nMailpit (HTTPS):    https://d9composer.ddev.site:8026\nMailpit:            http://d9composer.ddev.site:8025\n\nDDEV ROUTER STATUS: healthy\nssh-auth status: healthy\n</code></pre>"},{"location":"users/usage/managing-projects/#removing-projects","title":"Removing Projects","text":"<p>There are two ways to remove a project from DDEV\u2019s listing.</p> <p>The first, the <code>ddev delete</code> command, is destructive. It removes the project from DDEV\u2019s list, deletes its database, and removes the hostname entry from the hosts file:</p> <p><code>ddev delete &lt;projectname&gt;</code> or <code>ddev delete --omit-snapshot &lt;projectname&gt;</code></p> <p>If you don\u2019t want the project to show up in <code>ddev list</code> anymore, use <code>ddev stop</code>\u2014which is nondestructive\u2014to unlist the project until the next time you run <code>ddev start</code> or <code>ddev config</code>:</p> <pre><code>ddev stop --unlist &lt;projectname&gt;\n</code></pre>"},{"location":"users/usage/managing-projects/#importing-assets-for-an-existing-project","title":"Importing Assets for An Existing Project","text":"<p>An important aspect of local web development is the ability to have a precise local recreation of the project you\u2019re working on, including up-to-date database contents and static assets like uploaded images and files. DDEV provides two commands to help with importing assets to your local environment.</p>"},{"location":"users/usage/managing-projects/#importing-a-database","title":"Importing a Database","text":"<p>The <code>ddev import-db</code> command imports the database for a project. Running this command will prompt you to specify the location of your database import. By default <code>ddev import-db</code> empties the default <code>db</code> database, then loads the provided dump file. Most people use it with command flags, like <code>ddev import-db --file=.tarballs/db.sql.gz</code>, but it can also prompt for the location of the dump if you only use <code>ddev import-db</code>:</p> <pre><code>ddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/db.sql\nImporting database...\nSuccessfully imported database for drupal8\n</code></pre>"},{"location":"users/usage/managing-projects/#supported-database-import-file-types","title":"Supported Database Import File Types","text":"<p>Database imports can be any of the following file types:</p> <ul> <li>Raw SQL Dump (<code>.sql</code>)</li> <li>Gzipped SQL Dump (<code>.sql.gz</code>)</li> <li>Xz\u2019d SQL Dump (<code>.sql.xz</code>)</li> <li>(Gzipped) Tarball Archive (<code>.tar</code>, <code>.tar.gz</code>, <code>.tgz</code>)</li> <li>ZIP Archive (<code>.zip</code>)</li> <li>stdin</li> </ul> <p>If a Tarball Archive or ZIP Archive is provided for the import, you\u2019ll be prompted to specify a path within the archive to use for the import asset. The specified path should provide a raw SQL dump (<code>.sql</code>). In the following example, the database we want to import is named <code>data.sql</code> and resides at the top level of the archive:</p> <pre><code>ddev import-db\nProvide the path to the database you wish to import.\nImport path:\n~/Downloads/site-backup.tar.gz\nYou provided an archive. Do you want to extract from a specific path in your archive? You may leave this blank if you wish to use the full archive contents\nArchive extraction path:\ndata.sql\nImporting database...\nA settings file already exists for your application, so ddev did not generate one.\nRun 'ddev describe' to find the database credentials for this application.\nSuccessfully imported database for drupal8\n</code></pre>"},{"location":"users/usage/managing-projects/#non-interactive-usage","title":"Non-Interactive Usage","text":"<p>If you want to use the <code>import-db</code> command without answering prompts, you can use the <code>--file</code> flag to provide the path to the import asset. If you\u2019re importing an archive and wish to specify the path within the archive to extract, you can use the <code>--extract-path</code> flag in conjunction with the <code>--file</code> flag. Examples:</p> <pre><code>ddev import-db --file=/tmp/mydb.sql.gz\ngzip -dc /tmp/mydb.sql.gz | ddev import-db\nddev import-db &lt;mydb.sql\n</code></pre>"},{"location":"users/usage/managing-projects/#database-import-notes","title":"Database Import Notes","text":"<ul> <li>Importing from a dump file via stdin will not show progress because there\u2019s no way the import can know how far along through the import it has progressed.</li> <li>Use <code>ddev import-db --target-db &lt;some_database&gt;</code> to import to a non-default database (other than the default <code>db</code> database). This will create the database if it doesn\u2019t already exist.</li> <li>Use <code>ddev import-db --no-drop</code> to import without first emptying the database.</li> <li>If a database already exists and the import does not specify dropping tables, the contents of the imported dumpfile will be added to the database. Most full database dumps do a table drop and create before loading, but if yours does not, you can drop all tables with <code>ddev stop --remove-data</code> before importing.</li> <li>If imports are stalling or failing, make sure you have plenty of unused space (see #3360). DDEV has no problems importing large (2G+) databases, but importing requires lots of space. DDEV will show a warning on startup if unused space is getting low.</li> </ul>"},{"location":"users/usage/offline/","title":"Using DDEV Offline","text":"<p>DDEV attempts to work smoothly offline, and you shouldn\u2019t have to do anything to make it work:</p> <ul> <li>It doesn\u2019t attempt instrumentation or update reporting if offline</li> <li>It falls back to using <code>/etc/hosts</code> entries if DNS resolution fails</li> </ul> <p>However, it does not (yet) attempt to prevent Docker pulls if a new Docker image is required, so you\u2019ll want to make sure that you try a <code>ddev start</code> before going offline to make sure everything has been pulled.</p> <p>If you have a project running when you\u2019re online (using DNS for name resolution) and you then go offline, you\u2019ll want to do a <code>ddev restart</code> to get the hostname added into <code>/etc/hosts</code> for name resolution.</p> <p>You have general options as well:</p> <p>In <code>.ddev/config.yaml</code>, <code>use_dns_when_possible: false</code> will make DDEV never try to use DNS for resolution, instead adding hostnames to <code>/etc/hosts</code>. You can also use <code>ddev config --use-dns-when-possible=false</code> to set this configuration option.</p> <p>In <code>.ddev/config.yaml</code>, you can use <code>project_tld: example.com</code> to have DDEV use a project TLD that won\u2019t be looked up via DNS. You can do the equivalent with <code>ddev config --project-tld=example.com</code>. This also works as a global option in <code>~/.ddev/global_config.yaml</code> or running <code>ddev config global --project-tld=example.com</code>.</p> <p>You can also set up a local DNS server like dnsmasq (Linux and macOS, <code>brew install dnsmasq</code>) or (unbound or many others on Windows) in your own host environment that serves the project_tld that you choose, and DNS resolution will work fine. You\u2019ll likely want a wildcard A record pointing to 127.0.0.1 on most DDEV installations. If you use dnsmasq, you must configure it to allow DNS rebinding.</p> <p>If you\u2019re using a browser on Windows and accessing a DDEV project in WSL2, Windows will attempt to resolve the site name via DNS. This will fail if you don\u2019t have an internet connection. To resolve this, update your <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> file manually:</p> <pre><code>127.0.0.1 example.ddev.site\n</code></pre> <p>Administrative Privileges Required</p> <p>You must have administrative privileges to save the hosts file on any OS.</p>"},{"location":"users/usage/troubleshooting/","title":"Troubleshooting","text":"<p>Things might go wrong! In addition to this page, consider checking Stack Overflow and the DDEV issue queue and other support options, as well as Docker troubleshooting suggestions.</p>"},{"location":"users/usage/troubleshooting/#general-troubleshooting-strategies","title":"General Troubleshooting Strategies","text":"<ul> <li>Start by running <code>ddev poweroff</code> to make sure all containers can start fresh.</li> <li>Temporarily disable firewalls, VPNs, tunnels, network proxies, and virus checkers while you\u2019re troubleshooting.</li> <li>Temporarily disable any proxies you\u2019ve established in Docker\u2019s settings.</li> <li>Use <code>ddev debug dockercheck</code> and <code>ddev debug test</code> to help sort out Docker problems.</li> <li>Make sure you do not have disk space problems on your computer. This can be especially tricky on WSL2, where you need to check both the main Windows disk space and WSL2 disk space as well.</li> <li>On macOS, check to make sure Docker Desktop or Colima are not out of disk space. In Settings (or Preferences) \u2192 Resources \u2192 Disk image size there should be ample space left; try not to let usage exceed 80% because the reported number can be unreliable. If it says zero used, something is wrong.</li> <li>If you have customizations like PHP overrides, nginx or Apache overrides, MySQL/PostgreSQL overrides, custom services, or <code>config.yaml</code> changes, please back them out while troubleshooting. It\u2019s important to have the simplest possible environment while troubleshooting.</li> <li>Restart Docker. Consider a Docker factory reset in serious cases, which will destroy any databases you\u2019ve loaded. See Docker Troubleshooting for more.</li> <li> <p>Try the simplest possible DDEV project (like <code>ddev debug test</code> does):</p> <pre><code>ddev poweroff\nmkdir ~/tmp/testddev\ncd ~/tmp/testddev\nddev config --auto\nprintf \"&lt;?php\\nphpinfo();\\n\" &gt; index.php\nddev start\n</code></pre> <p>If that starts up fine, there may be an issue specifically with the project you\u2019re trying to start.</p> </li> </ul> <p>Using DDEV with Other Development Environments</p> <p>DDEV uses your system\u2019s port 80 and 443 by default when projects are running. If you\u2019re using another local development environment (like Lando or Docksal or a native setup), you can either stop the other environment or configure DDEV to use different ports. See troubleshooting for more detailed problem-solving. It\u2019s easiest to stop the other environment when you want to use DDEV, and stop DDEV when you want to use the other environment.</p>"},{"location":"users/usage/troubleshooting/#debug-environment-variables","title":"Debug Environment Variables","text":"<p>Two environment variables meant for DDEV development may also be useful for broader troubleshooting: <code>DDEV_DEBUG</code> and <code>DDEV_VERBOSE</code>. When enabled, they\u2019ll output more information when DDEV is executing a command. <code>DDEV_VERBOSE</code> can be particularly helpful debugging Dockerfile problems because it outputs complete information about the Dockerfile build stage within the <code>ddev start</code> command.</p> <p>You can set either one in your current session by running <code>export DDEV_DEBUG=true</code> and <code>export DDEV_VERBOSE=true</code>.</p> <p></p>"},{"location":"users/usage/troubleshooting/#web-server-ports-already-occupied","title":"Web Server Ports Already Occupied","text":"<p>DDEV may notify you about port conflicts with this message about port 80 or 443:</p> <p>Failed to start yoursite: Unable to listen on required ports, localhost port 80 is in use</p> <p>DDEV sometimes also has this error message that will alert you to port conflicts:</p> <p>ERROR: for ddev-router Cannot start service ddev-router: Ports are not available: listen tcp 127.0.0.1:XX: bind: An attempt was made to access a socket in a way forbidden by its access permissions.</p> <p>or</p> <p>Error response from daemon: Ports are not available: exposing port TCP 127.0.0.1:443 -&gt; 0.0.0.0:0: listen tcp 127.0.0.1:443: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.</p> <p>This means there\u2019s another process or web server listening on the named port(s) and DDEV cannot access the port. The most common conflicts are on ports 80 and 443.</p> <p>In some cases, the conflict could be over Mailpit\u2019s port 8025 or 8026.</p> <p>To resolve this conflict, choose one of these methods:</p> <ol> <li>Stop all Docker containers that might be using the port by running <code>ddev poweroff &amp;&amp; docker rm -f $(docker ps -aq)</code>, then restart Docker.</li> <li>If you\u2019re using another local development environment that uses these ports (MAMP, WAMP, Lando, etc.), consider stopping it.</li> <li>Fix port conflicts by configuring DDEV globally to use different ports.</li> <li>Fix port conflicts by stopping the competing application.</li> </ol>"},{"location":"users/usage/troubleshooting/#method-1-stop-the-conflicting-application","title":"Method 1: Stop the conflicting application","text":"<p>Consider <code>lando poweroff</code> for Lando, or <code>fin system stop</code> for Docksal, or stop MAMP using GUI interface or <code>stop.sh</code>.</p>"},{"location":"users/usage/troubleshooting/#method-2-fix-port-conflicts-by-configuring-your-project-to-use-different-ports","title":"Method 2: Fix port conflicts by configuring your project to use different ports","text":"<p>To configure a project to use non-conflicting ports, remove router port configuration from the project and set it globally to different values. This will work for most people:</p> <pre><code>ddev config --router-http-port=\"\" --router-https-port=\"\"\nddev config global --router-http-port=8080 --router-https-port=8443\nddev start\n</code></pre> <p>This changes the project\u2019s HTTP URL to <code>http://yoursite.ddev.site:8080</code> and the HTTPS URL to <code>https://yoursite.ddev.site:8443</code>.</p> <p>If the conflict is over port 8025 or 8026, it\u2019s probably clashing with Mailpit\u2019s default port:</p> <pre><code>ddev config --mailpit-http-port=\"\" --mailpit-https-port=\"\"\nddev config global --mailpit-http-port=8301 --mailpit-https-port=8302\n</code></pre>"},{"location":"users/usage/troubleshooting/#method-3-fix-port-conflicts-by-stopping-the-competing-application","title":"Method 3: Fix port conflicts by stopping the competing application","text":"<p>Alternatively, stop the other application.</p> <p>Probably the most common conflicting application is Apache running locally. It can often be stopped gracefully (but temporarily) with:</p> <pre><code>sudo apachectl stop\n</code></pre> <p>Common tools that use port 80 and port 443:</p> <p>Here are some of the other common processes that could be using ports 80/443 and methods to stop them.</p> <ul> <li>macOS content filtering: Under \u201cScreen Time\u201d \u2192 \u201cChoose Screen Time content and privacy settings\u201d, turn off \u201cContent and Privacy\u201d and then reboot. This has been a common issue with macOS Sonoma.</li> <li>macOS or Linux Homebrew: Look for active processes by running <code>brew services</code> and temporarily running <code>brew services stop</code> individually to see if it has any impact on the conflict.</li> <li>MAMP (macOS): Stop MAMP.</li> <li>Apache: Temporarily stop with <code>sudo apachectl stop</code>, permanent stop depends on your environment.</li> <li>nginx (macOS Homebrew): <code>sudo brew services stop nginx</code> or <code>sudo launchctl stop homebrew.mxcl.nginx</code>.</li> <li>nginx (Ubuntu): <code>sudo service nginx stop</code>.</li> <li>Apache (many environments, often named \u201chttpd\u201d): <code>sudo apachectl stop</code> or on Ubuntu <code>sudo service apache2 stop</code>.</li> <li>VPNKit (macOS): You likely have a Docker container bound to port 80. Do you have containers up for Lando or another Docker-based development environment? If so, stop the other environment.</li> <li>Lando: If you\u2019ve previously used Lando, try running <code>lando poweroff</code>.</li> <li>IIS on Windows (can affect WSL2). You\u2019ll have to disable it in the Windows settings.</li> </ul> <p>To dig deeper, you can use a number of tools to find out what process is listening.</p> <p>On macOS and Linux, try the <code>lsof</code> tool on ports 80 or 443 or whatever port you\u2019re having trouble with:</p> <pre><code>$ sudo lsof -i :443 -sTCP:LISTEN\nCOMMAND  PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\nnginx   1608 www-data   46u  IPv4  13913      0t0  TCP *:http (LISTEN)\nnginx   5234     root   46u  IPv4  13913      0t0  TCP *:http (LISTEN)\n</code></pre> <p>You can also use the <code>netstat -anv -p tcp</code> command to examine processes running on specific ports:</p> <pre><code>sudo netstat -anv -p tcp | egrep 'Proto|(\\*\\.(80|443))'\nProto Recv-Q Send-Q  Local Address          Foreign Address        (state)      rhiwat  shiwat    pid   epid state  options           gencnt    flags   flags1 usscnt rtncnt fltrs\ntcp4       0      0  *.80                   *.*                    LISTEN       131072  131072  10521      0 00100 00000006 000000000000965d 00000000 00000900      1      0 000001\ntcp4       0      0  *.443                  *.*                    LISTEN       131072  131072  10521      0 00100 00000006 000000000000965c 00000000 00000900      1      0 000001```\n</code></pre> <p>The <code>pid</code> column shows the process ID of the process listening on the port. In this case, it\u2019s <code>10521</code>. You can use <code>ps</code> to find out what process that is:</p> <pre><code>$ ps -p 10521\n$ ps -fp 10521\nUID   PID  PPID   C STIME   TTY           TIME CMD\n501 10521     1   0 12:35PM ??         0:05.16 /Applications/OrbStack.app/Contents/MacOS/../Frameworks/OrbStack Helper.app/Contents/MacOS/OrbStack Helper vmgr -build-id 339077377 -handoff\n</code></pre> <p>On Windows CMD, use sysinternals tcpview or try using <code>netstat</code> and <code>tasklist</code> to find the process ID:</p> <pre><code>&gt; netstat -aon | findstr \":80.*LISTENING\"\n  TCP    127.0.0.1:80           0.0.0.0:0              LISTENING       5760\n  TCP    127.0.0.1:8025         0.0.0.0:0              LISTENING       5760\n  TCP    127.0.0.1:8036         0.0.0.0:0              LISTENING       5760\n\n&gt; tasklist | findstr \"5760\"\ncom.docker.backend.exe        5760 Services                   0      9,536 K\n</code></pre> <p>The resulting output displays which command is running and its PID. Choose the appropriate method to stop the other server.</p> <p>You may also be able to find what\u2019s using a port using <code>curl</code>. On Linux, macOS, or in Git Bash on Windows, <code>curl -I localhost</code> or <code>curl -I -k https://localhost:443</code>. The result may give you a hint about which application is at fault.</p> <p>We welcome your suggestions based on other issues you\u2019ve run into and your troubleshooting technique.</p>"},{"location":"users/usage/troubleshooting/#debugging-port-issues-on-wsl2","title":"Debugging Port Issues on WSL2","text":"<p>On WSL2 it\u2019s harder to debug this because the port may be occupied either on the traditional Windows side, or within your WSL2 distro. This means you may have to debug it in both places, perhaps using both the Windows techniques shown above and the Linux techniques shown above. The ports are shared between Windows and WSL2, so they can be broken on either side.</p>"},{"location":"users/usage/troubleshooting/#database-container-fails-to-start","title":"Database Container Fails to Start","text":"<p>Use <code>ddev logs -s db</code> to see what\u2019s wrong.</p> <p>The most common cause of the database container not coming up is changing the database type or version in the project configuration, so the database server daemon is unable to start using an existing configuration for a different type or version.</p> <p>To solve this:</p> <ul> <li>Change the configuration in <code>.ddev/config.yaml</code> back to the original configuration.</li> <li>Export the database with <code>ddev export-db</code>.</li> <li>Delete the project with <code>ddev delete</code>, or stop the project and remove the database volume using <code>docker volume rm &lt;project&gt;-mariadb</code> or <code>docker volume rm &lt;project&gt;-postgres</code>.</li> <li>Update <code>.ddev/config.yaml</code> to use the new database type or version.</li> <li>Start the project and import the database from your export.</li> </ul>"},{"location":"users/usage/troubleshooting/#web-service-unhealthy-or-web-service-starting-or-exited","title":"\u201cweb service unhealthy\u201d or \u201cweb service starting\u201d or Exited","text":"<p>Use <code>ddev logs</code> to see what\u2019s wrong.</p> <p>The most common cause of the web container being unhealthy is a user-defined <code>.ddev/nginx-full/nginx-site.conf</code> or <code>.ddev/apache/apache-site.conf</code>. Please rename these to <code>&lt;xxx_site.conf&gt;</code> during testing. To figure out what\u2019s wrong with it after you\u2019ve identified that as the problem, use <code>ddev logs</code> and review the error.</p> <p>Changes to <code>.ddev/nginx-site.conf</code> and <code>.ddev/apache/apache-site.conf</code> take effect only when you do a <code>ddev restart</code> or the equivalent.</p>"},{"location":"users/usage/troubleshooting/#no-input-file-specified-404-or-forbidden-403","title":"No Input File Specified (404) or Forbidden (403)","text":"<p>If you get a 404 with \u201cNo input file specified\u201d (nginx) or a 403 with \u201cForbidden\u201d (Apache) when you visit your project, it usually means that no <code>index.php</code> or <code>index.html</code> is being found in the docroot. This can result from:</p> <ul> <li>Misconfigured docroot: If the docroot isn\u2019t where the web server thinks it is, then the web server won\u2019t find <code>index.php</code>. Look at your <code>.ddev/config.yaml</code> to verify it has a docroot containing <code>index.php</code>. It should be a relative path.</li> <li>Missing <code>index.php</code>: There may not be an <code>index.php</code> or <code>index.html</code> in your project.</li> </ul>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-and-logs-contain-failed-28-no-space-left-on-device-docker-file-space","title":"<code>ddev start</code> Fails and Logs Contain \u201cfailed (28: No space left on device)\u201d - Docker File Space","text":"<p>If <code>ddev start</code> fails, it\u2019s most often because the <code>web</code> or <code>db</code> container fails to start. In this case, the error message from <code>ddev start</code> says something like \u201cFailed to start : db container failed: log=, err=container exited, please use \u2018ddev logs -s db\u2019 to find out why it failed\u201d. You can<code>ddev logs -s db</code> to find out what happened. <p>If you see any variant of \u201cno space left on device\u201d in the logs when using Docker Desktop, it means you have to increase or clean up Docker\u2019s file space. Increase the \u201cDisk image size\u201d\u00a0setting under \u201cResources\u201d in Docker\u2019s Preferences:</p> <p></p> <p>If you see \u201cno space left on device\u201d on Linux, it most likely means your filesystem is full.</p>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-with-container-failed-to-become-ready","title":"<code>ddev start</code> Fails with \u201ccontainer failed to become ready\u201d","text":"<p>A container fails to become ready when its health check is failing. This can happen to any of the containers, and you can usually find the issue with a <code>docker inspect</code> command.</p> <p>Tip</p> <p>You may need to install jq for these examples (<code>brew install jq</code>), or remove the <code>| jq</code> from the command and read the raw JSON output.</p> <p>For the <code>web</code> container:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-&lt;projectname&gt;-web | jq\n</code></pre> <p>For <code>ddev-router</code>:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-router\n</code></pre> <p>For <code>ddev-ssh-agent</code>:</p> <pre><code>docker inspect --format \"{{json .State.Health }}\" ddev-ssh-agent\n</code></pre> <p>Don\u2019t forget to check logs using <code>ddev logs</code> for the <code>web</code> container, and <code>ddev logs -s db</code> for the <code>db</code> container!</p> <p>For <code>ddev-router</code> and <code>ddev-ssh-agent</code>: <code>docker logs ddev-router</code> and <code>docker logs ddev-ssh-agent</code>.</p> <p>Run <code>ddev debug router-nginx-config</code> to print the nginx configuration of the currently running <code>ddev-router</code>.</p>"},{"location":"users/usage/troubleshooting/#ddev-start-fails-with-failed-to-start-project-name-no-such-container-ddev-router","title":"<code>ddev start</code> Fails with \u201cFailed to start [project name]: No such container: ddev-router\u201d","text":"<p>Deleting the images and re-pulling them generally solves this problem.</p> <p>Try running the following commands from the host machine:</p> <pre><code>ddev poweroff\ndocker rm -f $(docker ps -aq)\ndocker rmi -f $(docker images -q)\n</code></pre> <p>You should then be able to start your DDEV machine.</p>"},{"location":"users/usage/troubleshooting/#trouble-building-dockerfiles","title":"Trouble Building Dockerfiles","text":"<p>The additional <code>.ddev/web-build/Dockerfile</code> capability in DDEV is wonderful, but it can be hard to figure out what to put in there.</p> <p>The best approach for any significant Dockerfile is to <code>ddev ssh</code> and <code>sudo -s</code> and then one at a time, do the things that you plan to do with a <code>RUN</code> command in the Dockerfile.</p> <p>For example, if your Dockerfile were</p> <pre><code>RUN npm install --global forever\n</code></pre> <p>You could test it with <code>ddev ssh</code>, <code>sudo -s</code>, and then <code>npm install --global forever</code>.</p> <p>The error messages you get will be more informative than messages that come when the Dockerfile is processed.</p> <p>You can also see the output from the full Docker build using either</p> <pre><code>ddev debug refresh\n</code></pre> <p>or</p> <pre><code>~/.ddev/bin/docker-compose -f .ddev/.ddev-docker-compose-full.yaml --progress=plain build --no-cache\n</code></pre>"},{"location":"users/usage/troubleshooting/#docker-build-fails-apt-get-update-perhaps-ssl-certificate-problem-self-signed-certificate","title":"Docker build fails <code>apt-get update</code>, perhaps \u201cSSL certificate problem: self-signed certificate\u201d","text":"<p>The Docker build environment (where all projects have a little bit happening) is very sensitive to problems with <code>apt-get update</code> or with TLS certificate authentication. If you ware seeing problems with <code>apt-get update</code> failing, some of these strategies may help:</p> <ul> <li>WSL2: On WSL2 it\u2019s a known issue that the WSL2 environment time can get out of sync with the real time. This is an ongoing problem with WSL2, and can be fixed with various workarounds. One good workaround is to install <code>ntpdate</code> and <code>sudo ntpdate pool.ntp.org</code> to sync the time. The time in WSL2 can get out of sync due to laptop sleeping or other causes. A reboot also fixes it.</li> <li>VPN: If you are on a packet-inspection VPN, it often causes problems with validation of certificates on internet sites. In that situation you\u2019ll need to get the CA updates required and install them with a custom Dockerfile, as described on Stack Overflow.</li> <li>Other Docker Build: The Dockerfile build environment is different from the host-side build and different from what you get with <code>ddev ssh</code>. If you\u2019re having trouble with it it may be caused by name resolution or IP connectivity problems, most often caused by a firewall or VPN. Turn off your firewall temporarily and VPN. A good debugging technique would be to do a simple <code>.ddev/web-build/Dockerfile</code> that does <code>RUN curl -I https://www.google.com</code> and then use <code>ddev debug refresh</code> to see the result. If it gets a 200 result, then your name resolution and internet connectivity are working in the Docker build environment.</li> </ul>"},{"location":"users/usage/troubleshooting/#ddev-starts-but-browser-cant-access-url","title":"DDEV Starts but Browser Can\u2019t Access URL","text":"<p>You may see one of these messages in your browser:</p> <ul> <li><code>403</code> Forbidden</li> <li>[url] server IP address could not be found</li> <li>We can\u2019t connect to the server at [url]</li> </ul> <p>If you get the <code>403 Forbidden</code> it\u2019s almost always because your docroot is set wrong. You should have something like <code>docroot: web</code> or <code>docroot: \"\"</code> or <code>docroot: docroot</code> with the relative path to the directory where your <code>index.php</code> lives in the project.</p> <p>Name resolution: Most people use <code>*.ddev.site</code> URLs, which work great most of the time but require internet access.</p> <p><code>*.ddev.site</code> is a wildcard DNS entry that always returns the IP address 127.0.0.1 (localhost). If you\u2019re not connected to the internet, however, or if various other name resolution issues fail, this name resolution won\u2019t work.</p> <p>While DDEV can create a web server and a Docker network infrastructure for a project, it doesn\u2019t have control of your computer\u2019s name resolution, so its backup technique to make a hostname resolvable by the browser is to add an entry to the hosts file (<code>/etc/hosts</code> on Linux and macOS, <code>C:\\Windows\\system32\\drivers\\etc\\hosts</code> on traditional Windows).</p> <ul> <li>If you\u2019re not connected to the internet, your browser will not be able to look up <code>*.ddev.site</code> hostnames. DDEV works fine offline, but for your browser to look up names they\u2019ll have to be resolved in a different way.</li> <li>DDEV assumes that hostnames can be resolved within 3 seconds. That assumption is not valid on all networks or computers, so you can increase the amount of time it waits for resolution. Increasing to 5 seconds, for example: <code>ddev config global --internet-detection-timeout-ms=5000</code>.</li> <li>If DDEV detects that it can\u2019t look up one of the hostnames assigned to your project for that or other reasons, it will try to add that to the hosts file on your computer, which requires administrative privileges (sudo or Windows UAC).<ul> <li>This technique may not work on Windows WSL2, see below.</li> </ul> </li> </ul>"},{"location":"users/usage/troubleshooting/#dns-rebinding-prohibited-mostly-on-fritzbox-routers","title":"DNS Rebinding Prohibited (Mostly on Fritzbox Routers)","text":"<p>You may see one of several messages:</p> <ul> <li>Cannot resolve</li> <li>unknown host</li> <li>No address associated with hostname</li> </ul> <p>Some DNS servers prevent the use of DNS records that resolve to <code>localhost</code> (127.0.0.1) because in uncontrolled environments this may be used as a form of attack called DNS Rebinding. Since <code>*.ddev.site</code> resolves to 127.0.0.1, they may refuse to resolve, and your browser may be unable to look up a hostname, and give you messages like \u201c server IP address could not be found\u201d or \u201cWe can\u2019t connect to the server at \u201d. <p>You verify this is your problem by running <code>ping dkkd.ddev.site</code>. If you get \u201cNo address associated with hostname\u201d or something of that type, your computer is unable to look up <code>*.ddev.site</code>.</p> <p>In this case, you can take any one of the following approaches:</p> <ol> <li>Reconfigure your router to allow DNS Rebinding. Many Fritzbox routers have added default DNS Rebinding disallowal, and they can be reconfigured to allow it. See issue. If you have the local dnsmasq DNS server it may also be configured to disallow DNS rebinding, but it\u2019s a simple change to a configuration directive to allow it.</li> <li>Most computers can use most relaxed DNS resolution if they are not on corporate intranets that have non-internet DNS. So for example, the computer can be set to use 8.8.8.8 (Google) or 1.1.1.1 (Cloudflare) for DNS name resolution.</li> <li>If you have control of the router, you can usually change its DHCP settings to choose a public, relaxed DNS server as in #2.</li> <li>You can live with DDEV trying to edit the <code>/etc/hosts</code> file, which it only has to do when a new name is added to a project.</li> </ol>"},{"location":"users/usage/troubleshooting/#windows-wsl2-network-issues","title":"Windows WSL2 Network Issues","text":"<p>If you\u2019re using a browser on Windows, accessing a project in WSL2, you can end up with confusing results when your project is listening on a port inside WSL2 while a Windows process is listening on that same port. The way to sort this out is to stop your project inside WSL2, verify that nothing is listening on the port there, and then study the port on the Windows side by visiting it with a browser or using other tools as described above.</p>"},{"location":"users/usage/troubleshooting/#limitations-on-symbolic-links-symlinks","title":"Limitations on Symbolic Links (symlinks)","text":"<p>Symbolic links are widely used but have specific limitations in many environments beyond DDEV. Here are some of the ways those may affect you:</p> <ul> <li>Crossing mount boundaries: Symlinks may not generally cross between network mounts. In other words, if you have a relative symlink in the root of your project directory on the host that points to <code>../somefile.txt</code>, that symlink will not be valid inside the container where <code>../</code> is a completely different filesystem (and is typically not mounted).</li> <li>Symlinks to absolute paths: If you have an absolute symlink to something like <code>/Users/xxx/somefile.txt</code> on the host, it will not be resolvable inside the container because <code>/Users</code> is not mounted there. Some tools, especially on Magento 2, may create symlinks to rooted paths, with targets like <code>/var/www/html/path/to/something</code>. These basically can\u2019t make it to the host and may create errors.</li> <li>Windows restrictions on symlinks: Inside the Docker container on Windows, you may not be able to create a symlink that goes outside the container.</li> <li>Mutagen restrictions on Windows symlinks: On macOS and Linux (including WSL2) the default <code>.ddev/mutagen/mutagen.yml</code> chooses the <code>posix-raw</code> type of symlink handling. (See Mutagen docs). This basically means that any symlink created will try to sync, regardless of whether it\u2019s valid in the other environment. However, Mutagen does not support posix-raw on traditional Windows, so DDEV uses the <code>portable</code> symlink mode. So on Windows with Mutagen, symlinks have to be strictly limited to relative links that are inside the Mutagen section of the project.</li> </ul>"},{"location":"users/usage/troubleshooting/#delete-and-re-download-docker-images","title":"Delete and Re-Download Docker Images","text":"<p>In a few unusual cases, the actual downloaded Docker images can somehow get corrupted. Deleting the images will force them to be re-downloaded or rebuilt. This does no harm, as everything is rebuilt, but running <code>ddev start</code> will take longer while it downloads needed resources:</p> <pre><code>ddev poweroff\ndocker rm -f $(docker ps -aq) # Stop any other random containers that may be running\ndocker rmi -f $(docker images -q) # You might have to repeat this to get rid of all images\n</code></pre>"},{"location":"users/usage/uninstall/","title":"Uninstalling DDEV","text":"<p>A DDEV installation consists of:</p> <ul> <li>The self-contained <code>ddev</code> binary.</li> <li>Each project\u2019s <code>.ddev</code> directory.</li> <li>The global <code>~/.ddev</code> directory where various global items are stored.</li> <li>The global <code>~/.ddev_mutagen_data_directory</code> directory where Mutagen sync data may be stored.</li> <li>The associated Docker images and containers DDEV created.</li> <li>Any entries in <code>/etc/hosts</code>.</li> </ul> <p>Please use <code>ddev snapshot</code> or <code>ddev export-db</code> to make backups of your databases before deleting projects or uninstalling.</p> <p>You can use <code>ddev clean</code> to uninstall the vast majority of things DDEV has touched. For example, <code>ddev clean &lt;project&gt;</code> or <code>ddev clean --all</code>.</p> <p>To uninstall one project, run <code>ddev delete &lt;project&gt;</code>. This removes any hostnames in <code>/etc/hosts</code> and removes your database. If you don\u2019t want it to make a database backup/snapshot on the way down, include the <code>--omit-snapshot</code> option: <code>ddev delete --omit-snapshot &lt;project&gt;</code>.</p> <p>To remove all DDEV-owned <code>/etc/hosts</code> entries: <code>ddev hostname --remove-inactive</code>.</p> <p>To remove the global <code>.ddev</code> directory: <code>rm -r ~/.ddev</code>.</p> <p>To remove the global <code>.ddev_mutagen_data_directory</code> directory: <code>rm -r ~/.ddev_mutagen_data_directory</code>.</p> <p>If you installed Docker only for DDEV and want to uninstall it with all containers and images, uninstall it for your version of Docker.</p> <p>Otherwise:</p> <ul> <li>Remove Docker images from before the current DDEV release with <code>ddev delete images</code>.</li> <li>Remove all DDEV Docker containers that might still exist: <code>docker rm $(docker ps -a | awk '/ddev/ { print $1 }')</code>.</li> <li>Remove all DDEV Docker images that might exist: <code>docker rmi $(docker images | awk '/ddev/ {print $3}')</code>.</li> <li>Remove all Docker images of any type (does no harm; they\u2019ll be re-downloaded): <code>docker rmi -f $(docker images -q)</code>.</li> <li>Remove any Docker volumes: <code>docker volume rm $(docker volume ls | awk '/ddev|-mariadb/ { print $2 }')</code>.</li> </ul> <p>To remove the <code>ddev</code> binary:</p> <ul> <li>On macOS or Linux with Homebrew, <code>brew uninstall ddev</code>.</li> <li>For Linux or other simple installs, remove the binary. Example: <code>sudo rm /usr/local/bin/ddev</code>. For Linux installed via apt, <code>sudo apt remove ddev</code>.</li> <li>On Windows, if you used the DDEV Windows installer, use the uninstall on the Start Menu or in the \u201cAdd or Remove Programs\u201d section of Windows Settings.</li> </ul>"}]}